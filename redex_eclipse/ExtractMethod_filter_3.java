/**
* You have a code fragment that can be grouped together. Turn 
* the fragment into a method whose name explains the purpose of the method.
*
*/
---------------Library-------------------
method: org.eclipse.jface.internal.databinding.viewers.ObservableCollectionContentProvider.asyncUpdateRealizedElements()V1
private void asyncUpdateRealizedElements() {
    if (realizedElements == null)
        return;
    display.asyncExec(new  Runnable() {

        public void run() {
            if (realizedElements != null) {
                realizedElements.addAll(knownElements);
            }
        }
    });
}
---------------Client-------------------
method: org.eclipse.compare.CompareConfiguration$DefaultLabelProvider.labelProviderChanged(org.eclipse.jface.viewers.LabelProviderChangedEvent;)V2
public void labelProviderChanged(LabelProviderChangedEvent event) {
    fireLabelProviderChanged(new  LabelProviderChangedEvent(this, event.getElements()));
}
method: org.eclipse.jface.viewers.LabelProviderChangedEvent.getElements()Ajava.lang.Object;1
public Object[] getElements() {
    if (this.elements == null) {
        return null;
    } else {
        return this.elements;
    }
}
//false
---------------Library-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.chooseEnclosingType()org.eclipse.jdt.core.IType;1
protected IType chooseEnclosingType() {
    IPackageFragmentRoot root = getPackageFragmentRoot();
    if (root == null) {
        return null;
    }
    IJavaSearchScope scope = SearchEngine.createJavaSearchScope(new IJavaElement[] { root });
    FilteredTypesSelectionDialog dialog = new  FilteredTypesSelectionDialog(getShell(), false, getWizard().getContainer(), scope, IJavaSearchConstants.TYPE);
    dialog.setTitle(NewWizardMessages.NewTypeWizardPage_ChooseEnclosingTypeDialog_title);
    dialog.setMessage(NewWizardMessages.NewTypeWizardPage_ChooseEnclosingTypeDialog_description);
    dialog.setInitialPattern(Signature.getSimpleName(getEnclosingTypeText()));
    if (dialog.open() == Window.OK) {
        return (IType) dialog.getFirstResult();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.chooseSuperClass()org.eclipse.jdt.core.IType;1
protected IType chooseSuperClass() {
    IJavaProject project = getJavaProject();
    if (project == null) {
        return null;
    }
    IJavaElement[] elements = new IJavaElement[] { project };
    IJavaSearchScope scope = SearchEngine.createJavaSearchScope(elements);
    FilteredTypesSelectionDialog dialog = new  FilteredTypesSelectionDialog(getShell(), false, getWizard().getContainer(), scope, IJavaSearchConstants.CLASS);
    dialog.setTitle(NewWizardMessages.NewTypeWizardPage_SuperClassDialog_title);
    dialog.setMessage(NewWizardMessages.NewTypeWizardPage_SuperClassDialog_message);
    dialog.setInitialPattern(getSuperClass());
    if (dialog.open() == Window.OK) {
        return (IType) dialog.getFirstResult();
    }
    return null;
}
method: org.eclipse.jdt.ui.wizards.NewContainerWizardPage.getJavaProject()org.eclipse.jdt.core.IJavaProject;1
public IJavaProject getJavaProject() {
    IPackageFragmentRoot root = getPackageFragmentRoot();
    if (root != null) {
        return root.getJavaProject();
    }
    return null;
}
//false
---------------Library-------------------
method: org.eclipse.core.internal.dtree.DeltaDataTree.deleteChild(org.eclipse.core.runtime.IPath;java.lang.String;)V3
public void deleteChild(IPath parentKey, String localName) {
    if (isImmutable())
        handleImmutableTree();
    // IPath childKey = parentKey.append(localName);
    // if (!includes(childKey))
    //     handleNotFound(childKey);
    // assembleNode(parentKey, new  NoDataDeltaNode(parentKey.lastSegment(), new  DeletedNode(localName)));
}
---------------Client-------------------
method: org.eclipse.core.internal.dtree.DeltaDataTree.createChild(org.eclipse.core.runtime.IPath;java.lang.String;java.lang.Object;)V4
public void createChild(IPath parentKey, String localName, Object data) {
    if (isImmutable())
        handleImmutableTree();
    addChild(parentKey, localName, new  DataTreeNode(localName, data));
}
method: org.eclipse.core.internal.dtree.DeltaDataTree.addChild(org.eclipse.core.runtime.IPath;java.lang.String;org.eclipse.core.internal.dtree.AbstractDataTreeNode;)V4
protected void addChild(IPath parentKey, String localName, AbstractDataTreeNode childNode) {
    if (!includes(parentKey))
        handleNotFound(parentKey);
    childNode.setName(localName);
    this.assembleNode(parentKey, new  NoDataDeltaNode(parentKey.lastSegment(), childNode));
}
//opportunity. The commented code in Library can be extracted.
---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.CodeAssistConfigurationBlock.createSubsection(org.eclipse.swt.widgets.Composite;java.lang.String;)org.eclipse.swt.widgets.Composite;3
protected Composite createSubsection(Composite parent, String label) {
    Group group = new  Group(parent, SWT.SHADOW_NONE);
    group.setText(label);
    GridData data = new  GridData(SWT.FILL, SWT.CENTER, true, false);
    group.setLayoutData(data);
    GridLayout layout = new  GridLayout();
    layout.numColumns = 3;
    group.setLayout(layout);
    return group;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.CheckoutAsMainPage.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;4
protected Button createRadioButton(Composite parent, String label, int span) {
    Button radio = super.createRadioButton(parent, label, span);
    radio.addSelectionListener(new  SelectionAdapter() {

        public void widgetSelected(SelectionEvent e) {
            updateEnablements();
        }
    });
    return radio;
}
method: org.eclipse.team.internal.ccvs.ui.wizards.CVSWizardPage.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;4
protected Button createRadioButton(Composite parent, String label, int span) {
    Button button = new  Button(parent, SWT.RADIO);
    button.setText(label);
    GridData data = new  GridData();
    data.horizontalSpan = span;
    button.setLayoutData(data);
    return button;
}
//false

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.dialogs.SortMembersMessageDialog.createContents(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Control;2
@Override
protected Control createContents(Composite parent) {
    Control contents = super.createContents(parent);
    PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, IJavaHelpContextIds.SORT_MEMBERS_DIALOG);
    return contents;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;3
protected String getTemplate(String name, ICompilationUnit parentCU) {
    return getTemplate(name, parentCU, 0);
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;I)java.lang.String;4
protected String getTemplate(String name, ICompilationUnit parentCU, int pos) {
    try {
        Template template = JavaPlugin.getDefault().getTemplateStore().findTemplate(name);
        if (template != null) {
            return JavaContext.evaluateTemplate(template, parentCU, pos);
        }
    } catch (CoreException e) {
        JavaPlugin.log(e);
    } catch (BadLocationException e) {
        JavaPlugin.log(e);
    } catch (TemplateException e) {
        JavaPlugin.log(e);
    }
    return null;
}
//false
---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.NewLibraryPluginCreationUpdateRefPage$TablePart.createStructuredViewer(org.eclipse.swt.widgets.Composite;ILorg.eclipse.ui.forms.widgets.FormToolkit;)org.eclipse.jface.viewers.StructuredViewer;4
protected StructuredViewer createStructuredViewer(Composite parent, int style, FormToolkit toolkit) {
    StructuredViewer viewer = super.createStructuredViewer(parent, style, toolkit);
    viewer.setComparator(ListUtil.PLUGIN_COMPARATOR);
    return viewer;
}
---------------Client-------------------
method: org.apache.felix.gogo.shell.Builtin.format(org.apache.felix.service.command.CommandSession;java.lang.Object;)java.lang.CharSequence;3
public CharSequence format(CommandSession session, Object arg) {
    CharSequence result = session.format(arg, Converter.INSPECT);
    System.out.println(result);
    return result;
}
method: org.apache.felix.gogo.runtime.CommandSessionImpl.format(java.lang.Object;I)java.lang.CharSequence;3
public CharSequence format(Object result, int inspect) {
    try {
        return format(result, inspect, this);
    } catch (Exception e) {
        return "<can not format " + result + ":" + e;
    }
}
//false
---------------Library-------------------
method: org.eclipse.swt.browser.HelperAppLauncherDialogFactory.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}
//false
---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.tools.UpdateBuildpathWizard.getSettingsSection(org.eclipse.jface.dialogs.IDialogSettings;)org.eclipse.jface.dialogs.IDialogSettings;2
private IDialogSettings getSettingsSection(IDialogSettings master) {
    // IDialogSettings setting = master.getSection(STORE_SECTION);
    // if (setting == null) {
    //     setting = master.addNewSection(STORE_SECTION);
    // }
    return setting;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}
//opportunity. The commented code in Library can be extracted.

---------------Library-------------------
method: org.eclipse.jsch.internal.ui.KeyboardInteractiveDialog.close()Z1
public boolean close() {
    // if (keyLockImage != null) {
    //     keyLockImage.dispose();
    // }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}
//opportunity. The commented code in Library can be extracted.

---------------Library-------------------
method: org.eclipse.core.internal.localstore.Bucket.flush()V1
public void flush() {
    projectName = null;
    location = null;
    entries.clear();
    needSaving = false;
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.text.plugin.PluginDocumentHandler.startDocument()V1
public void startDocument() throws SAXException {
    super.startDocument();
    fSchemaVersion = null;
}
method: org.eclipse.pde.internal.core.text.DocumentHandler.startDocument()V1
public void startDocument() throws SAXException {
    fDocumentNodeStack.clear();
    fHighestOffset = 0;
    fLastError = null;
}
//false
---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getTraversalRoots()Aorg.eclipse.core.resources.IResource;1
protected IResource[] getTraversalRoots() {
    List result = new  ArrayList();
    ResourceTraversal[] traversals = getTraversals();
    for (int i = 0; i < traversals.length; i++) {
        ResourceTraversal traversal = traversals[i];
        result.addAll(Arrays.asList(traversal.getResources()));
    }
    return (IResource[]) result.toArray(new IResource[result.size()]);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSource.create(Aorg.eclipse.core.resources.IResource;)org.eclipse.team.internal.ccvs.ui.tags.TagSource;1
public static TagSource create(IResource[] resources) {
    return create(getCVSResources(getProjects(resources)));
}
method: org.eclipse.team.internal.ccvs.ui.tags.TagSource.getProjects(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.core.resources.IResource;1
private static IResource[] getProjects(IResource[] resources) {
    Set result = new  HashSet();
    for (int i = 0; i < resources.length; i++) {
        IResource resource = resources[i];
        result.add(resource.getProject());
    }
    return (IResource[]) result.toArray(new IResource[result.size()]);
}
//fasle

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_mid_gc(JIAJ)V3
public static final void gtk_style_get_mid_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_mid_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}
//false

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.imports.PluginImportWizard.getSettingsSection(org.eclipse.jface.dialogs.IDialogSettings;)org.eclipse.jface.dialogs.IDialogSettings;2
private IDialogSettings getSettingsSection(IDialogSettings master) {
    // IDialogSettings setting = master.getSection(STORE_SECTION);
    // if (setting == null) {
    //     setting = master.addNewSection(STORE_SECTION);
    // }
    return setting;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}
//opportunity. The commented code in Library can be extracted.
---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.CVSHistorySearchFilter.authorMatch(org.eclipse.team.internal.ccvs.core.filehistory.CVSFileRevision;)Z2
protected boolean authorMatch(CVSFileRevision revision) {
    String author = revision.getAuthor();
    if (author != null) {
        Iterator iter = searchStrings.iterator();
        while (iter.hasNext()) {
            String nextString = (String) iter.next();
            if (!((author.indexOf(nextString)) == -1))
                return true;
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.ltk.internal.ui.refactoring.TextEditGroupNode.hasOneGroupCategory(java.util.List;)Z2
boolean hasOneGroupCategory(List categories) {
    return fChangeGroup.getGroupCategorySet().containsOneCategory(categories);
}
method: org.eclipse.ltk.core.refactoring.GroupCategorySet.containsOneCategory(java.util.List;)Z2
public boolean containsOneCategory(List categories) {
    for (Iterator iter = categories.iterator(); iter.hasNext(); ) {
        GroupCategory category = (GroupCategory) iter.next();
        if (contains(category))
            return true;
    }
    return false;
}
//true
---------------Library-------------------
method: org.eclipse.ecf.internal.provider.filetransfer.Activator.pluginExcluded(java.lang.String;)Z2
boolean pluginExcluded(String pluginId) {
    // if (excludedPlugins == null) {
    //     excludedPlugins = parseExcludedPlugins();
    // }
    List l = Arrays.asList(excludedPlugins);
    return l.contains(pluginId);
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.License.hashCode()I1
public int hashCode() {
    return getUUID().hashCode();
}
method: org.eclipse.equinox.internal.p2.metadata.License.getUUID()java.lang.String;1
public synchronized String getUUID() {
    if (digest == null)
        digest = calculateLicenseDigest().toString(16);
    return digest;
}
//true
---------------Library-------------------
method: org.eclipse.ui.forms.widgets.ScrolledForm.setBackground(org.eclipse.swt.graphics.Color;)V2
public void setBackground(Color bg) {
    super.setBackground(bg);
    if (content != null) {
        content.setBackground(bg);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}
//false
---------------Library-------------------
method: org.eclipse.equinox.internal.security.ui.Activator.getImageDescriptor(java.lang.String;)org.eclipse.jface.resource.ImageDescriptor;1
public static ImageDescriptor getImageDescriptor(String relativePath) {
    return imageDescriptorFromPlugin("org.eclipse.equinox.security.ui", "icons" + relativePath);
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.WidgetDelegatingValueProperty.observeDelayed(ILorg.eclipse.swt.widgets.Widget;)org.eclipse.jface.databinding.swt.ISWTObservableValue;3
public ISWTObservableValue observeDelayed(int delay, Widget widget) {
    return SWTObservables.observeDelayedValue(delay, observe(widget));
}
method: org.eclipse.jface.databinding.swt.SWTObservables.observeDelayedValue(ILorg.eclipse.jface.databinding.swt.ISWTObservableValue;)org.eclipse.jface.databinding.swt.ISWTObservableValue;2
public static ISWTObservableValue observeDelayedValue(int delay, ISWTObservableValue observable) {
    return new  SWTDelayedObservableValueDecorator(Observables.observeDelayedValue(delay, observable), observable.getWidget());
}
//false
---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.use.ApiUsePatternTab$5.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
@Override
public void keyPressed(KeyEvent event) {
    // if (event.character == SWT.DEL && event.stateMask == 0) {
    //     doRemove();
    // }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea$7.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void keyPressed(KeyEvent event) {
    handleKeyPressed(event);
}
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea.handleKeyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        deleteDateTag();
    }
}
//true
---------------Library-------------------
method: org.eclipse.jface.databinding.viewers.ObservableValueEditingSupport.saveCellEditorValue(org.eclipse.jface.viewers.CellEditor;org.eclipse.jface.viewers.ViewerCell;)V3
protected final void saveCellEditorValue(CellEditor cellEditor, ViewerCell cell) {
    if (dirty) {
        editingState.binding.updateTargetToModel();
        dirty = false;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.TodoTaskConfigurationBlock.setEnabled(Z)V2
public void setEnabled(boolean isEnabled) {
    fTodoTasksList.setEnabled(isEnabled);
    fCaseSensitiveCheckBox.setEnabled(isEnabled);
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.setEnabled(Z)V2
public final void setEnabled(boolean enabled) {
    if (enabled != fEnabled) {
        fEnabled = enabled;
        updateEnableState();
    }
}
//false
---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.PDEFormTextEditorContributor.init(org.eclipse.ui.IActionBars;)V2
public void init(IActionBars bars) {
    super.init(bars);
    fSourceActionBars = new  SubActionBars(bars);
    fSourceContributor.init(fSourceActionBars);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.refactoring.binary.BinaryRefactoringHistoryWizard$1.createPackageFragment(org.eclipse.core.filesystem.IFileStore;java.lang.String;org.eclipse.core.runtime.IProgressMonitor;)V4
@Override
protected final void createPackageFragment(final IFileStore store, final String name, final IProgressMonitor pm) throws CoreException {
    fFragment = sourceFolder.createPackageFragment(name, true, pm);
}
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.createPackageFragment(java.lang.String;ZLorg.eclipse.core.runtime.IProgressMonitor;)org.eclipse.jdt.core.IPackageFragment;4
public IPackageFragment createPackageFragment(String pkgName, boolean force, IProgressMonitor monitor) throws JavaModelException {
    CreatePackageFragmentOperation op = new  CreatePackageFragmentOperation(this, pkgName, force);
    op.runOperation(monitor);
    return getPackageFragment(op.pkgName);
}
//false
---------------Library-------------------
method: org.eclipse.ui.internal.views.log.EventDetailsDialogAction.setComparator(java.util.Comparator;)V2
public void setComparator(Comparator comparator) {
    this.comparator = comparator;
    if (propertyDialog != null && propertyDialog.isOpen())
        propertyDialog.setComparator(comparator);
}
---------------Client-------------------
method: org.eclipse.jface.fieldassist.ControlDecoration.hide()V1
public void hide() {
    if (visible) {
        visible = false;
        hideHover();
        update();
    }
}
method: org.eclipse.jface.fieldassist.ControlDecoration.hideHover()V1
public void hideHover() {
    if (hover != null) {
        hover.setVisible(false);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.refactoring.nls.SourceFirstPackageSelectionDialogField.setDefaults(org.eclipse.jdt.core.IPackageFragment;org.eclipse.jdt.core.ICompilationUnit;)V3
private void setDefaults(IPackageFragment fragment, ICompilationUnit cu) {
    IJavaElement element = fragment;
    if (element == null) {
        element = cu;
    }
    fSourceFolderSelection.setRoot(searchSourcePackageFragmentRoot(element));
    fPackageSelection.setPackageFragment(searchPackageFragment(element));
}
---------------Client-------------------
method: org.eclipse.swt.custom.CTabFolderRenderer.drawBorder(org.eclipse.swt.graphics.GC;AI)V3
void drawBorder(GC gc, int[] shape) {
    gc.setForeground(parent.getDisplay().getSystemColor(BORDER1_COLOR));
    gc.drawPolyline(shape);
}
method: org.eclipse.swt.widgets.Widget.getDisplay()org.eclipse.swt.widgets.Display;1
public Display getDisplay() {
    Display display = this.display;
    if (display == null)
        error(SWT.ERROR_WIDGET_DISPOSED);
    return display;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.LabeledStatement;)V2
@Override
public void endVisit(LabeledStatement node) {
    if (skipNode(node))
        return;
    FlowInfo info = assignFlowInfo(node, node.getBody());
    if (info != null)
        info.removeLabel(node.getLabel());
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;)V2
@Override
public void endVisit(AnnotationTypeDeclaration node) {
    if (skipNode(node))
        return;
    GenericSequentialFlowInfo info = processSequential(node, node.bodyDeclarations());
    info.setNoReturn();
}
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.processSequential(org.eclipse.jdt.core.dom.ASTNode;java.util.List;)org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo;3
protected GenericSequentialFlowInfo processSequential(ASTNode parent, List<? extends ASTNode> nodes) {
    GenericSequentialFlowInfo result = createSequential(parent);
    process(result, nodes);
    return result;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.resetModifiers()V1
protected void resetModifiers() {
    this.modifiers = ClassFileConstants.AccDefault;
    this.modifiersSourceStart = -1;
    this.scanner.commentPtr = -1;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.goForBlockStatementsOrCatchHeader()V1
public void goForBlockStatementsOrCatchHeader() {
    super.goForBlockStatementsOrCatchHeader();
    this.isFirst = true;
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.goForBlockStatementsOrCatchHeader()V1
public void goForBlockStatementsOrCatchHeader() {
    this.firstToken = TokenNameMULTIPLY;
    this.scanner.recordLineSeparator = false;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.InstallWizard.createRemediationPage()org.eclipse.equinox.internal.p2.ui.dialogs.RemediationPage;1
protected RemediationPage createRemediationPage() {
    remediationPage = new  RemediationPage(ui, this, root, operation);
    return remediationPage;
}
---------------Client-------------------
method: org.eclipse.jface.layout.RowDataFactory.create()org.eclipse.swt.layout.RowData;1
public RowData create() {
    return copyData(data);
}
method: org.eclipse.jface.layout.RowDataFactory.copyData(org.eclipse.swt.layout.RowData;)org.eclipse.swt.layout.RowData;1
public static RowData copyData(RowData data) {
    RowData newData = new  RowData(data.width, data.height);
    newData.exclude = data.exclude;
    return newData;
}

---------------Library-------------------
method: org.eclipse.ui.internal.preferences.WorkingSetPropertyPage$ReadOnlyPage.createControl(org.eclipse.swt.widgets.Composite;)V2
@Override
public void createControl(Composite parent) {
    Composite composite = new  Composite(parent, SWT.NONE);
    composite.setLayoutData(new  GridData(SWT.FILL, SWT.FILL, true, true));
    composite.setLayout(new  GridLayout(1, false));
    setControl(composite);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.CheckoutWizard$1.createControl(org.eclipse.swt.widgets.Composite;)V2
public void createControl(Composite parent) {
    Composite composite = createComposite(parent, 1, false);
    setControl(composite);
}
method: org.eclipse.team.internal.ccvs.ui.wizards.CVSWizardPage.createComposite(org.eclipse.swt.widgets.Composite;IZ)org.eclipse.swt.widgets.Composite;4
protected Composite createComposite(Composite parent, int numColumns, boolean grabExcess) {
    final Composite composite = new  Composite(parent, SWT.NULL);
    composite.setLayout(new  GridLayout(numColumns, false));
    composite.setLayoutData(new  GridData(SWT.FILL, SWT.FILL, grabExcess, grabExcess));
    return composite;
}

---------------Library-------------------
method: org.eclipse.jdt.debug.ui.launchConfigurations.JavaMainTab.initializeFrom(org.eclipse.debug.core.ILaunchConfiguration;)V2
@Override
public void initializeFrom(ILaunchConfiguration config) {
    super.initializeFrom(config);
    updateMainTypeFromConfig(config);
    updateStopInMainFromConfig(config);
    updateInheritedMainsFromConfig(config);
    updateExternalJars(config);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.complete.CompletionParser.consumeEnterAnonymousClassBody(Z)V2
protected void consumeEnterAnonymousClassBody(boolean qualified) {
    popElement(K_SELECTOR_QUALIFIER);
    popElement(K_SELECTOR_INVOCATION_TYPE);
    super.consumeEnterAnonymousClassBody(qualified);
}
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.consumeEnterAnonymousClassBody(Z)V2
protected void consumeEnterAnonymousClassBody(boolean qualified) {
    super.consumeEnterAnonymousClassBody(qualified);
    popElement(K_SELECTOR);
    pushOnElementStack(K_TYPE_DELIMITER);
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.StructuredViewerSection.createClientContainer(org.eclipse.swt.widgets.Composite;ILorg.eclipse.ui.forms.widgets.FormToolkit;)org.eclipse.swt.widgets.Composite;4
protected Composite createClientContainer(Composite parent, int span, FormToolkit toolkit) {
    Composite container = toolkit.createComposite(parent);
    container.setLayout(FormLayoutFactory.createSectionClientGridLayout(false, span));
    return container;
}
---------------Client-------------------
method: org.eclipse.jface.viewers.ColumnViewer.getCell(org.eclipse.swt.graphics.Point;)org.eclipse.jface.viewers.ViewerCell;2
public ViewerCell getCell(Point point) {
    ViewerRow row = getViewerRow(point);
    if (row != null) {
        return row.getCell(point);
    }
    return null;
}
method: org.eclipse.jface.viewers.ColumnViewer.getViewerRow(org.eclipse.swt.graphics.Point;)org.eclipse.jface.viewers.ViewerRow;2
protected ViewerRow getViewerRow(Point point) {
    Item item = getItemAt(point);
    if (item != null) {
        return getViewerRowFromItem(item);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.core.internal.registry.ExtensionRegistry.removeListener(org.eclipse.core.runtime.IRegistryEventListener;)V2
public void removeListener(IRegistryEventListener listener) {
    synchronized (listeners) {
        listeners.remove(new  ListenerInfo(listener, null));
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.registry.ExtensionRegistry.addListener(org.eclipse.core.runtime.IRegistryEventListener;)V2
public void addListener(IRegistryEventListener listener) {
    addListenerInternal(listener, null);
}
method: org.eclipse.core.internal.registry.ExtensionRegistry.addListenerInternal(java.util.EventListener;java.lang.String;)V3
private void addListenerInternal(EventListener listener, String filter) {
    synchronized (listeners) {
        listeners.add(new  ListenerInfo(listener, filter));
    }
}

---------------Library-------------------
method: org.eclipse.jface.text.TextViewer.addPostSelectionChangedListener(org.eclipse.jface.viewers.ISelectionChangedListener;)V2
public void addPostSelectionChangedListener(ISelectionChangedListener listener) {
    Assert.isNotNull(listener);
    if (fPostSelectionChangedListeners == null)
        fPostSelectionChangedListeners = new  ArrayList();
    if (!fPostSelectionChangedListeners.contains(listener))
        fPostSelectionChangedListeners.add(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.progress.WorkbenchSiteProgressService.warnOfContentChange()V1
@Override
public void warnOfContentChange() {
    MPart part = site.getModel();
    if (!part.getTags().contains(CSSConstants.CSS_CONTENT_CHANGE_CLASS)) {
        part.getTags().add(CSSConstants.CSS_CONTENT_CHANGE_CLASS);
    }
}
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.getTags()java.util.List;1
public List<String> getTags() {
    if (tags == null) {
        tags = new  EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION_ELEMENT__TAGS);
    }
    return tags;
}

---------------Library-------------------
method: org.eclipse.swt.browser.PromptFactory.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage.getTitleImage(org.eclipse.jface.viewers.ISelection;)org.eclipse.swt.graphics.Image;2
public Image getTitleImage(ISelection selection) {
    if (selection == null) {
        selection = currentSelection;
    }
    return registry.getLabelProvider().getImage(selection);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.NewLibraryPluginCreationPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
public IWizardPage getNextPage() {
    updateData();
    return super.getNextPage();
}
method: org.eclipse.jface.wizard.WizardPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
@Override
public IWizardPage getNextPage() {
    if (wizard == null) {
        return null;
    }
    return wizard.getNextPage(this);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.callhierarchy.SearchScopeActionGroup.getWorkingSetNames(Aorg.eclipse.ui.IWorkingSet;)Ajava.lang.String;2
private String[] getWorkingSetNames(IWorkingSet[] sets) {
    String[] result = new String[sets.length];
    for (int i = 0; i < sets.length; i++) {
        result[i] = sets[i].getName();
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.jface.resource.FontRegistry$FontRecord.dispose()V1
void dispose() {
    baseFont.dispose();
    if (boldFont != null) {
        boldFont.dispose();
    }
    if (italicFont != null) {
        italicFont.dispose();
    }
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.preferences.AntClasspathContentProvider.removeAll()V1
public void removeAll() {
    model.removeAll();
    refresh();
}
method: org.eclipse.ant.internal.ui.preferences.ClasspathModel.removeAll()V1
public void removeAll() {
    if (fAntHomeEntry != null) {
        fAntHomeEntry.removeAll();
    }
    if (fUserGlobalEntry != null) {
        fUserGlobalEntry.removeAll();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.bundle.ImportPackageHeader.getPackages()Aorg.eclipse.pde.internal.core.text.bundle.ImportPackageObject;1
public ImportPackageObject[] getPackages() {
    PDEManifestElement[] elements = getElements();
    ImportPackageObject[] result = new ImportPackageObject[elements.length];
    System.arraycopy(elements, 0, result, 0, elements.length);
    return result;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.pipe(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)org.eclipse.equinox.p2.metadata.expression.IExpression;2
public IExpression pipe(IExpression... operands) {
    return Pipe.createPipe(convertArray(operands));
}
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.convertArray(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)Aorg.eclipse.equinox.internal.p2.metadata.expression.Expression;1
protected static Expression[] convertArray(IExpression[] operands) {
    Expression[] ops = new Expression[operands.length];
    System.arraycopy(operands, 0, ops, 0, operands.length);
    return ops;
}

---------------Library-------------------
method: org.eclipse.emf.ecore.util.EcoreValidator.validateEEnum_UniqueEnumeratorNames(org.eclipse.emf.ecore.EEnum;org.eclipse.emf.common.util.DiagnosticChain;java.util.Map;)Z4
public boolean validateEEnum_UniqueEnumeratorNames(EEnum eEnum, DiagnosticChain diagnostics, Map<Object, Object> context) {
    boolean result = true;
    EList<EEnumLiteral> eLiterals = eEnum.getELiterals();
    Map<String, List<EEnumLiteral>> keys = new  HashMap<String, List<EEnumLiteral>>();
    for (EEnumLiteral eEnumLiteral : eLiterals) {
        String name = eEnumLiteral.getName();
        if (name != null) {
            String key = name.replace("_", "").toUpperCase();
            List<EEnumLiteral> eEnumLiterals = keys.get(key);
            if (eEnumLiterals == null) {
                eEnumLiterals = new  ArrayList<EEnumLiteral>();
                keys.put(key, eEnumLiterals);
            }
            eEnumLiterals.add(eEnumLiteral);
            if (eEnumLiterals.size() > 1) {
                if (diagnostics == null) {
                    return false;
                } else {
                    result = false;
                }
            }
        }
    }
    if (!result) {
        for (Map.Entry<String, List<EEnumLiteral>> entry : keys.entrySet()) {
            List<EEnumLiteral> eEnumLiterals = entry.getValue();
            if (eEnumLiterals.size() > 1) {
                List<String> names = new  UniqueEList<String>();
                List<Object> objects = new  ArrayList<Object>();
                objects.add(eEnum);
                for (EEnumLiteral eEnumLiteral : eEnumLiterals) {
                    names.add(eEnumLiteral.getName());
                    objects.add(eEnumLiteral);
                }
                objects.add(EcorePackage.Literals.EENUM__ELITERALS);
                if (names.size() == objects.size() - 2) {
                    diagnostics.add(createDiagnostic(Diagnostic.WARNING, DIAGNOSTIC_SOURCE, UNIQUE_ENUMERATOR_NAMES, "_UI_EEnumDissimilarEnumeratorNames_diagnostic", names.toArray(new Object[names.size()]), objects.toArray(new Object[objects.size()]), context));
                } else {
                    diagnostics.add(createDiagnostic(Diagnostic.ERROR, DIAGNOSTIC_SOURCE, UNIQUE_ENUMERATOR_NAMES, "_UI_EEnumUniqueEnumeratorNames_diagnostic", new Object[] { names.get(0) }, objects.toArray(new Object[objects.size()]), context));
                }
            }
        }
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.emf.ecore.util.EcoreValidator.validateEPackage_UniqueClassifierNames(org.eclipse.emf.ecore.EPackage;org.eclipse.emf.common.util.DiagnosticChain;java.util.Map;)Z4
public boolean validateEPackage_UniqueClassifierNames(EPackage ePackage, DiagnosticChain diagnostics, Map<Object, Object> context) {
    boolean result = true;
    Map<String, List<EClassifier>> keys = new  HashMap<String, List<EClassifier>>();
    for (EClassifier eClassifier : ePackage.getEClassifiers()) {
        String name = eClassifier.getName();
        if (name != null) {
            String key = name.replace("_", "").toLowerCase();
            List<EClassifier> eClassifiers = keys.get(key);
            if (eClassifiers == null) {
                eClassifiers = new  ArrayList<EClassifier>();
                keys.put(key, eClassifiers);
            }
            eClassifiers.add(eClassifier);
            if (eClassifiers.size() > 1) {
                if (diagnostics == null) {
                    return false;
                } else {
                    result = false;
                }
            }
        }
    }
    if (!result) {
        for (Map.Entry<String, List<EClassifier>> entry : keys.entrySet()) {
            List<EClassifier> eClassifiers = entry.getValue();
            if (eClassifiers.size() > 1) {
                List<String> names = new  UniqueEList<String>();
                List<Object> objects = new  ArrayList<Object>();
                objects.add(ePackage);
                for (EClassifier eClassifier : eClassifiers) {
                    names.add(eClassifier.getName());
                    objects.add(eClassifier);
                }
                objects.add(EcorePackage.Literals.EPACKAGE__ECLASSIFIERS);
                if (names.size() == objects.size() - 2) {
                    diagnostics.add(createDiagnostic(Diagnostic.WARNING, DIAGNOSTIC_SOURCE, UNIQUE_CLASSIFIER_NAMES, "_UI_EPackageDissimilarClassifierNames_diagnostic", names.toArray(new Object[names.size()]), objects.toArray(new Object[objects.size()]), context));
                } else {
                    diagnostics.add(createDiagnostic(Diagnostic.ERROR, DIAGNOSTIC_SOURCE, UNIQUE_CLASSIFIER_NAMES, "_UI_EPackageUniqueClassifierNames_diagnostic", new Object[] { names.get(0) }, objects.toArray(new Object[objects.size()]), context));
                }
            }
        }
    }
    return result;
}
method: org.eclipse.emf.ecore.impl.ENamedElementImpl.getName()java.lang.String;1
public String getName() {
    return getNameGen();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_text(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_style_get_text(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_style_get_text(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.editor.AntEditor.getOutlinePage()org.eclipse.ant.internal.ui.editor.outline.AntEditorContentOutlinePage;1
private AntEditorContentOutlinePage getOutlinePage() {
    if (fOutlinePage == null) {
        fOutlinePage = new  AntEditorContentOutlinePage(AntModelCore.getDefault(), this);
        fOutlinePage.addPostSelectionChangedListener(fSelectionChangedListener);
        setOutlinePageInput();
    }
    return fOutlinePage;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.SingleFileTagSource.getLocation()org.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;1
public ICVSRepositoryLocation getLocation() {
    RepositoryManager mgr = CVSUIPlugin.getPlugin().getRepositoryManager();
    ICVSRepositoryLocation location = mgr.getRepositoryLocationFor(file);
    return location;
}
method: org.eclipse.team.internal.ccvs.ui.CVSUIPlugin.getRepositoryManager()org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager;1
public synchronized RepositoryManager getRepositoryManager() {
    if (repositoryManager == null) {
        repositoryManager = new  RepositoryManager();
        repositoryManager.startup();
    }
    return repositoryManager;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_editable_delete_text(JII)V3
public static final void gtk_editable_delete_text(long editable, int start_pos, int end_pos) {
    lock.lock();
    try {
        _gtk_editable_delete_text(editable, start_pos, end_pos);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.objectweb.asm.MethodVisitor.visitTryCatchBlock(org.objectweb.asm.Label;org.objectweb.asm.Label;org.objectweb.asm.Label;java.lang.String;)V5
public void visitTryCatchBlock(Label start, Label end, Label handler, String type) {
    if (mv != null) {
        mv.visitTryCatchBlock(start, end, handler, type);
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.TypeStructureBuilder$TypeNameFinderInConstructor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
@Override
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    super.visitFieldInsn(opcode, owner, name, desc);
}
method: org.objectweb.asm.MethodVisitor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    if (mv != null) {
        mv.visitFieldInsn(opcode, owner, name, desc);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.SyncInfoSetChangeSetCollector.remove(Aorg.eclipse.core.resources.IResource;)V2
protected void remove(IResource[] resources) {
    ChangeSet[] sets = getSets();
    for (int i = 0; i < sets.length; i++) {
        ChangeSet set = sets[i];
        set.remove(resources);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.doListSelected(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
protected void doListSelected(SelectionChangedEvent event) {
    updateButtonState();
    if (fListAdapter != null) {
        fListAdapter.selectionChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.consumeElidedLeftBraceAndReturn()V1
protected void consumeElidedLeftBraceAndReturn() {
    int stackLength = this.stateStackLengthStack.length;
    if (++this.valueLambdaNestDepth >= stackLength) {
        System.arraycopy(this.stateStackLengthStack, 0, this.stateStackLengthStack = new int[stackLength + 4], 0, stackLength);
    }
    this.stateStackLengthStack[this.valueLambdaNestDepth] = this.stateStackTop;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.consumeArguments()V1
protected void consumeArguments() {
    pushOnIntStack(this.rParenPos);
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnIntStack(I)V2
protected void pushOnIntStack(int pos) {
    int stackLength = this.intStack.length;
    if (++this.intPtr >= stackLength) {
        System.arraycopy(this.intStack, 0, this.intStack = new int[stackLength + StackIncrement], 0, stackLength);
    }
    this.intStack[this.intPtr] = pos;
}

---------------Library-------------------
method: org.eclipse.debug.ui.StringVariableSelectionDialog.createContents(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Control;2
@Override
protected Control createContents(Composite parent) {
    Control ctrl = super.createContents(parent);
    PlatformUI.getWorkbench().getHelpSystem().setHelp(ctrl, IDebugHelpContextIds.VARIABLE_SELECTION_DIALOG);
    return ctrl;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;3
protected String getTemplate(String name, ICompilationUnit parentCU) {
    return getTemplate(name, parentCU, 0);
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;I)java.lang.String;4
protected String getTemplate(String name, ICompilationUnit parentCU, int pos) {
    try {
        Template template = JavaPlugin.getDefault().getTemplateStore().findTemplate(name);
        if (template != null) {
            return JavaContext.evaluateTemplate(template, parentCU, pos);
        }
    } catch (CoreException e) {
        JavaPlugin.log(e);
    } catch (BadLocationException e) {
        JavaPlugin.log(e);
    } catch (TemplateException e) {
        JavaPlugin.log(e);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.compare.internal.CompareEditorInputNavigator.getNavigatables()Aorg.eclipse.compare.INavigatable;1
protected INavigatable[] getNavigatables() {
    List result = new  ArrayList();
    Object[] panes = getPanes();
    for (int i = 0; i < panes.length; i++) {
        Object pane = panes[i];
        INavigatable navigator = getNavigator(pane);
        if (navigator != null)
            result.add(navigator);
    }
    return (INavigatable[]) result.toArray(new INavigatable[result.size()]);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getKnownRepositoryRoots()Aorg.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;1
public RepositoryRoot[] getKnownRepositoryRoots() {
    return getRepositoryRoots(getKnownRepositoryLocations());
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getRepositoryRoots(Aorg.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;)Aorg.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;2
private RepositoryRoot[] getRepositoryRoots(ICVSRepositoryLocation[] locations) {
    List roots = new  ArrayList();
    for (int i = 0; i < locations.length; i++) {
        ICVSRepositoryLocation location = locations[i];
        RepositoryRoot root = getRepositoryRootFor(location);
        if (root != null)
            roots.add(root);
    }
    return (RepositoryRoot[]) roots.toArray(new RepositoryRoot[roots.size()]);
}

---------------Library-------------------
method: org.eclipse.jface.text.link.LinkedModeModel.isChanging()Z1
private boolean isChanging() {
    return fIsChanging || fParentEnvironment != null && fParentEnvironment.isChanging();
}
---------------Client-------------------
method: org.eclipse.help.internal.browser.BrowserManager.isAlwaysUseExternal()Z1
public boolean isAlwaysUseExternal() {
    if (!isEmbeddedBrowserPresent()) {
        return true;
    }
    return alwaysUseExternal;
}
method: org.eclipse.help.internal.browser.BrowserManager.isEmbeddedBrowserPresent()Z1
public boolean isEmbeddedBrowserPresent() {
    if (!initialized) {
        init();
    }
    return internalBrowserDesc != null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.FormatterProfileStore.readProfiles(org.eclipse.core.runtime.preferences.IScopeContext;)java.util.List;2
@Override
public List<Profile> readProfiles(IScopeContext scope) throws CoreException {
    List<Profile> profiles = super.readProfiles(scope);
    if (profiles == null) {
        profiles = readOldForCompatibility(scope);
    }
    return profiles;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.ui.internal.NavigationHistory.updateActions()V1
private void updateActions() {
    if (backwardAction != null) {
        backwardAction.update();
    }
    if (forwardAction != null) {
        forwardAction.update();
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.CheckboxTreeAndListGroup.ungrayCheckHierarchy(java.lang.Object;)V2
protected void ungrayCheckHierarchy(Object treeElement) {
    if (!determineShouldBeAtLeastGrayChecked(treeElement))
        fCheckedStateStore.remove(treeElement);
    Object parent = fTreeContentProvider.getParent(treeElement);
    if (parent != null)
        ungrayCheckHierarchy(parent);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.addDateTag(org.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;org.eclipse.team.internal.ccvs.core.CVSTag;)V3
public void addDateTag(ICVSRepositoryLocation location, CVSTag tag) {
    if (tag == null)
        return;
    RepositoryRoot root = getRepositoryRootFor(location);
    root.addDateTag(tag);
    broadcastRepositoryChange(root);
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot.addDateTag(org.eclipse.team.internal.ccvs.core.CVSTag;)V2
public void addDateTag(CVSTag tag) {
    if (!dateTags.contains(tag)) {
        dateTags.add(tag);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.actions.DefaultSynchronizePageActions.updateActionBars()V1
public void updateActionBars() {
    if (openWithActions != null)
        openWithActions.updateActionBars();
    if (refactorActions != null)
        refactorActions.updateActionBars();
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.views.dependencies.DependenciesViewPage.setSelection(org.eclipse.jface.viewers.IStructuredSelection;)V2
protected void setSelection(IStructuredSelection selection) {
    if (selection != null && !selection.isEmpty())
        fViewer.setSelection(selection, true);
}
---------------Client-------------------
method: org.eclipse.core.internal.databinding.beans.BeanSetPropertyDecorator.doUpdateSet(java.lang.Object;org.eclipse.core.databinding.observable.set.SetDiff;)V3
protected void doUpdateSet(Object source, SetDiff diff) {
    delegate.updateSet(source, diff);
}
method: org.eclipse.core.databinding.property.set.SetProperty.updateSet(java.lang.Object;org.eclipse.core.databinding.observable.set.SetDiff;)V3
public final void updateSet(Object source, SetDiff diff) {
    if (source != null && !diff.isEmpty()) {
        doUpdateSet(source, diff);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.Policy.getDebugOption(java.lang.String;)Z1
private static boolean getDebugOption(String option) {
    return "true".equalsIgnoreCase(Platform.getDebugOption(IDEWorkbenchPlugin.IDE_WORKBENCH + option));
}
---------------Client-------------------
method: org.apache.batik.util.gui.CSSMediaPanel.showDialog(java.awt.Component;java.lang.String;)I2
public static int showDialog(Component parent, String title) {
    return showDialog(parent, title, "");
}
method: org.apache.batik.util.gui.CSSMediaPanel.showDialog(java.awt.Component;java.lang.String;java.lang.String;)I3
public static int showDialog(Component parent, String title, String media) {
    Dialog dialog = new  Dialog(parent, title, media);
    dialog.setModal(true);
    dialog.pack();
    dialog.setVisible(true);
    return dialog.getReturnCode();
}

---------------Library-------------------
method: org.eclipse.ui.internal.wizards.preferences.WizardPreferencesPage.handleEvent(org.eclipse.swt.widgets.Event;)V2
@Override
public void handleEvent(Event e) {
    Widget source = e.widget;
    if (source == destinationBrowseButton) {
        handleDestinationBrowseButtonPressed();
    }
    updatePageCompletion();
}
---------------Client-------------------
method: org.eclipse.compare.internal.CompareEditorSelectionProvider$InternalListener.selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void selectionChanged(SelectionChangedEvent event) {
    doSelectionChanged(event);
}
method: org.eclipse.compare.internal.CompareEditorSelectionProvider.doSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
final void doSelectionChanged(SelectionChangedEvent event) {
    ISelectionProvider provider = event.getSelectionProvider();
    if (provider == fViewerInFocus) {
        fireSelectionChanged();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.ExportWizard.addPages()V1
@Override
public void addPages() {
    addPage(new  SelectionPage(this.theWorkbench, this.selection, getAvailableExportWizards(), WorkbenchMessages.ExportWizard_selectDestination));
}
---------------Client-------------------
method: org.eclipse.ui.progress.DeferredTreeContentManager$5.add(Ajava.lang.Object;org.eclipse.core.runtime.IProgressMonitor;)V3
@Override
public void add(Object[] elements, IProgressMonitor monitor) {
    addChildren(parent, elements, monitor);
}
method: org.eclipse.ui.progress.DeferredTreeContentManager.addChildren(java.lang.Object;Ajava.lang.Object;org.eclipse.core.runtime.IProgressMonitor;)V4
protected void addChildren(final Object parent, final Object[] children, IProgressMonitor monitor) {
    WorkbenchJob updateJob = new  WorkbenchJob(ProgressMessages.DeferredTreeContentManager_AddingChildren) {

        @Override
        public IStatus runInUIThread(IProgressMonitor updateMonitor) {
            if (treeViewer.getControl().isDisposed() || updateMonitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            }
            treeViewer.add(parent, children);
            return Status.OK_STATUS;
        }
    };
    updateJob.setSystem(true);
    updateJob.schedule();
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.RenameDialog.setOldName(java.lang.String;)V2
public void setOldName(String oldName) {
    this.oldName = oldName;
    addOldName(oldName);
    if (text != null)
        text.setText(oldName);
    this.newName = oldName;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.parts.FormBrowser.setText(java.lang.String;)V2
public void setText(String text) {
    this.text = text;
    if (formText != null)
        formText.setText(text);
}
method: org.eclipse.ui.forms.widgets.ScrolledFormText.setText(java.lang.String;)V2
public void setText(String text) {
    this.text = text;
    loadText(text);
    reflow(true);
}

---------------Library-------------------
method: org.eclipse.ltk.internal.core.refactoring.Changes.asCoreException(org.eclipse.jface.text.BadLocationException;)org.eclipse.core.runtime.CoreException;1
public static CoreException asCoreException(BadLocationException e) {
    String message = e.getMessage();
    if (message == null)
        message = "BadLocationException";
    return new  CoreException(new  Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.BAD_LOCATION, message, e));
}
---------------Client-------------------
method: org.eclipse.e4.ui.internal.workbench.swt.ResourceUtility.imageDescriptorFromURI(org.eclipse.emf.common.util.URI;)org.eclipse.jface.resource.ImageDescriptor;2
@Override
public ImageDescriptor imageDescriptorFromURI(URI iconPath) {
    try {
        return ImageDescriptor.createFromURL(new  URL(iconPath.toString()));
    } catch (MalformedURLException e) {
        System.err.println("iconURI \"" + iconPath.toString() + "\" is invalid, no image will be shown");
        return null;
    }
}
method: org.eclipse.jface.resource.ImageDescriptor.createFromURL(java.net.URL;)org.eclipse.jface.resource.ImageDescriptor;1
public static ImageDescriptor createFromURL(URL url) {
    if (url == null) {
        return getMissingImageDescriptor();
    }
    return new  URLImageDescriptor(url);
}

---------------Library-------------------
method: org.eclipse.swt.custom.SashForm.setToolTipText(java.lang.String;)V2
@Override
public void setToolTipText(String string) {
    super.setToolTipText(string);
    for (int i = 0; i < sashes.length; i++) {
        sashes[i].setToolTipText(string);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.core.subscribers.SyncSetInputFromSyncSet.remove(Aorg.eclipse.core.resources.IResource;)V2
private void remove(IResource[] resources) {
    for (int i = 0; i < resources.length; i++) {
        remove(resources[i]);
    }
}
method: org.eclipse.team.internal.core.subscribers.SyncSetInput.remove(org.eclipse.core.resources.IResource;)V2
protected void remove(IResource resource) {
    SyncInfo oldInfo = syncSet.getSyncInfo(resource);
    if (oldInfo != null) {
        syncSet.remove(resource);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.createProvider(org.eclipse.team.internal.core.subscribers.ChangeSet;org.eclipse.team.core.synchronize.SyncInfoTree;)org.eclipse.team.internal.ui.synchronize.ISynchronizeModelProvider;3
private ISynchronizeModelProvider createProvider(ChangeSet set, SyncInfoTree tree) {
    ChangeSetDiffNode node = new  ChangeSetDiffNode(getModelRoot(), set);
    addToViewer(node);
    return createProviderRootedAt(node, tree);
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.core.impl.engine.AbstractCSSEngine.parseStyleDeclaration(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSStyleDeclaration;2
@Override
public CSSStyleDeclaration parseStyleDeclaration(InputSource source) throws IOException {
    checkInputSource(source);
    CSSParser parser = makeCSSParser();
    CSSStyleDeclaration styleDeclaration = parser.parseStyleDeclaration(source);
    return styleDeclaration;
}
method: org.eclipse.e4.ui.css.core.impl.dom.parsers.AbstractCSSParser.parseStyleDeclaration(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSStyleDeclaration;2
@Override
public CSSStyleDeclaration parseStyleDeclaration(InputSource source) throws IOException {
    CSSStyleDeclarationImpl styleDeclaration = new  CSSStyleDeclarationImpl(null);
    parseStyleDeclaration(((styleDeclaration)), source);
    return styleDeclaration;
}

---------------Library-------------------
method: org.eclipse.jface.text.TextViewer.addTextInputListener(org.eclipse.jface.text.ITextInputListener;)V2
public void addTextInputListener(ITextInputListener listener) {
    Assert.isNotNull(listener);
    if (fTextInputListeners == null)
        fTextInputListeners = new  ArrayList();
    if (!fTextInputListeners.contains(listener))
        fTextInputListeners.add(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.progress.WorkbenchSiteProgressService.warnOfContentChange()V1
@Override
public void warnOfContentChange() {
    MPart part = site.getModel();
    if (!part.getTags().contains(CSSConstants.CSS_CONTENT_CHANGE_CLASS)) {
        part.getTags().add(CSSConstants.CSS_CONTENT_CHANGE_CLASS);
    }
}
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.getTags()java.util.List;1
public List<String> getTags() {
    if (tags == null) {
        tags = new  EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION_ELEMENT__TAGS);
    }
    return tags;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.hierarchy.ChangeCollector.hasVisibilityChange(org.eclipse.jdt.core.IType;)Z2
private boolean hasVisibilityChange(IType type) throws JavaModelException {
    int existingFlags = this.hierarchy.getCachedFlags(type);
    int newFlags = type.getFlags();
    return existingFlags != newFlags;
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.builders.BundleErrorReporter.isCheckDeprecated()Z1
protected boolean isCheckDeprecated() {
    return CompilerFlags.getFlag(fProject, CompilerFlags.P_DEPRECATED) != CompilerFlags.IGNORE;
}
method: org.eclipse.pde.internal.core.builders.CompilerFlags.getFlag(org.eclipse.core.resources.IProject;java.lang.String;)I2
public static int getFlag(IProject project, String flagId) {
    try {
        return Integer.parseInt(getString(project, flagId));
    } catch (NumberFormatException nfe) {
        return 0;
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.AsynchronousViewer.handleSelect(org.eclipse.swt.events.SelectionEvent;)V2
@Override
protected void handleSelect(SelectionEvent event) {
    Control control = getControl();
    if (control != null && !control.isDisposed()) {
        updateSelection(newSelectionFromWidget());
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageEditorPart.setFocus()V1
@Override
public void setFocus() {
    setFocus(getActivePage());
}
method: org.eclipse.ui.part.MultiPageEditorPart.getActivePage()I1
public int getActivePage() {
    CTabFolder tabFolder = getTabFolder();
    if (tabFolder != null && !tabFolder.isDisposed()) {
        return tabFolder.getSelectionIndex();
    }
    return -1;
}

---------------Library-------------------
method: org.eclipse.ui.internal.navigator.TextActionHandler.updateActionsEnableState()V1
private void updateActionsEnableState() {
    textCutAction.updateEnabledState();
    textCopyAction.updateEnabledState();
    textPasteAction.updateEnabledState();
    textSelectAllAction.updateEnabledState();
    textDeleteAction.updateEnabledState();
}
---------------Client-------------------
method: org.eclipse.ui.internal.ide.dialogs.ProjectLinkedResourcePage.dispose()V1
public void dispose() {
    pathVariablesGroup.dispose();
    linkedResourceEditor.dispose();
    super.dispose();
}
method: org.eclipse.ui.internal.ide.dialogs.LinkedResourceEditor.dispose()V1
public void dispose() {
    fixedImg.dispose();
    brokenImg.dispose();
    absoluteImg.dispose();
}

---------------Library-------------------
method: org.eclipse.equinox.p2.engine.spi.Memento.remove(java.lang.String;)java.lang.Object;2
public Object remove(String key) {
    if (key == null)
        throw new  NullPointerException();
    return mementoMap.remove(key);
}
---------------Client-------------------
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findClass(java.lang.String;)java.lang.Class;2
public Class<?> findClass(String name) throws ClassNotFoundException {
    Class<?> result = findLocalClass(name);
    if (result == null)
        throw new  ClassNotFoundException(name);
    return result;
}
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findLocalClass(java.lang.String;)java.lang.Class;2
public Class<?> findLocalClass(String name) {
    try {
        return classLoader.loadClass(name);
    } catch (ClassNotFoundException e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.editor.text.AntStorageDocumentProvider.setupDocument(java.lang.Object;org.eclipse.jface.text.IDocument;)V3
@Override
protected void setupDocument(Object element, IDocument document) {
    if (document != null) {
        IDocumentPartitioner partitioner = createDocumentPartitioner();
        if (document instanceof IDocumentExtension3) {
            IDocumentExtension3 extension3 = (IDocumentExtension3) document;
            extension3.setDocumentPartitioner(AntDocumentSetupParticipant.ANT_PARTITIONING, partitioner);
        } else {
            document.setDocumentPartitioner(partitioner);
        }
        partitioner.connect(document);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.ui.text.JavaTextTools.setupJavaDocumentPartitioner(org.eclipse.jface.text.IDocument;)V2
public void setupJavaDocumentPartitioner(IDocument document) {
    setupJavaDocumentPartitioner(document, IDocumentExtension3.DEFAULT_PARTITIONING);
}
method: org.eclipse.jdt.ui.text.JavaTextTools.setupJavaDocumentPartitioner(org.eclipse.jface.text.IDocument;java.lang.String;)V3
public void setupJavaDocumentPartitioner(IDocument document, String partitioning) {
    IDocumentPartitioner partitioner = createDocumentPartitioner();
    if (document instanceof IDocumentExtension3) {
        IDocumentExtension3 extension3 = (IDocumentExtension3) document;
        extension3.setDocumentPartitioner(partitioning, partitioner);
    } else {
        document.setDocumentPartitioner(partitioner);
    }
    partitioner.connect(document);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.mappings.CheckedInChangeSetCollector.remove(Aorg.eclipse.core.runtime.IPath;)V2
protected void remove(IPath[] paths) {
    ChangeSet[] sets = getSets();
    for (int i = 0; i < sets.length; i++) {
        DiffChangeSet set = (DiffChangeSet) sets[i];
        set.remove(paths);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.testEnded(org.eclipse.jdt.internal.junit.model.TestCaseElement;)V2
public void testEnded(TestCaseElement testCaseElement) {
    fireTestCaseFinished(testCaseElement);
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireTestCaseFinished(org.eclipse.jdt.junit.model.ITestCaseElement;)V2
private void fireTestCaseFinished(ITestCaseElement testCaseElement) {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).testCaseFinished(testCaseElement);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.views.dependencies.OpenDependenciesAction.execute(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;2
public Object execute(ExecutionEvent event) throws ExecutionException {
    ISelection selection = HandlerUtil.getCurrentSelection(event);
    if (selection instanceof IStructuredSelection) {
        IStructuredSelection ssel = (IStructuredSelection) selection;
        openDependencies(ssel.getFirstElement());
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.renderings.AsyncTableRenderingViewer.getKey(I)java.lang.Object;2
public Object getKey(int index) {
    AbstractVirtualContentTableModel model = getVirtualContentModel();
    if (model != null) {
        Object key = model.getKey(index);
        return key;
    }
    return null;
}
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingModel.getKey(I)java.lang.Object;2
@Override
public Object getKey(int idx) {
    Object elmt = getElement(idx);
    if (elmt instanceof MemorySegment) {
        return ((MemorySegment) elmt).getAddress();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.util.ConstantPoolEntry2.reset()V1
public void reset() {
    super.reset();
    this.descriptorIndex = 0;
    this.referenceKind = 0;
    this.referenceIndex = 0;
    this.bootstrapMethodAttributeIndex = 0;
}
---------------Client-------------------
method: org.eclipse.jface.preference.ScaleFieldEditor.setDefaultValues()V1
private void setDefaultValues() {
    setValues(0, 10, 1, 1);
}
method: org.eclipse.jface.preference.ScaleFieldEditor.setValues(IIII)V5
private void setValues(int min, int max, int increment, int pageIncrement) {
    this.incrementValue = increment;
    this.maxValue = max;
    this.minValue = min;
    this.pageIncrementValue = pageIncrement;
    updateScale();
}

---------------Library-------------------
method: org.apache.lucene.index.TermInfosReader.get(org.apache.lucene.index.Term;)org.apache.lucene.index.TermInfo;2
TermInfo get(Term term) throws IOException {
    BytesRef termBytesRef = new  BytesRef(term.text);
    return get(term, false, termBytesRef);
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb$1.createDropDown(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
@Override
protected Control createDropDown(Composite dropDownParent, IBreadcrumbDropDownSite site, TreePath path) {
    return createDropDownControl(dropDownParent, site, path);
}
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb.createDropDownControl(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
public Control createDropDownControl(Composite parent, final IBreadcrumbDropDownSite site, TreePath paramPath) {
    TreeViewerDropDown dropDownTreeViewer = new  TreeViewerDropDown() {

        SubTreeModelViewer fDropDownViewer;

        @Override
        protected TreeViewer createTreeViewer(Composite composite, int style, final TreePath path) {
            fDropDownViewer = new  SubTreeModelViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.VIRTUAL | SWT.POP_UP, fTreeViewer.getPresentationContext());
            Object launchViewInput = fTreeViewer.getInput();
            fDropDownViewer.setInput(launchViewInput, path.getParentPath());
            ViewerFilter[] filters = fTreeViewer.getFilters();
            fDropDownViewer.setFilters(filters);
            ModelDelta stateDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
            fTreeViewer.saveElementState(TreePath.EMPTY, stateDelta, IModelDelta.EXPAND | IModelDelta.SELECT);
            if (!fView.getBreadcrumbDropDownAutoExpand()) {
                final ModelDelta prunedDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
                stateDelta.accept(new  IModelDeltaVisitor() {

                    ModelDelta copy = prunedDelta;

                    @Override
                    public boolean visit(IModelDelta delta, int depth) {
                        TreePath deltaPath = getViewerTreePath(delta);
                        if (deltaPath.getSegmentCount() == 0) {
                            copy.setChildCount(delta.getChildCount());
                        } else if (deltaPath.getSegmentCount() != 0 && path.startsWith(deltaPath, null)) {
                            copy = copy.addNode(delta.getElement(), delta.getIndex(), delta.getFlags(), delta.getChildCount());
                        }
                        if (deltaPath.equals(path)) {
                            copy.setFlags(IModelDelta.SELECT | IModelDelta.REVEAL);
                            return false;
                        }
                        return true;
                    }

                    private TreePath getViewerTreePath(IModelDelta node) {
                        ArrayList<Object> list = new  ArrayList<Object>();
                        IModelDelta parentDelta = node.getParentDelta();
                        while (parentDelta != null) {
                            list.add(0, node.getElement());
                            node = parentDelta;
                            parentDelta = node.getParentDelta();
                        }
                        return new  TreePath(list.toArray());
                    }
                });
                stateDelta = prunedDelta;
            }
            fDropDownViewer.updateViewer(stateDelta);
            fDropDownViewer.addLabelUpdateListener(new  ILabelUpdateListener() {

                @Override
                public void labelUpdateComplete(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesBegin() {
                }

                @Override
                public void labelUpdateStarted(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesComplete() {
                    new  UIJob(fViewer.getControl().getDisplay(), "resize breadcrub dropdown") {

                        {
                            setSystem(true);
                        }

                        @Override
                        public IStatus runInUIThread(IProgressMonitor monitor) {
                            site.updateSize();
                            return Status.OK_STATUS;
                        }
                    }.schedule();
                }
            });
            return fDropDownViewer;
        }

        @Override
        protected void openElement(ISelection selection) {
            if (fTreeViewer.getControl().isDisposed()) {
                return;
            }
            if (selection != null && (selection instanceof ITreeSelection) && !selection.isEmpty()) {
                TreeModelContentProvider contentProvider = (TreeModelContentProvider) fTreeViewer.getContentProvider();
                TreePath path = TreePath.EMPTY;
                int count = fTreeViewer.getChildCount(path);
                count = contentProvider.viewToModelCount(path, count);
                ModelDelta rootDelta = new  ModelDelta(fTreeViewer.getInput(), -1, IModelDelta.NO_CHANGE, count);
                TreePath rootPath = fDropDownViewer.getRootPath();
                ModelDelta delta = rootDelta;
                for (int i = 0; i < rootPath.getSegmentCount(); i++) {
                    Object element = rootPath.getSegment(i);
                    int index = fTreeViewer.findElementIndex(path, element);
                    index = contentProvider.viewToModelIndex(path, index);
                    path = path.createChildPath(element);
                    count = fTreeViewer.getChildCount(path);
                    count = contentProvider.viewToModelCount(path, count);
                    delta = delta.addNode(rootPath.getSegment(i), index, IModelDelta.NO_CHANGE, count);
                }
                fDropDownViewer.saveElementState(TreePath.EMPTY, delta, IModelDelta.EXPAND | IModelDelta.SELECT);
                rootDelta.accept(new  IModelDeltaVisitor() {

                    @Override
                    public boolean visit(IModelDelta paramDelta, int depth) {
                        if ((paramDelta.getFlags() & IModelDelta.SELECT) != 0) {
                            ((ModelDelta) paramDelta).setFlags(paramDelta.getFlags() | IModelDelta.FORCE);
                        }
                        return true;
                    }
                });
                if (fView.getBreadcrumbDropDownAutoExpand()) {
                    fTreeViewer.collapseToLevel(rootPath, AbstractTreeViewer.ALL_LEVELS);
                }
                fTreeViewer.updateViewer(rootDelta);
                fViewer.setSelection(StructuredSelection.EMPTY);
                site.close();
            }
            super.openElement(selection);
        }
    };
    return dropDownTreeViewer.createDropDown(parent, site, paramPath);
}

---------------Library-------------------
method: org.eclipse.jface.viewers.AbstractTreeViewer.getVisibleExpandedElements()Ajava.lang.Object;1
public Object[] getVisibleExpandedElements() {
    ArrayList v = new  ArrayList();
    internalCollectVisibleExpanded(v, getControl());
    return v.toArray();
}
---------------Client-------------------
method: org.eclipse.core.databinding.property.list.ListProperty.observeDetail(org.eclipse.core.databinding.observable.value.IObservableValue;)org.eclipse.core.databinding.observable.list.IObservableList;2
public IObservableList observeDetail(IObservableValue master) {
    return MasterDetailObservables.detailList(master, listFactory(master.getRealm()), getElementType());
}
method: org.eclipse.core.databinding.property.list.ListProperty.listFactory(org.eclipse.core.databinding.observable.Realm;)org.eclipse.core.databinding.observable.masterdetail.IObservableFactory;2
public IObservableFactory listFactory(final Realm realm) {
    return new  IObservableFactory() {

        public IObservable createObservable(Object target) {
            return observe(realm, target);
        }
    };
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.callhierarchy.CallHierarchyFiltersActionGroup.fillViewMenu(org.eclipse.jface.action.IMenuManager;)V2
private void fillViewMenu(IMenuManager viewMenu) {
    viewMenu.add(new  Separator("filters"));
    viewMenu.add(new  ShowFilterDialogAction());
    viewMenu.add(new  ShowExpandWithConstructorsDialogAction());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.launchConfigurations.SelectLaunchersDialog.addViewerListeners(org.eclipse.jface.viewers.StructuredViewer;)V2
@Override
protected void addViewerListeners(StructuredViewer viewer) {
    viewer.addSelectionChangedListener(new  ISelectionChangedListener() {

        @Override
        public void selectionChanged(SelectionChangedEvent event) {
            IStructuredSelection ss = (IStructuredSelection) event.getSelection();
            if (ss != null && !ss.isEmpty()) {
                SelectLaunchersDialog.this.description.setText(((ILaunchDelegate) ss.getFirstElement()).getDescription());
            } else {
                SelectLaunchersDialog.this.description.setText(IInternalDebugCoreConstants.EMPTY_STRING);
            }
        }
    });
    super.addViewerListeners(viewer);
}
method: org.eclipse.debug.internal.ui.AbstractDebugListSelectionDialog.addViewerListeners(org.eclipse.jface.viewers.StructuredViewer;)V2
@Override
protected void addViewerListeners(StructuredViewer viewer) {
    viewer.addSelectionChangedListener(new  ISelectionChangedListener() {

        @Override
        public void selectionChanged(SelectionChangedEvent event) {
            getButton(IDialogConstants.OK_ID).setEnabled(isValid());
        }
    });
    viewer.addDoubleClickListener(new  IDoubleClickListener() {

        @Override
        public void doubleClick(DoubleClickEvent event) {
            if (isValid()) {
                okPressed();
            }
        }
    });
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.model.MetadataRepositoryElement.getQueryable()org.eclipse.equinox.p2.query.IQueryable;1
public IQueryable<?> getQueryable() {
    if (queryable == null)
        queryable = getRepository(new  NullProgressMonitor());
    return queryable;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagConfigurationDialog.getStandardButtonData(org.eclipse.swt.widgets.Button;)org.eclipse.swt.layout.GridData;2
private GridData getStandardButtonData(Button button) {
    GridData data = new  GridData();
    data.heightHint = convertVerticalDLUsToPixels(IDialogConstants.BUTTON_HEIGHT);
    return data;
}
method: org.eclipse.jface.dialogs.Dialog.convertVerticalDLUsToPixels(I)I2
protected int convertVerticalDLUsToPixels(int dlus) {
    if (fontMetrics == null) {
        return 0;
    }
    return convertVerticalDLUsToPixels(fontMetrics, dlus);
}

---------------Library-------------------
method: org.eclipse.debug.ui.actions.RulerBreakpointTypesActionDelegate.getMenu(org.eclipse.swt.widgets.Menu;)org.eclipse.swt.widgets.Menu;2
@Override
public Menu getMenu(Menu parent) {
    setMenu(new  Menu(parent));
    fillMenu(fMenu);
    initMenu();
    return fMenu;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.GenerateHashCodeEqualsOperation.getReturnFalse()org.eclipse.jdt.core.dom.ReturnStatement;1
private ReturnStatement getReturnFalse() {
    ReturnStatement falseReturn = fAst.newReturnStatement();
    falseReturn.setExpression(fAst.newBooleanLiteral(false));
    return falseReturn;
}
method: org.eclipse.jdt.core.dom.AST.newBooleanLiteral(Z)org.eclipse.jdt.core.dom.BooleanLiteral;2
public BooleanLiteral newBooleanLiteral(boolean value) {
    BooleanLiteral result = new  BooleanLiteral(this);
    result.setBooleanValue(value);
    return result;
}

---------------Library-------------------
method: org.eclipse.ui.internal.quickaccess.QuickAccessContents.getDialogSettings()org.eclipse.jface.dialogs.IDialogSettings;1
protected IDialogSettings getDialogSettings() {
    final IDialogSettings workbenchDialogSettings = WorkbenchPlugin.getDefault().getDialogSettings();
    IDialogSettings result = workbenchDialogSettings.getSection(getId());
    if (result == null) {
        result = workbenchDialogSettings.addNewSection(getId());
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.launcher.PluginStatusDialog.getDialogBoundsSettings()org.eclipse.jface.dialogs.IDialogSettings;1
protected IDialogSettings getDialogBoundsSettings() {
    return getDialogSettings();
}
method: org.eclipse.pde.internal.ui.launcher.PluginStatusDialog.getDialogSettings()org.eclipse.jface.dialogs.IDialogSettings;1
private IDialogSettings getDialogSettings() {
    IDialogSettings settings = PDEPlugin.getDefault().getDialogSettings();
    IDialogSettings section = settings.getSection(getDialogSectionName());
    if (section == null)
        section = settings.addNewSection(getDialogSectionName());
    return section;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.propertiesfileeditor.PropertiesFileEditor.configureToggleCommentAction()V1
private void configureToggleCommentAction() {
    IAction action = getAction(IJavaEditorActionDefinitionIds.TOGGLE_COMMENT);
    if (action instanceof ToggleCommentAction) {
        ISourceViewer sourceViewer = getSourceViewer();
        SourceViewerConfiguration configuration = getSourceViewerConfiguration();
        ((ToggleCommentAction) action).configure(sourceViewer, configuration);
    }
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.editor.AntEditor.doSetSelection(org.eclipse.jface.viewers.ISelection;)V2
@Override
protected void doSetSelection(ISelection selection) {
    super.doSetSelection(selection);
    synchronizeOutlinePage(true);
}
method: org.eclipse.ui.texteditor.AbstractTextEditor.doSetSelection(org.eclipse.jface.viewers.ISelection;)V2
protected void doSetSelection(ISelection selection) {
    if (selection instanceof ITextSelection) {
        ITextSelection textSelection = (ITextSelection) selection;
        selectAndReveal(textSelection.getOffset(), textSelection.getLength());
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.ProjectContentTypes.createMatcher(org.eclipse.core.internal.resources.Project;)org.eclipse.core.runtime.content.IContentTypeMatcher;2
private IContentTypeMatcher createMatcher(Project project) {
    ProjectContentTypeSelectionPolicy projectContentTypeSelectionPolicy = new  ProjectContentTypeSelectionPolicy(project);
    return Platform.getContentTypeManager().getMatcher(projectContentTypeSelectionPolicy, projectContentTypeSelectionPolicy);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.ManifestEditor.openWorkspacePlugin(org.eclipse.core.resources.IFile;)org.eclipse.ui.IEditorPart;1
private static IEditorPart openWorkspacePlugin(IFile pluginFile) {
    return openEditor(new  FileEditorInput(pluginFile));
}
method: org.eclipse.pde.internal.ui.editor.plugin.ManifestEditor.openEditor(org.eclipse.ui.IEditorInput;)org.eclipse.ui.IEditorPart;1
public static IEditorPart openEditor(IEditorInput input) {
    if (input != null) {
        try {
            return PDEPlugin.getActivePage().openEditor(input, IPDEUIConstants.MANIFEST_EDITOR_ID);
        } catch (PartInitException e) {
            PDEPlugin.logException(e);
        }
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.AbstractHyperlink.handleExit(org.eclipse.swt.widgets.Event;)V2
protected void handleExit(Event e) {
    armed = false;
    redraw();
    if (listeners == null)
        return;
    int size = listeners.size();
    HyperlinkEvent he = new  HyperlinkEvent(this, getHref(), getText(), e.stateMask);
    Object[] listenerList = listeners.getListeners();
    for (int i = 0; i < size; i++) {
        IHyperlinkListener listener = (IHyperlinkListener) listenerList[i];
        listener.linkExited(he);
    }
}
---------------Client-------------------
method: org.eclipse.ui.forms.widgets.ImageHyperlink.handleEnter(org.eclipse.swt.widgets.Event;)V2
protected void handleEnter(Event e) {
    state = HOVER;
    super.handleEnter(e);
}
method: org.eclipse.ui.forms.widgets.AbstractHyperlink.handleEnter(org.eclipse.swt.widgets.Event;)V2
protected void handleEnter(Event e) {
    redraw();
    if (listeners == null)
        return;
    int size = listeners.size();
    HyperlinkEvent he = new  HyperlinkEvent(this, getHref(), getText(), e.stateMask);
    Object[] listenerList = listeners.getListeners();
    for (int i = 0; i < size; i++) {
        IHyperlinkListener listener = (IHyperlinkListener) listenerList[i];
        listener.linkEntered(he);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.CommitWizard.getPart()org.eclipse.ui.IWorkbenchPart;1
private IWorkbenchPart getPart() {
    if (part != null)
        return part;
    return PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().getActivePart();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.compare.JavaHistoryActionImpl.getShell()org.eclipse.swt.widgets.Shell;1
final Shell getShell() {
    if (fEditor != null)
        return fEditor.getEditorSite().getShell();
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.NewInterfaceCreationWizard.addPages()V1
@Override
public void addPages() {
    super.addPages();
    if (fPage == null) {
        fPage = new  NewInterfaceWizardPage();
        fPage.init(getSelection());
    }
    addPage(fPage);
}
---------------Client-------------------
method: org.eclipse.ui.internal.decorators.DecoratorManager.update(java.lang.String;)V2
@Override
public void update(String decoratorId) {
    IBaseLabelProvider provider = getBaseLabelProvider(decoratorId);
    if (provider != null) {
        scheduler.clearResults();
        fireListeners(new  LabelProviderChangedEvent(provider));
    }
}
method: org.eclipse.ui.internal.decorators.DecorationScheduler.clearResults()V1
void clearResults() {
    if (clearJob == null) {
        clearJob = getClearJob();
    }
    clearJob.schedule();
}

---------------Library-------------------
method: org.eclipse.core.internal.watson.DefaultElementComparator.testEquality(java.lang.Object;java.lang.Object;)Z3
protected boolean testEquality(Object oldInfo, Object newInfo) {
    if (oldInfo == null && newInfo == null)
        return true;
    if (oldInfo == null || newInfo == null)
        return false;
    return oldInfo.equals(newInfo);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equals(org.eclipse.core.runtime.IPath;org.eclipse.core.runtime.IPath;)Z3
protected boolean equals(IPath path1, IPath path2) {
    return equalsOrNull(path1, path2);
}
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equalsOrNull(java.lang.Object;java.lang.Object;)Z3
private boolean equalsOrNull(Object o1, Object o2) {
    if (o1 == null) {
        return o2 == null;
    }
    if (o2 == null) {
        return false;
    }
    return o1.equals(o2);
}

---------------Library-------------------
method: org.eclipse.emf.ecore.resource.impl.ResourceFactoryRegistryImpl.getFactory(org.eclipse.emf.common.util.URI;java.lang.String;)org.eclipse.emf.ecore.resource.Resource$Factory;3
public Resource.Factory getFactory(URI uri, String contentType) {
    return convert(getFactory(uri, protocolToFactoryMap, extensionToFactoryMap, contentTypeIdentifierToFactoryMap, contentType, true));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.search.matching.PatternLocator.newDeclarationMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode;org.eclipse.jdt.core.IJavaElement;org.eclipse.jdt.internal.compiler.lookup.Binding;IILorg.eclipse.jdt.internal.core.search.matching.MatchLocator;)org.eclipse.jdt.core.search.SearchMatch;7
public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, int length, MatchLocator locator) {
    return locator.newDeclarationMatch(element, elementBinding, accuracy, reference.sourceStart, length);
}
method: org.eclipse.jdt.internal.core.search.matching.MatchLocator.newDeclarationMatch(org.eclipse.jdt.core.IJavaElement;org.eclipse.jdt.internal.compiler.lookup.Binding;III)org.eclipse.jdt.core.search.SearchMatch;6
public SearchMatch newDeclarationMatch(IJavaElement element, Binding binding, int accuracy, int offset, int length) {
    SearchParticipant participant = getParticipant();
    IResource resource = this.currentPossibleMatch.resource;
    return newDeclarationMatch(element, binding, accuracy, offset, length, participant, resource);
}

---------------Library-------------------
method: org.eclipse.jface.viewers.Viewer.handleHelpRequest(org.eclipse.swt.events.HelpEvent;)V2
protected void handleHelpRequest(HelpEvent event) {
    Object oldData = event.data;
    event.data = this;
    fireHelpRequested(event);
    event.data = oldData;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.LibraryVisibilitySection.refresh()V1
public void refresh() {
    update(fCurrentLibrary);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.details.CompCSEnclosingTextDetails.updateFields()V1
public void updateFields() {
    if (fDataTaskObject == null) {
        return;
    }
    boolean editable = isEditableElement();
    updateTabFolder();
    updateIntroductionViewer(editable);
    updateConclusionViewer(editable);
}
---------------Client-------------------
method: org.eclipse.ui.internal.handlers.SpyHandler.execute(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;2
@Override
public Object execute(ExecutionEvent event) {
    Shell shell = HandlerUtil.getActiveShell(event);
    if (shell != null) {
        Control control = shell.getDisplay().getFocusControl();
        if (control != null) {
            showTooltip(control);
        }
    }
    return null;
}
method: org.eclipse.swt.widgets.Widget.getDisplay()org.eclipse.swt.widgets.Display;1
public Display getDisplay() {
    Display display = this.display;
    if (display == null)
        error(SWT.ERROR_WIDGET_DISPOSED);
    return display;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnIntStack(I)V2
protected void pushOnIntStack(int pos) {
    int stackLength = this.intStack.length;
    if (++this.intPtr >= stackLength) {
        System.arraycopy(this.intStack, 0, this.intStack = new int[stackLength + StackIncrement], 0, stackLength);
    }
    this.intStack[this.intPtr] = pos;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.consumeEmptyTypeArguments()V1
protected void consumeEmptyTypeArguments() {
    pushOnGenericsLengthStack(0);
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnGenericsLengthStack(I)V2
protected void pushOnGenericsLengthStack(int pos) {
    int stackLength = this.genericsLengthStack.length;
    if (++this.genericsLengthPtr >= stackLength) {
        System.arraycopy(this.genericsLengthStack, 0, this.genericsLengthStack = new int[stackLength + GenericsStackIncrement], 0, stackLength);
    }
    this.genericsLengthStack[this.genericsLengthPtr] = pos;
}

---------------Library-------------------
method: org.eclipse.ui.internal.intro.impl.model.History.pushToHistory(java.lang.Object;)V2
private void pushToHistory(Object location) {
    history.add(new  HistoryObject(location));
    navigationLocation = getHistoryEndPosition();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.refactoring.JUnitRenameParticipant$ChangeList.addAttributeChange(org.eclipse.jdt.internal.junit.refactoring.LaunchConfigurationContainer;java.lang.String;java.lang.String;)V4
public void addAttributeChange(LaunchConfigurationContainer config, String attributeName, String newValue) {
    addChange(new  LaunchConfigSetAttributeChange(config, attributeName, newValue, shouldFlagWarnings()));
}
method: org.eclipse.jdt.internal.junit.refactoring.JUnitRenameParticipant$ChangeList.addChange(org.eclipse.ltk.core.refactoring.Change;)V2
public void addChange(Change change) {
    if (change != null) {
        fChanges.add(change);
        fShouldFlagWarnings = false;
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Map;java.lang.Class;java.lang.Class;ZZ)java.util.Map;5
public static final Map safeCopy(final Map map, final Class keyClass, final Class valueClass, final boolean allowNullKeys, final boolean allowNullValues) {
    if (map == null || keyClass == null || valueClass == null) {
        throw new  NullPointerException();
    }
    final Map copy = Collections.unmodifiableMap(new  HashMap(map));
    final Iterator iterator = copy.entrySet().iterator();
    while (iterator.hasNext()) {
        final Map.Entry entry = (Map.Entry) iterator.next();
        assertInstance(entry.getKey(), keyClass, allowNullKeys);
        assertInstance(entry.getValue(), valueClass, allowNullValues);
    }
    return map;
}
---------------Client-------------------
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.Map;java.lang.Class;java.lang.Class;)java.util.Map;3
public static Map safeCopy(Map map, Class keyClass, Class valueClass) {
    return safeCopy(map, keyClass, valueClass, false, false);
}
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.Map;java.lang.Class;java.lang.Class;ZZ)java.util.Map;5
public static Map safeCopy(Map map, Class keyClass, Class valueClass, boolean allowNullKeys, boolean allowNullValues) {
    if (map == null || keyClass == null || valueClass == null) {
        throw new  NullPointerException();
    }
    map = Collections.unmodifiableMap(new  HashMap(map));
    Iterator iterator = map.entrySet().iterator();
    while (iterator.hasNext()) {
        Map.Entry entry = (Map.Entry) iterator.next();
        assertInstance(entry.getKey(), keyClass, allowNullKeys);
        assertInstance(entry.getValue(), valueClass, allowNullValues);
    }
    return map;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.EEVMPage.setSelection(org.eclipse.jdt.launching.VMStandin;)V2
@Override
public void setSelection(VMStandin vm) {
    super.setSelection(vm);
    fVM = vm;
    setTitle(JREMessages.EEVMPage_6);
    setDescription(JREMessages.EEVMPage_7);
}
---------------Client-------------------
method: org.eclipse.jdt.core.dom.WildcardType.setBound(org.eclipse.jdt.core.dom.Type;Z)V3
public void setBound(Type type, boolean isUpperBound) {
    setBound(type);
    setUpperBound(isUpperBound);
}
method: org.eclipse.jdt.core.dom.WildcardType.setUpperBound(Z)V2
public void setUpperBound(boolean isUpperBound) {
    preValueChange(UPPER_BOUND_PROPERTY);
    this.isUpperBound = isUpperBound;
    postValueChange(UPPER_BOUND_PROPERTY);
}

---------------Library-------------------
method: org.eclipse.ui.internal.layout.TrimArea.getTrims()java.util.List;1
public List getTrims() {
    List trim = new  ArrayList(fTrim.size());
    Iterator d = fTrim.iterator();
    while (d.hasNext()) {
        TrimDescriptor desc = (TrimDescriptor) d.next();
        trim.add(desc.getTrim());
    }
    return trim;
}
---------------Client-------------------
method: org.eclipse.core.commands.CommandManager.getDefinedCommandIds()java.util.Set;1
public final Set getDefinedCommandIds() {
    return getDefinedHandleObjectIds();
}
method: org.eclipse.core.commands.common.HandleObjectManager.getDefinedHandleObjectIds()java.util.Set;1
protected final Set getDefinedHandleObjectIds() {
    final HashSet definedHandleObjectIds = new  HashSet(definedHandleObjects.size());
    final Iterator handleObjectItr = definedHandleObjects.iterator();
    while (handleObjectItr.hasNext()) {
        final HandleObject handleObject = (HandleObject) handleObjectItr.next();
        final String id = handleObject.getId();
        definedHandleObjectIds.add(id);
    }
    return definedHandleObjectIds;
}

---------------Library-------------------
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.setContributorURI(java.lang.String;)V2
public void setContributorURI(String newContributorURI) {
    String oldContributorURI = contributorURI;
    contributorURI = (newContributorURI == null) ? null : newContributorURI.intern();
    if (eNotificationRequired())
        eNotify(new  ENotificationImpl(this, Notification.SET, ApplicationPackageImpl.APPLICATION_ELEMENT__CONTRIBUTOR_URI, oldContributorURI, contributorURI));
}
---------------Client-------------------
method: org.eclipse.emf.ecore.impl.EAnnotationImpl.setSource(java.lang.String;)V2
public void setSource(String newSource) {
    setSourceGen(newSource == null ? null : newSource.intern());
}
method: org.eclipse.emf.ecore.impl.EAnnotationImpl.setSourceGen(java.lang.String;)V2
public void setSourceGen(String newSource) {
    String oldSource = source;
    source = newSource;
    if (eNotificationRequired())
        eNotify(new  ENotificationImpl(this, Notification.SET, EcorePackage.EANNOTATION__SOURCE, oldSource, source));
}

---------------Library-------------------
method: org.eclipse.jface.dialogs.InputDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (title != null) {
        shell.setText(title);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage.createNumberPref(org.eclipse.swt.widgets.Composite;ILjava.lang.String;java.lang.String;II)org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage$NumberPreference;7
protected NumberPreference createNumberPref(Composite composite, int numColumns, String name, String key, int minValue, int maxValue) {
    final NumberPreference pref = new  NumberPreference(composite, numColumns, fWorkingValues, key, minValue, maxValue, name);
    fDefaultFocusManager.add(pref);
    pref.addObserver(fUpdater);
    return pref;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.ControlStatementsTabPage.createOption(org.eclipse.swt.widgets.Composite;ILjava.lang.String;java.lang.String;Ajava.lang.String;)org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage$CheckboxPreference;6
private CheckboxPreference createOption(Composite composite, int span, String name, String key, String[] values) {
    return createCheckboxPref(composite, span, name, key, values);
}
method: org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage.createCheckboxPref(org.eclipse.swt.widgets.Composite;ILjava.lang.String;java.lang.String;Ajava.lang.String;)org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage$CheckboxPreference;6
protected CheckboxPreference createCheckboxPref(Composite composite, int numColumns, String name, String key, String[] values) {
    final CheckboxPreference pref = new  CheckboxPreference(composite, numColumns, fWorkingValues, key, values, name);
    fDefaultFocusManager.add(pref);
    pref.addObserver(fUpdater);
    return pref;
}

---------------Library-------------------
method: org.eclipse.core.internal.jobs.ImplicitJobs.notifyWaitingThreadJobs(org.eclipse.core.internal.jobs.InternalJob;)V2
void notifyWaitingThreadJobs(InternalJob job) {
    synchronized (job.jobStateLock) {
        job.jobStateLock.notifyAll();
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.security.storage.PasswordProviderSelector.added(Aorg.eclipse.core.runtime.IExtension;)V2
public void added(IExtension[] extensions) {
    clearCaches();
}
method: org.eclipse.equinox.internal.security.storage.PasswordProviderSelector.clearCaches()V1
public void clearCaches() {
    synchronized (modules) {
        modules.clear();
        SecurePreferencesMapper.clearPasswordCache();
    }
}

---------------Library-------------------
method: org.eclipse.osgi.internal.resolver.StateBuilder.createRequiredBundles(Aorg.eclipse.osgi.util.ManifestElement;)Aorg.eclipse.osgi.service.resolver.BundleSpecification;1
private static BundleSpecification[] createRequiredBundles(ManifestElement[] specs) {
    if (specs == null)
        return null;
    BundleSpecification[] result = new BundleSpecification[specs.length];
    for (int i = 0; i < specs.length; i++) result[i] = createRequiredBundle(specs[i]);
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.codegen.ConstantPool.initialize(org.eclipse.jdt.internal.compiler.ClassFile;)V2
public void initialize(ClassFile givenClassFile) {
    this.poolContent = givenClassFile.header;
    this.currentOffset = givenClassFile.headerOffset;
    this.currentIndex = 1;
    this.classFile = givenClassFile;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.goForCompilationUnit()V1
public void goForCompilationUnit() {
    super.goForCompilationUnit();
    this.isFirst = true;
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.goForCompilationUnit()V1
public void goForCompilationUnit() {
    this.firstToken = TokenNamePLUS_PLUS;
    this.scanner.foundTaskCount = 0;
    this.scanner.recordLineSeparator = true;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.PDEFormPage.createUISectionContainer(org.eclipse.swt.widgets.Composite;I)org.eclipse.swt.widgets.Composite;3
public Composite createUISectionContainer(Composite parent, int columns) {
    Composite container = getManagedForm().getToolkit().createComposite(parent);
    container.setLayout(FormLayoutFactory.createSectionClientGridLayout(false, columns));
    return container;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.refactoring.reorg.RenameCuWizard.validateNewName(java.lang.String;)org.eclipse.ltk.core.refactoring.RefactoringStatus;2
@Override
protected RefactoringStatus validateNewName(String newName) {
    String fullName = JavaModelUtil.getRenamedCUName(getCompilationUnit(), newName);
    return super.validateNewName(fullName);
}
method: org.eclipse.jdt.internal.ui.refactoring.reorg.RenameRefactoringWizard.validateNewName(java.lang.String;)org.eclipse.ltk.core.refactoring.RefactoringStatus;2
protected RefactoringStatus validateNewName(String newName) {
    INameUpdating ref = getNameUpdating();
    ref.setNewElementName(newName);
    try {
        return ref.checkNewElementName(newName);
    } catch (CoreException e) {
        JavaPlugin.log(e);
        return RefactoringStatus.createFatalErrorStatus(RefactoringMessages.RenameRefactoringWizard_internal_error);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage.createComboPref(org.eclipse.swt.widgets.Composite;ILjava.lang.String;java.lang.String;Ajava.lang.String;Ajava.lang.String;)org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage$ComboPreference;7
protected ComboPreference createComboPref(Composite composite, int numColumns, String name, String key, String[] values, String[] items) {
    final ComboPreference pref = new  ComboPreference(composite, numColumns, fWorkingValues, key, values, name, items);
    fDefaultFocusManager.add(pref);
    pref.addObserver(fUpdater);
    return pref;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.ControlStatementsTabPage.createOption(org.eclipse.swt.widgets.Composite;ILjava.lang.String;java.lang.String;Ajava.lang.String;)org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage$CheckboxPreference;6
private CheckboxPreference createOption(Composite composite, int span, String name, String key, String[] values) {
    return createCheckboxPref(composite, span, name, key, values);
}
method: org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage.createCheckboxPref(org.eclipse.swt.widgets.Composite;ILjava.lang.String;java.lang.String;Ajava.lang.String;)org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage$CheckboxPreference;6
protected CheckboxPreference createCheckboxPref(Composite composite, int numColumns, String name, String key, String[] values) {
    final CheckboxPreference pref = new  CheckboxPreference(composite, numColumns, fWorkingValues, key, values, name);
    fDefaultFocusManager.add(pref);
    pref.addObserver(fUpdater);
    return pref;
}

---------------Library-------------------
method: org.apache.lucene.search.function.FloatFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache;java.lang.String;org.apache.lucene.index.IndexReader;)org.apache.lucene.search.function.DocValues;4
@Override
public DocValues getCachedFieldValues(FieldCache cache, String field, IndexReader reader) throws IOException {
    final float[] arr = cache.getFloats(reader, field, parser);
    return new  DocValues() {

        @Override
        public float floatVal(int doc) {
            return arr[doc];
        }

        @Override
        public String toString(int doc) {
            return description() + '=' + arr[doc];
        }

        @Override
        Object getInnerArray() {
            return arr;
        }
    };
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb$1.createDropDown(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
@Override
protected Control createDropDown(Composite dropDownParent, IBreadcrumbDropDownSite site, TreePath path) {
    return createDropDownControl(dropDownParent, site, path);
}
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb.createDropDownControl(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
public Control createDropDownControl(Composite parent, final IBreadcrumbDropDownSite site, TreePath paramPath) {
    TreeViewerDropDown dropDownTreeViewer = new  TreeViewerDropDown() {

        SubTreeModelViewer fDropDownViewer;

        @Override
        protected TreeViewer createTreeViewer(Composite composite, int style, final TreePath path) {
            fDropDownViewer = new  SubTreeModelViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.VIRTUAL | SWT.POP_UP, fTreeViewer.getPresentationContext());
            Object launchViewInput = fTreeViewer.getInput();
            fDropDownViewer.setInput(launchViewInput, path.getParentPath());
            ViewerFilter[] filters = fTreeViewer.getFilters();
            fDropDownViewer.setFilters(filters);
            ModelDelta stateDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
            fTreeViewer.saveElementState(TreePath.EMPTY, stateDelta, IModelDelta.EXPAND | IModelDelta.SELECT);
            if (!fView.getBreadcrumbDropDownAutoExpand()) {
                final ModelDelta prunedDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
                stateDelta.accept(new  IModelDeltaVisitor() {

                    ModelDelta copy = prunedDelta;

                    @Override
                    public boolean visit(IModelDelta delta, int depth) {
                        TreePath deltaPath = getViewerTreePath(delta);
                        if (deltaPath.getSegmentCount() == 0) {
                            copy.setChildCount(delta.getChildCount());
                        } else if (deltaPath.getSegmentCount() != 0 && path.startsWith(deltaPath, null)) {
                            copy = copy.addNode(delta.getElement(), delta.getIndex(), delta.getFlags(), delta.getChildCount());
                        }
                        if (deltaPath.equals(path)) {
                            copy.setFlags(IModelDelta.SELECT | IModelDelta.REVEAL);
                            return false;
                        }
                        return true;
                    }

                    private TreePath getViewerTreePath(IModelDelta node) {
                        ArrayList<Object> list = new  ArrayList<Object>();
                        IModelDelta parentDelta = node.getParentDelta();
                        while (parentDelta != null) {
                            list.add(0, node.getElement());
                            node = parentDelta;
                            parentDelta = node.getParentDelta();
                        }
                        return new  TreePath(list.toArray());
                    }
                });
                stateDelta = prunedDelta;
            }
            fDropDownViewer.updateViewer(stateDelta);
            fDropDownViewer.addLabelUpdateListener(new  ILabelUpdateListener() {

                @Override
                public void labelUpdateComplete(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesBegin() {
                }

                @Override
                public void labelUpdateStarted(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesComplete() {
                    new  UIJob(fViewer.getControl().getDisplay(), "resize breadcrub dropdown") {

                        {
                            setSystem(true);
                        }

                        @Override
                        public IStatus runInUIThread(IProgressMonitor monitor) {
                            site.updateSize();
                            return Status.OK_STATUS;
                        }
                    }.schedule();
                }
            });
            return fDropDownViewer;
        }

        @Override
        protected void openElement(ISelection selection) {
            if (fTreeViewer.getControl().isDisposed()) {
                return;
            }
            if (selection != null && (selection instanceof ITreeSelection) && !selection.isEmpty()) {
                TreeModelContentProvider contentProvider = (TreeModelContentProvider) fTreeViewer.getContentProvider();
                TreePath path = TreePath.EMPTY;
                int count = fTreeViewer.getChildCount(path);
                count = contentProvider.viewToModelCount(path, count);
                ModelDelta rootDelta = new  ModelDelta(fTreeViewer.getInput(), -1, IModelDelta.NO_CHANGE, count);
                TreePath rootPath = fDropDownViewer.getRootPath();
                ModelDelta delta = rootDelta;
                for (int i = 0; i < rootPath.getSegmentCount(); i++) {
                    Object element = rootPath.getSegment(i);
                    int index = fTreeViewer.findElementIndex(path, element);
                    index = contentProvider.viewToModelIndex(path, index);
                    path = path.createChildPath(element);
                    count = fTreeViewer.getChildCount(path);
                    count = contentProvider.viewToModelCount(path, count);
                    delta = delta.addNode(rootPath.getSegment(i), index, IModelDelta.NO_CHANGE, count);
                }
                fDropDownViewer.saveElementState(TreePath.EMPTY, delta, IModelDelta.EXPAND | IModelDelta.SELECT);
                rootDelta.accept(new  IModelDeltaVisitor() {

                    @Override
                    public boolean visit(IModelDelta paramDelta, int depth) {
                        if ((paramDelta.getFlags() & IModelDelta.SELECT) != 0) {
                            ((ModelDelta) paramDelta).setFlags(paramDelta.getFlags() | IModelDelta.FORCE);
                        }
                        return true;
                    }
                });
                if (fView.getBreadcrumbDropDownAutoExpand()) {
                    fTreeViewer.collapseToLevel(rootPath, AbstractTreeViewer.ALL_LEVELS);
                }
                fTreeViewer.updateViewer(rootDelta);
                fViewer.setSelection(StructuredSelection.EMPTY);
                site.close();
            }
            super.openElement(selection);
        }
    };
    return dropDownTreeViewer.createDropDown(parent, site, paramPath);
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.ScrolledForm.setForeground(org.eclipse.swt.graphics.Color;)V2
public void setForeground(Color fg) {
    super.setForeground(fg);
    if (content != null) {
        content.setForeground(fg);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jface.preference.PreferenceDialog.close()Z1
@Override
public boolean close() {
    SafeRunnable runnable = new  SafeRunnable() {

        @Override
        public void run() throws Exception {
            List<IPreferenceNode> nodes = preferenceManager.getElements(PreferenceManager.PRE_ORDER);
            for (int i = 0; i < nodes.size(); i++) {
                IPreferenceNode node = nodes.get(i);
                node.disposeResources();
            }
        }

        @Override
        public void handleException(Throwable e) {
            super.handleException(e);
            clearSelectedNode();
        }
    };
    SafeRunner.run(runnable);
    return super.close();
}
---------------Client-------------------
method: org.eclipse.search.ui.text.AbstractTextSearchViewPage.showCurrentMatch(Z)Z2
private boolean showCurrentMatch(boolean activateEditor) {
    Match currentMatch = getCurrentMatch();
    if (currentMatch != null) {
        showMatch(currentMatch, activateEditor);
        return true;
    }
    return false;
}
method: org.eclipse.search.ui.text.AbstractTextSearchViewPage.showMatch(org.eclipse.search.ui.text.Match;Z)V3
private void showMatch(final Match match, final boolean activateEditor) {
    ISafeRunnable runnable = new  ISafeRunnable() {

        public void handleException(Throwable exception) {
            if (exception instanceof PartInitException) {
                PartInitException pie = (PartInitException) exception;
                ErrorDialog.openError(getSite().getShell(), SearchMessages.DefaultSearchViewPage_show_match, SearchMessages.DefaultSearchViewPage_error_no_editor, pie.getStatus());
            }
        }

        public void run() throws Exception {
            IRegion location = getCurrentMatchLocation(match);
            showMatch(match, location.getOffset(), location.getLength(), activateEditor);
        }
    };
    SafeRunner.run(runnable);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.ExpressionMethodReference;)Z2
@Override
public boolean visit(ExpressionMethodReference node) {
    evalQualifyingExpression(node.getExpression(), node.getName());
    doVisitChildren(node.typeArguments());
    return false;
}
---------------Client-------------------
method: org.eclipse.core.internal.localstore.FileSystemResourceManager.hasSavedContent(org.eclipse.core.resources.IProject;)Z2
public boolean hasSavedContent(IProject project) {
    return getStore(project).fetchInfo().exists();
}
method: org.eclipse.core.internal.localstore.FileSystemResourceManager.getStore(org.eclipse.core.resources.IResource;)org.eclipse.core.filesystem.IFileStore;2
public IFileStore getStore(IResource target) {
    try {
        return getStoreRoot(target).createStore(target.getFullPath(), target);
    } catch (CoreException e) {
        return EFS.getNullFileSystem().getStore(target.getFullPath());
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.callhierarchy.SearchScopeActionGroup.getWorkingSets(Ajava.lang.String;)Aorg.eclipse.ui.IWorkingSet;2
private IWorkingSet[] getWorkingSets(String[] workingSetNames) {
    if (workingSetNames == null) {
        return null;
    }
    Set<IWorkingSet> workingSets = new  HashSet<IWorkingSet>(2);
    for (int j = 0; j < workingSetNames.length; j++) {
        IWorkingSet workingSet = getWorkingSetManager().getWorkingSet(workingSetNames[j]);
        if (workingSet != null) {
            workingSets.add(workingSet);
        }
    }
    return workingSets.toArray(new IWorkingSet[workingSets.size()]);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getKnownRepositoryRoots()Aorg.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;1
public RepositoryRoot[] getKnownRepositoryRoots() {
    return getRepositoryRoots(getKnownRepositoryLocations());
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getRepositoryRoots(Aorg.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;)Aorg.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;2
private RepositoryRoot[] getRepositoryRoots(ICVSRepositoryLocation[] locations) {
    List roots = new  ArrayList();
    for (int i = 0; i < locations.length; i++) {
        ICVSRepositoryLocation location = locations[i];
        RepositoryRoot root = getRepositoryRootFor(location);
        if (root != null)
            roots.add(root);
    }
    return (RepositoryRoot[]) roots.toArray(new RepositoryRoot[roots.size()]);
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.views.imagebrowser.ImageBrowserView.disposeImages()V1
private void disposeImages() {
    for (Image image : displayedImages) {
        image.dispose();
    }
    displayedImages.clear();
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagContentAssistProcessor$1.widgetDisposed(org.eclipse.swt.events.DisposeEvent;)V2
public void widgetDisposed(DisposeEvent e) {
    tagContentAssistProcessor.dispose();
}
method: org.eclipse.team.internal.ccvs.ui.tags.TagContentAssistProcessor.dispose()V1
public void dispose() {
    for (Iterator iter = images.values().iterator(); iter.hasNext(); ) {
        Image image = (Image) iter.next();
        image.dispose();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.TypeMethodReference;)Z2
@Override
public boolean visit(TypeMethodReference node) {
    doVisitNode(node.getType());
    doVisitChildren(node.typeArguments());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_light(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_style_get_light(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_style_get_light(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.memory.SwitchMemoryBlockAction.getViewer()org.eclipse.jface.viewers.StructuredViewer;1
private StructuredViewer getViewer() {
    if (fView instanceof MemoryView) {
        MemoryView memView = (MemoryView) fView;
        IMemoryViewPane pane = memView.getViewPane(MemoryBlocksTreeViewPane.PANE_ID);
        if (pane instanceof MemoryBlocksTreeViewPane) {
            StructuredViewer viewer = ((MemoryBlocksTreeViewPane) pane).getViewer();
            return viewer;
        }
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.jface.text.DefaultTextHover.getAnnotationModel(org.eclipse.jface.text.source.ISourceViewer;)org.eclipse.jface.text.source.IAnnotationModel;2
private IAnnotationModel getAnnotationModel(ISourceViewer viewer) {
    if (viewer instanceof ISourceViewerExtension2) {
        ISourceViewerExtension2 extension = (ISourceViewerExtension2) viewer;
        return extension.getVisualAnnotationModel();
    }
    return viewer.getAnnotationModel();
}
method: org.eclipse.jface.text.source.SourceViewer.getAnnotationModel()org.eclipse.jface.text.source.IAnnotationModel;1
public IAnnotationModel getAnnotationModel() {
    if (fVisualAnnotationModel instanceof IAnnotationModelExtension) {
        IAnnotationModelExtension extension = (IAnnotationModelExtension) fVisualAnnotationModel;
        return extension.getAnnotationModel(MODEL_ANNOTATION_MODEL);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jface.util.Util.compare(java.lang.Comparable;java.lang.Comparable;)I2
public static final <T extends Comparable<? super T>> int compare(final T left, final T right) {
    if (left == null && right == null) {
        return 0;
    } else if (left == null) {
        return -1;
    } else if (right == null) {
        return 1;
    } else {
        return left.compareTo(right);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equals(org.eclipse.core.runtime.IPath;org.eclipse.core.runtime.IPath;)Z3
protected boolean equals(IPath path1, IPath path2) {
    return equalsOrNull(path1, path2);
}
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equalsOrNull(java.lang.Object;java.lang.Object;)Z3
private boolean equalsOrNull(Object o1, Object o2) {
    if (o1 == null) {
        return o2 == null;
    }
    if (o2 == null) {
        return false;
    }
    return o1.equals(o2);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.JavaMoveProcessor.getCommonParentForInputElements()java.lang.Object;1
public Object getCommonParentForInputElements() {
    return new  ParentChecker(fMovePolicy.getResources(), fMovePolicy.getJavaElements()).getCommonParent();
}
---------------Client-------------------
method: org.eclipse.core.internal.databinding.observable.masterdetail.MapDetailValueObservableMap$EntrySet.iterator()java.util.Iterator;1
public Iterator iterator() {
    final Iterator keyIterator = keySet().iterator();
    return new  Iterator() {

        public boolean hasNext() {
            return keyIterator.hasNext();
        }

        public Object next() {
            Object key = keyIterator.next();
            return new  MapEntry(key);
        }

        public void remove() {
            keyIterator.remove();
        }
    };
}
method: org.eclipse.core.internal.databinding.observable.masterdetail.MapDetailValueObservableMap.keySet()java.util.Set;1
public Set keySet() {
    getterCalled();
    return masterMap.keySet();
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.views.actions.RunTargetAction.launch(org.eclipse.ant.internal.ui.model.AntElementNode;)V2
public void launch(AntElementNode node) {
    AntLaunchShortcut shortcut = new  AntLaunchShortcut();
    shortcut.setShowDialog(false);
    shortcut.launch(node, ILaunchManager.RUN_MODE);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.addLongField(org.eclipse.jetty.io.Buffer;J)V3
public void addLongField(Buffer name, long value) {
    Buffer v = BufferUtil.toBuffer(value);
    add(name, v);
}
method: org.eclipse.jetty.io.BufferUtil.toBuffer(J)org.eclipse.jetty.io.Buffer;1
public static Buffer toBuffer(long value) {
    ByteArrayBuffer buf = new  ByteArrayBuffer(32);
    putDecLong(buf, value);
    return buf;
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.Section.putTitleBarColor(java.lang.String;org.eclipse.swt.graphics.Color;)V3
private void putTitleBarColor(String key, Color color) {
    if (color == null)
        return;
    if (titleColors == null)
        titleColors = new  Hashtable();
    titleColors.put(key, color);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.SWTFactory.createScrolledComposite(org.eclipse.swt.widgets.Composite;IIII)org.eclipse.ui.forms.widgets.SharedScrolledComposite;5
public static SharedScrolledComposite createScrolledComposite(Composite parent, int columns, int hspan, int marginwidth, int marginheight) {
    SharedScrolledComposite comp = new  SharedScrolledComposite(parent, SWT.V_SCROLL | SWT.H_SCROLL) {
    };
    GridLayout layout = new  GridLayout(columns, false);
    layout.marginHeight = marginheight;
    layout.marginWidth = marginwidth;
    comp.setLayout(layout);
    GridData gd = new  GridData(GridData.FILL_BOTH);
    gd.horizontalSpan = hspan;
    comp.setLayoutData(gd);
    comp.setExpandHorizontal(true);
    comp.setExpandVertical(true);
    return comp;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.SWTFactory.createScrolledComposite(org.eclipse.swt.widgets.Composite;IIII)org.eclipse.ui.forms.widgets.SharedScrolledComposite;5
public static SharedScrolledComposite createScrolledComposite(Composite parent, int columns, int hspan, int marginwidth, int marginheight) {
    return createScrolledComposite(parent, SWT.V_SCROLL | SWT.H_SCROLL, columns, hspan, marginwidth, marginheight);
}
method: org.eclipse.pde.internal.ui.SWTFactory.createScrolledComposite(org.eclipse.swt.widgets.Composite;IIIII)org.eclipse.ui.forms.widgets.SharedScrolledComposite;6
public static SharedScrolledComposite createScrolledComposite(Composite parent, int style, int columns, int hspan, int marginwidth, int marginheight) {
    SharedScrolledComposite comp = new  SharedScrolledComposite(parent, style) {
    };
    GridLayout layout = new  GridLayout(columns, false);
    layout.marginHeight = marginheight;
    layout.marginWidth = marginwidth;
    comp.setLayout(layout);
    GridData gd = new  GridData(GridData.FILL_BOTH);
    gd.horizontalSpan = hspan;
    comp.setLayoutData(gd);
    comp.setExpandHorizontal(true);
    comp.setExpandVertical(true);
    return comp;
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.importexport.breakpoints.WizardImportBreakpointsSelectionPage.updateBreakpointsPreviewList(org.eclipse.debug.internal.ui.importexport.breakpoints.EmbeddedBreakpointsViewer;)V2
private void updateBreakpointsPreviewList(final EmbeddedBreakpointsViewer currentTView) throws InvocationTargetException, InterruptedException {
    getContainer().run(false, true, new  IRunnableWithProgress() {

        @Override
        public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            WizardImportBreakpointsPage mainPage = (WizardImportBreakpointsPage) getWizard().getPage(ImportExportMessages.WizardImportBreakpoints_0);
            ImportBreakpointsOperation operation = new  ImportBreakpointsOperation(mainPage.getFileNameField().getText().trim(), mainPage.getAutoRemoveDuplicates(), false, false);
            operation.run(monitor);
            BreakpointContainer breakpointManager = new  BreakpointContainer(null, null);
            IBreakpoint[] importedBreakpoints = operation.getImportedBreakpoints();
            for (int i = 0; i < importedBreakpoints.length; i++) {
                breakpointManager.addBreakpoint(importedBreakpoints[i], new  ModelDelta(null, IModelDelta.ADDED));
            }
            currentTView.getViewer().setInput(breakpointManager);
            currentTView.getViewer().refresh();
        }
    });
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.actions.ProgressDialogRunnableContext.run(org.eclipse.jface.operation.IRunnableWithProgress;)V2
public void run(IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
    getRunnableContext().run(true, true, wrapRunnable(runnable));
}
method: org.eclipse.team.internal.ui.actions.ProgressDialogRunnableContext.wrapRunnable(org.eclipse.jface.operation.IRunnableWithProgress;)org.eclipse.jface.operation.IRunnableWithProgress;2
private IRunnableWithProgress wrapRunnable(final IRunnableWithProgress runnable) {
    return new  IRunnableWithProgress() {

        public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
                if (schedulingRule == null && !postponeBuild) {
                    runnable.run(monitor);
                } else {
                    final Exception[] exception = new Exception[] { null };
                    ResourcesPlugin.getWorkspace().run(new  IWorkspaceRunnable() {

                        public void run(IProgressMonitor pm) throws CoreException {
                            try {
                                runnable.run(pm);
                            } catch (InvocationTargetException e) {
                                exception[0] = e;
                            } catch (InterruptedException e) {
                                exception[0] = e;
                            }
                        }
                    }, schedulingRule, 0, monitor);
                    if (exception[0] != null) {
                        if (exception[0] instanceof InvocationTargetException) {
                            throw (InvocationTargetException) exception[0];
                        } else if (exception[0] instanceof InterruptedException) {
                            throw (InterruptedException) exception[0];
                        }
                    }
                }
            } catch (CoreException e) {
                throw new  InvocationTargetException(e);
            }
        }
    };
}

---------------Library-------------------
method: org.eclipse.core.runtime.model.ConfigurationElementModel.markReadOnly()V1
public void markReadOnly() {
    super.markReadOnly();
    if (children != null)
        for (int i = 0; i < children.length; i++) children[i].markReadOnly();
    if (properties != null)
        for (int i = 0; i < properties.length; i++) properties[i].markReadOnly();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.classfmt.FieldInfoWithTypeAnnotation.reset()V1
protected void reset() {
    if (this.typeAnnotations != null)
        for (int i = 0, max = this.typeAnnotations.length; i < max; i++) this.typeAnnotations[i].reset();
    super.reset();
}
method: org.eclipse.jdt.internal.compiler.classfmt.FieldInfoWithAnnotation.reset()V1
protected void reset() {
    if (this.annotations != null)
        for (int i = 0, max = this.annotations.length; i < max; i++) this.annotations[i].reset();
    super.reset();
}

---------------Library-------------------
method: org.eclipse.debug.ui.actions.RulerBreakpointTypesActionDelegate.getMenu(org.eclipse.swt.widgets.Control;)org.eclipse.swt.widgets.Menu;2
@Override
public Menu getMenu(Control parent) {
    setMenu(new  Menu(parent));
    fillMenu(fMenu);
    initMenu();
    return fMenu;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.GenerateHashCodeEqualsOperation.getReturnFalse()org.eclipse.jdt.core.dom.ReturnStatement;1
private ReturnStatement getReturnFalse() {
    ReturnStatement falseReturn = fAst.newReturnStatement();
    falseReturn.setExpression(fAst.newBooleanLiteral(false));
    return falseReturn;
}
method: org.eclipse.jdt.core.dom.AST.newBooleanLiteral(Z)org.eclipse.jdt.core.dom.BooleanLiteral;2
public BooleanLiteral newBooleanLiteral(boolean value) {
    BooleanLiteral result = new  BooleanLiteral(this);
    result.setBooleanValue(value);
    return result;
}

---------------Library-------------------
method: org.eclipse.ui.internal.intro.impl.model.util.ModelUtil.createAndAppendChild(org.w3c.dom.Element;java.lang.String;java.util.Properties;)org.w3c.dom.Element;3
public static Element createAndAppendChild(Element parentElement, String elementName, Properties attributes) {
    Element element = createElement(parentElement.getOwnerDocument(), elementName, attributes);
    parentElement.appendChild(element);
    return element;
}
---------------Client-------------------
method: org.eclipse.emf.common.notify.impl.AdapterFactoryImpl.adaptNew(org.eclipse.emf.common.notify.Notifier;java.lang.Object;)org.eclipse.emf.common.notify.Adapter;3
public Adapter adaptNew(Notifier target, Object type) {
    Adapter adapter = createAdapter(target, type);
    associate(adapter, target);
    return adapter;
}
method: org.eclipse.emf.common.notify.impl.AdapterFactoryImpl.associate(org.eclipse.emf.common.notify.Adapter;org.eclipse.emf.common.notify.Notifier;)V3
protected void associate(Adapter adapter, Notifier target) {
    if (adapter != null) {
        target.eAdapters().add(adapter);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.feature.FeatureObject.firePropertyChanged(org.eclipse.pde.internal.core.ifeature.IFeatureObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
protected void firePropertyChanged(IFeatureObject object, String property, Object oldValue, Object newValue) {
    if (model.isEditable()) {
        IModelChangeProvider provider = model;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChanged(String property, Object oldValue, Object newValue) {
    firePropertyChanged(this, property, oldValue, newValue);
}
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(org.eclipse.pde.internal.ua.core.icheatsheet.comp.ICompCSObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
private void firePropertyChanged(ICompCSObject object, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        IModelChangeProvider provider = fModel;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.builder.Reference.fieldReference(org.eclipse.pde.api.tools.internal.provisional.model.IApiMember;java.lang.String;java.lang.String;II)org.eclipse.pde.api.tools.internal.builder.Reference;5
public static Reference fieldReference(IApiMember origin, String typeName, String fieldName, int kind, int flags) {
    Reference ref = new  Reference();
    ref.fSourceMember = origin;
    ref.fTypeName = typeName;
    ref.fMemberName = fieldName;
    ref.fKind = kind;
    ref.fType = IReference.T_FIELD_REFERENCE;
    ref.fFlags = flags;
    return ref;
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.builder.Reference.typeReference(org.eclipse.pde.api.tools.internal.provisional.model.IApiMember;java.lang.String;java.lang.String;I)org.eclipse.pde.api.tools.internal.builder.Reference;4
public static Reference typeReference(IApiMember origin, String typeName, String signature, int kind) {
    return typeReference(origin, typeName, signature, kind, 0);
}
method: org.eclipse.pde.api.tools.internal.builder.Reference.typeReference(org.eclipse.pde.api.tools.internal.provisional.model.IApiMember;java.lang.String;java.lang.String;II)org.eclipse.pde.api.tools.internal.builder.Reference;5
public static Reference typeReference(IApiMember origin, String typeName, String signature, int kind, int flags) {
    Reference ref = new  Reference();
    ref.fSourceMember = origin;
    ref.fTypeName = typeName;
    ref.fKind = kind;
    ref.fType = IReference.T_TYPE_REFERENCE;
    ref.fSignature = signature;
    ref.fFlags = flags;
    return ref;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_text_aa_gc(JIAJ)V3
public static final void gtk_style_get_text_aa_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_text_aa_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.help.ui.internal.DefaultHelpUI$ExternalWorkbenchBrowser.displayURL(java.lang.String;)V2
public void displayURL(String url) throws Exception {
    try {
        IWebBrowser browser = getExternalBrowser();
        if (browser != null) {
            browser.openURL(new  URL(url));
        }
    } catch (PartInitException pie) {
        ErrorUtil.displayErrorDialog(pie.getLocalizedMessage());
    }
}
---------------Client-------------------
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(IResourceChangeEvent event) {
    IResourceDelta delta = event.getDelta();
    if (delta != null)
        handleDelta(delta);
}
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.handleDelta(org.eclipse.core.resources.IResourceDelta;)V2
private void handleDelta(IResourceDelta d) {
    try {
        d.accept(new  IResourceDeltaVisitor() {

            public boolean visit(IResourceDelta delta) throws CoreException {
                switch(delta.getKind()) {
                    case IResourceDelta.ADDED:
                        return false;
                    case IResourceDelta.REMOVED:
                        IResource res = delta.getResource();
                        if (res instanceof IFile) {
                            Match[] matches = fResult.getMatches(res);
                            fResult.removeMatches(matches);
                        }
                        break;
                    case IResourceDelta.CHANGED:
                        break;
                }
                return true;
            }
        });
    } catch (CoreException e) {
        SearchPlugin.log(e);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.registry.RegistryReader.logMissingAttribute(org.eclipse.core.runtime.IConfigurationElement;java.lang.String;)V2
protected static void logMissingAttribute(IConfigurationElement element, String attributeName) {
    logError(element, "Required attribute '" + attributeName + "' not defined");
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setLocalImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;)V2
public static void setLocalImageDescriptors(IAction action, String iconName) {
    setImageDescriptors(action, "lcl16/", iconName);
}
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;java.lang.String;)V3
public static void setImageDescriptors(IAction action, String type, String relPath) {
    action.setImageDescriptor(create("e" + type, relPath));
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.registry.TeamContentProviderManager.firePropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
private void firePropertyChange(final PropertyChangeEvent event) {
    Object[] allListeners = listeners.getListeners();
    for (int i = 0; i < allListeners.length; i++) {
        final IPropertyChangeListener listener = (IPropertyChangeListener) allListeners[i];
        SafeRunner.run(new  ISafeRunnable() {

            public void run() throws Exception {
                listener.propertyChange(event);
            }

            public void handleException(Throwable exception) {
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.jetty.util.security.Credential$Crypt.crypt(java.lang.String;java.lang.String;)java.lang.String;2
public static String crypt(String user, String pw) {
    return "CRYPT:" + UnixCrypt.crypt(pw, user);
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.WidgetDelegatingValueProperty.observeDelayed(ILorg.eclipse.swt.widgets.Widget;)org.eclipse.jface.databinding.swt.ISWTObservableValue;3
public ISWTObservableValue observeDelayed(int delay, Widget widget) {
    return SWTObservables.observeDelayedValue(delay, observe(widget));
}
method: org.eclipse.jface.databinding.swt.SWTObservables.observeDelayedValue(ILorg.eclipse.jface.databinding.swt.ISWTObservableValue;)org.eclipse.jface.databinding.swt.ISWTObservableValue;2
public static ISWTObservableValue observeDelayedValue(int delay, ISWTObservableValue observable) {
    return new  SWTDelayedObservableValueDecorator(Observables.observeDelayedValue(delay, observable), observable.getWidget());
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.bundle.ExportPackageHeader.addPackage(java.lang.String;)org.eclipse.pde.internal.core.text.bundle.ExportPackageObject;2
public ExportPackageObject addPackage(String id) {
    ExportPackageObject obj = new  ExportPackageObject(this, id, null, getVersionAttribute());
    addManifestElement(obj);
    return obj;
}
---------------Client-------------------
method: org.eclipse.jdt.launching.JavaRuntime.newRuntimeContainerClasspathEntry(org.eclipse.core.runtime.IPath;I)org.eclipse.jdt.launching.IRuntimeClasspathEntry;2
public static IRuntimeClasspathEntry newRuntimeContainerClasspathEntry(IPath path, int classpathProperty) throws CoreException {
    return newRuntimeContainerClasspathEntry(path, classpathProperty, null);
}
method: org.eclipse.jdt.launching.JavaRuntime.newRuntimeContainerClasspathEntry(org.eclipse.core.runtime.IPath;ILorg.eclipse.jdt.core.IJavaProject;)org.eclipse.jdt.launching.IRuntimeClasspathEntry;3
public static IRuntimeClasspathEntry newRuntimeContainerClasspathEntry(IPath path, int classpathProperty, IJavaProject project) throws CoreException {
    RuntimeClasspathEntry entry = new  RuntimeClasspathEntry(JavaCore.newContainerEntry(path), classpathProperty);
    entry.setJavaProject(project);
    return entry;
}

---------------Library-------------------
method: org.eclipse.ui.internal.browser.BrowserViewer$2.changed(org.eclipse.swt.browser.StatusTextEvent;)V2
public void changed(StatusTextEvent event) {
    if (container != null) {
        IStatusLineManager status = container.getActionBars().getStatusLineManager();
        status.setMessage(event.text);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.compare.PluginStructureCreator$1.dispose()V1
public void dispose() {
    labelProvider.dispose();
    resources.dispose();
    super.dispose();
}
method: org.eclipse.compare.structuremergeviewer.StructureRootNode.dispose()V1
public void dispose() {
    if (fAdapter != null) {
        fAdapter.disconnect(fInput);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.launcher.RuntimeClasspathViewer.notifyChanged()V1
public void notifyChanged() {
    Object[] listeners = fListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((IEntriesChangedListener) listeners[i]).entriesChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.partPropertyChanged(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void partPropertyChanged(PropertyChangeEvent event) {
    firePartPropertyChange(event);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.firePartPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void firePartPropertyChange(PropertyChangeEvent event) {
    Object[] l = partChangeListeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        ((IPropertyChangeListener) l[i]).propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.emf.ecore.change.impl.FeatureChangeImpl.getFeatureName()java.lang.String;1
public String getFeatureName() {
    return feature == null ? featureName : feature.getName();
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    return fInput.getContentBaseAddress();
}
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentInput.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    if (fMemoryBlockBaseAddress == null) {
        try {
            updateContentBaseAddress();
        } catch (DebugException e) {
            fMemoryBlockBaseAddress = new  BigInteger("0");
        }
    }
    return fMemoryBlockBaseAddress;
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TreeColumn.releaseHandle()V1
@Override
void releaseHandle() {
    super.releaseHandle();
    handle = buttonHandle = labelHandle = imageHandle = 0;
    modelIndex = -1;
    parent = null;
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Button.releaseHandle()V1
@Override
void releaseHandle() {
    super.releaseHandle();
    boxHandle = imageHandle = labelHandle = arrowHandle = 0;
}
method: org.eclipse.swt.widgets.Control.releaseHandle()V1
@Override
void releaseHandle() {
    super.releaseHandle();
    fixedHandle = 0;
    parent = null;
}

---------------Library-------------------
method: org.eclipse.jdt.ui.text.folding.DefaultJavaFoldingStructureProvider$ProjectionListener.dispose()V1
public void dispose() {
    if (fViewer != null) {
        fViewer.removeProjectionListener(this);
        fViewer = null;
    }
}
---------------Client-------------------
method: org.apache.lucene.search.NRTManager$SearcherManagerRef.close()V1
public void close() throws IOException {
    generation = MAX_SEARCHER_GEN;
    manager.close();
}
method: org.apache.lucene.search.SearcherManager.close()V1
public synchronized void close() throws IOException {
    if (currentSearcher != null) {
        swapSearcher(null);
    }
}

---------------Library-------------------
method: org.eclipse.jface.text.contentassist.ContentAssistant.setSorter(org.eclipse.jface.text.contentassist.ICompletionProposalSorter;)V2
public void setSorter(ICompletionProposalSorter sorter) {
    fSorter = sorter;
    if (fProposalPopup != null) {
        fProposalPopup.setSorter(fSorter);
    }
}
---------------Client-------------------
method: org.eclipse.jface.text.quickassist.QuickAssistAssistant.setStatusLineVisible(Z)V2
public void setStatusLineVisible(boolean show) {
    fQuickAssistAssistantImpl.setStatusLineVisible(show);
}
method: org.eclipse.jface.text.contentassist.ContentAssistant.setStatusLineVisible(Z)V2
public void setStatusLineVisible(boolean show) {
    fIsStatusLineVisible = show;
    if (fProposalPopup != null)
        fProposalPopup.setStatusLineVisible(show);
}

---------------Library-------------------
method: org.eclipse.jface.text.AbstractDocument.resumeDocumentListenerNotification()V1
private void resumeDocumentListenerNotification() {
    if (fDeferredDocumentEvent != null) {
        DocumentEvent event = fDeferredDocumentEvent;
        fDeferredDocumentEvent = null;
        doFireDocumentChanged(event);
    }
}
---------------Client-------------------
method: org.apache.lucene.search.NRTManager$SearcherManagerRef.close()V1
public void close() throws IOException {
    generation = MAX_SEARCHER_GEN;
    manager.close();
}
method: org.apache.lucene.search.SearcherManager.close()V1
public synchronized void close() throws IOException {
    if (currentSearcher != null) {
        swapSearcher(null);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.statushandlers.SupportTray.destroyImages()V1
private void destroyImages() {
    if (normal != null)
        normal.dispose();
    if (hover != null)
        hover.dispose();
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ds.ui.editor.dialogs.DSEditReferenceDialog.doOpenSelectionDialog(ILorg.eclipse.pde.internal.ds.ui.parts.FormEntry;)V3
private void doOpenSelectionDialog(int scopeType, FormEntry entry) {
    try {
        String filter = entry.getValue();
        filter = filter.substring(filter.lastIndexOf(".") + 1);
        SelectionDialog dialog = JavaUI.createTypeDialog(Activator.getActiveWorkbenchShell(), PlatformUI.getWorkbench().getProgressService(), SearchEngine.createWorkspaceScope(), scopeType, false, filter);
        dialog.setTitle(Messages.DSReferenceDetails_selectType);
        if (dialog.open() == Window.OK) {
            IType type = (IType) dialog.getResult()[0];
            entry.setValue(type.getFullyQualifiedName('$'));
            entry.commit();
        }
    } catch (CoreException e) {
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.ui.wizards.DSFileWizardPage$4.doOpenSelectionDialog(ILorg.eclipse.swt.widgets.Text;)V3
private void doOpenSelectionDialog(int scopeType, Text entry) {
    try {
        String filter = entry.getText();
        filter = filter.substring(filter.lastIndexOf(".") + 1);
        SelectionDialog dialog = JavaUI.createTypeDialog(Activator.getActiveWorkbenchShell(), PlatformUI.getWorkbench().getProgressService(), SearchEngine.createWorkspaceScope(), scopeType, false, filter);
        dialog.setTitle(Messages.DSFileWizardPage_selectType);
        if (dialog.open() == Window.OK) {
            IType type = (IType) dialog.getResult()[0];
            entry.setText(type.getFullyQualifiedName('$'));
        }
    } catch (CoreException e) {
        Activator.logException(e);
    }
}
method: org.eclipse.pde.internal.ds.ui.Activator.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_tree_view_scroll_to_point(JII)V3
public static final void gtk_tree_view_scroll_to_point(long tree_view, int tree_x, int tree_y) {
    lock.lock();
    try {
        _gtk_tree_view_scroll_to_point(tree_view, tree_x, tree_y);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTabGroup.performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;)V2
@Override
public void performApply(ILaunchConfigurationWorkingCopy configuration) {
    ILaunchConfigurationTab[] tabs = getTabs();
    for (int i = 0; i < tabs.length; i++) {
        tabs[i].performApply(configuration);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.core.expressions.EvaluationContext.removeVariable(java.lang.String;)java.lang.Object;2
public Object removeVariable(String name) {
    Assert.isNotNull(name);
    if (fVariables == null)
        return null;
    return fVariables.remove(name);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.NewLibraryPluginCreationPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
public IWizardPage getNextPage() {
    updateData();
    return super.getNextPage();
}
method: org.eclipse.jface.wizard.WizardPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
@Override
public IWizardPage getNextPage() {
    if (wizard == null) {
        return null;
    }
    return wizard.getNextPage(this);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.actions.ExportDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (title != null) {
        shell.setText(title);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.SWTFactory.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;I)org.eclipse.swt.widgets.Button;4
public static Button createPushButton(Composite parent, String label, Image image, int fill) {
    Button button = new  Button(parent, SWT.PUSH);
    button.setFont(parent.getFont());
    if (image != null) {
        button.setImage(image);
    }
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData(fill);
    button.setLayoutData(gd);
    SWTFactory.setButtonDimensionHint(button);
    return button;
}
---------------Client-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTab.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;)org.eclipse.swt.widgets.Button;4
protected Button createPushButton(Composite parent, String label, Image image) {
    return SWTFactory.createPushButton(parent, label, image);
}
method: org.eclipse.debug.internal.ui.SWTFactory.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;)org.eclipse.swt.widgets.Button;3
public static Button createPushButton(Composite parent, String label, Image image) {
    Button button = new  Button(parent, SWT.PUSH);
    button.setFont(parent.getFont());
    if (image != null) {
        button.setImage(image);
    }
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData();
    button.setLayoutData(gd);
    setButtonDimensionHint(button);
    return button;
}

---------------Library-------------------
method: org.eclipse.swt.accessibility.Accessible.release()V1
void release() {
    if (children != null) {
        for (int i = 0; i < children.size(); i++) {
            Accessible child = (Accessible) children.elementAt(i);
            child.dispose();
        }
    }
    if (accessibleObject != null) {
        accessibleObject.release();
        accessibleObject = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackagerfat.FatJarPackageWizardPage.dispose()V1
@Override
public void dispose() {
    super.dispose();
    if (fLauchConfigurationModel != null) {
        for (int i = 0, size = fLauchConfigurationModel.size(); i < size; i++) {
            LaunchConfigurationElement element = fLauchConfigurationModel.get(i);
            element.dispose();
        }
    }
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.ViewLabelProvider.getForeground(java.lang.Object;)org.eclipse.swt.graphics.Color;2
@Override
public Color getForeground(Object element) {
    if (element instanceof IViewDescriptor) {
        IWorkbenchPage activePage = window.getActivePage();
        if (activePage != null) {
            if (activePage.findViewReference(((IViewDescriptor) element).getId()) != null) {
                return dimmedForeground;
            }
        }
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceModelProviderOperation.getTargetDiffs()Aorg.eclipse.team.core.diff.IDiff;1
protected IDiff[] getTargetDiffs() {
    return getFileDeltas(getTreePathsOrElements());
}
method: org.eclipse.team.internal.ui.mapping.ResourceModelProviderOperation.getTreePathsOrElements()Ajava.lang.Object;1
private Object[] getTreePathsOrElements() {
    if (selection instanceof ITreeSelection) {
        ITreeSelection ts = (ITreeSelection) selection;
        return ts.getPaths();
    }
    return getElements();
}

---------------Library-------------------
method: org.eclipse.ltk.core.refactoring.TextChange.getTextEditChangeGroups()Aorg.eclipse.ltk.core.refactoring.TextEditChangeGroup;1
public TextEditChangeGroup[] getTextEditChangeGroups() {
    final TextEditBasedChangeGroup[] groups = getChangeGroups();
    final TextEditChangeGroup[] result = new TextEditChangeGroup[groups.length];
    System.arraycopy(groups, 0, result, 0, groups.length);
    return result;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.pipe(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)org.eclipse.equinox.p2.metadata.expression.IExpression;2
public IExpression pipe(IExpression... operands) {
    return Pipe.createPipe(convertArray(operands));
}
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.convertArray(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)Aorg.eclipse.equinox.internal.p2.metadata.expression.Expression;1
protected static Expression[] convertArray(IExpression[] operands) {
    Expression[] ops = new Expression[operands.length];
    System.arraycopy(operands, 0, ops, 0, operands.length);
    return ops;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.AddSourceFolderWizardPage$1.createDialogArea(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Control;2
@Override
protected Control createDialogArea(Composite parent) {
    Control result = super.createDialogArea(parent);
    PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, IJavaHelpContextIds.BP_CHOOSE_EXISTING_FOLDER_TO_MAKE_SOURCE_FOLDER);
    return result;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;3
protected String getTemplate(String name, ICompilationUnit parentCU) {
    return getTemplate(name, parentCU, 0);
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;I)java.lang.String;4
protected String getTemplate(String name, ICompilationUnit parentCU, int pos) {
    try {
        Template template = JavaPlugin.getDefault().getTemplateStore().findTemplate(name);
        if (template != null) {
            return JavaContext.evaluateTemplate(template, parentCU, pos);
        }
    } catch (CoreException e) {
        JavaPlugin.log(e);
    } catch (BadLocationException e) {
        JavaPlugin.log(e);
    } catch (TemplateException e) {
        JavaPlugin.log(e);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.e4.ui.internal.workbench.Util.compare(java.lang.Comparable;java.lang.Comparable;)I2
public static final int compare(final Comparable left, final Comparable right) {
    if (left == null && right == null) {
        return 0;
    } else if (left == null) {
        return -1;
    } else if (right == null) {
        return 1;
    } else {
        return left.compareTo(right);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equals(org.eclipse.core.runtime.IPath;org.eclipse.core.runtime.IPath;)Z3
protected boolean equals(IPath path1, IPath path2) {
    return equalsOrNull(path1, path2);
}
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equalsOrNull(java.lang.Object;java.lang.Object;)Z3
private boolean equalsOrNull(Object o1, Object o2) {
    if (o1 == null) {
        return o2 == null;
    }
    if (o2 == null) {
        return false;
    }
    return o1.equals(o2);
}

---------------Library-------------------
method: org.eclipse.pde.ui.templates.ChoiceOption.getChoice()java.lang.String;1
public String getChoice() {
    return getValue() != null ? getValue().toString() : null;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.CVSSyncInfo.getLocalContentIdentifier()java.lang.String;1
public String getLocalContentIdentifier() {
    ResourceSyncInfo info = getSyncInfoForLocal(getCVSFile());
    return info != null ? info.getRevision() : null;
}
method: org.eclipse.team.internal.ccvs.core.CVSSyncInfo.getSyncInfoForLocal(org.eclipse.team.internal.ccvs.core.ICVSFile;)org.eclipse.team.internal.ccvs.core.syncinfo.ResourceSyncInfo;1
private static ResourceSyncInfo getSyncInfoForLocal(ICVSFile cvsFile) {
    if (cvsFile == null)
        return null;
    try {
        return cvsFile.getSyncInfo();
    } catch (CVSException e) {
        CVSProviderPlugin.log(e);
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTabGroup.setDefaults(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;)V2
@Override
public void setDefaults(ILaunchConfigurationWorkingCopy configuration) {
    ILaunchConfigurationTab[] tabs = getTabs();
    for (int i = 0; i < tabs.length; i++) {
        tabs[i].setDefaults(configuration);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.ViewerStateTracker.notifyStateUpdate(java.lang.Object;ILorg.eclipse.debug.internal.ui.viewers.model.provisional.IViewerUpdate;)V4
void notifyStateUpdate(final Object input, final int type, final IViewerUpdate update) {
    if (!fStateUpdateListeners.isEmpty()) {
        Object[] listeners = fStateUpdateListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            final IStateUpdateListener listener = (IStateUpdateListener) listeners[i];
            SafeRunner.run(new  ISafeRunnable() {

                @Override
                public void run() throws Exception {
                    switch(type) {
                        case STATE_SAVE_SEQUENCE_BEGINS:
                            listener.stateSaveUpdatesBegin(input);
                            break;
                        case STATE_SAVE_SEQUENCE_COMPLETE:
                            listener.stateSaveUpdatesComplete(input);
                            break;
                        case STATE_RESTORE_SEQUENCE_BEGINS:
                            listener.stateRestoreUpdatesBegin(input);
                            break;
                        case STATE_RESTORE_SEQUENCE_COMPLETE:
                            listener.stateRestoreUpdatesComplete(input);
                            break;
                        case TreeModelContentProvider.UPDATE_BEGINS:
                            listener.stateUpdateStarted(input, update);
                            break;
                        case TreeModelContentProvider.UPDATE_COMPLETE:
                            listener.stateUpdateComplete(input, update);
                            break;
                        default:
                            break;
                    }
                }

                @Override
                public void handleException(Throwable exception) {
                    DebugUIPlugin.log(exception);
                }
            });
        }
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.history.CompareFileRevisionEditorInput$MyDiffNode.fireChange()V1
public void fireChange() {
    super.fireChange();
}
method: org.eclipse.team.internal.ui.mapping.AbstractCompareInput.fireChange()V1
protected void fireChange() {
    if (!listeners.isEmpty()) {
        Object[] allListeners = listeners.getListeners();
        for (int i = 0; i < allListeners.length; i++) {
            final ICompareInputChangeListener listener = (ICompareInputChangeListener) allListeners[i];
            SafeRunner.run(new  ISafeRunnable() {

                public void run() throws Exception {
                    listener.compareInputChanged(AbstractCompareInput.this);
                }

                public void handleException(Throwable exception) {
                }
            });
        }
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.themes.Theme.getFontRegistry()org.eclipse.jface.resource.FontRegistry;1
@Override
public FontRegistry getFontRegistry() {
    if (themeFontRegistry != null) {
        return themeFontRegistry;
    }
    return WorkbenchThemeManager.getInstance().getDefaultThemeFontRegistry();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarPackageActionDelegate.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell != null)
        return fShell;
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.frameworkadmin.utils.Utils.getClauses(java.lang.String;)Ajava.lang.String;1
public static String[] getClauses(String header) {
    StringTokenizer token = new  StringTokenizer(header, ",");
    List<String> list = new  LinkedList<String>();
    while (token.hasMoreTokens()) {
        list.add(token.nextToken());
    }
    String[] ret = new String[list.size()];
    list.toArray(ret);
    return ret;
}
---------------Client-------------------
method: org.eclipse.jface.resource.StringConverter.asArray(java.lang.String;Ajava.lang.String;)Ajava.lang.String;2
public static String[] asArray(String value, String[] dflt) {
    try {
        return asArray(value);
    } catch (DataFormatException e) {
        return dflt;
    }
}
method: org.eclipse.jface.resource.StringConverter.asArray(java.lang.String;)Ajava.lang.String;1
public static String[] asArray(String value) throws DataFormatException {
    ArrayList<String> list = new  ArrayList<String>();
    StringTokenizer stok = new  StringTokenizer(value);
    while (stok.hasMoreTokens()) {
        list.add(stok.nextToken());
    }
    String result[] = new String[list.size()];
    list.toArray(result);
    return result;
}

---------------Library-------------------
method: org.eclipse.equinox.p2.engine.spi.Memento.get(java.lang.String;)java.lang.Object;2
public Object get(String key) {
    if (key == null)
        throw new  NullPointerException();
    return mementoMap.get(key);
}
---------------Client-------------------
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findClass(java.lang.String;)java.lang.Class;2
public Class<?> findClass(String name) throws ClassNotFoundException {
    Class<?> result = findLocalClass(name);
    if (result == null)
        throw new  ClassNotFoundException(name);
    return result;
}
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findLocalClass(java.lang.String;)java.lang.Class;2
public Class<?> findLocalClass(String name) {
    try {
        return classLoader.loadClass(name);
    } catch (ClassNotFoundException e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnAstLengthStack(I)V2
protected void pushOnAstLengthStack(int pos) {
    int stackLength = this.astLengthStack.length;
    if (++this.astLengthPtr >= stackLength) {
        System.arraycopy(this.astLengthStack, 0, this.astLengthStack = new int[stackLength + StackIncrement], 0, stackLength);
    }
    this.astLengthStack[this.astLengthPtr] = pos;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.consumeEmptyTypeArguments()V1
protected void consumeEmptyTypeArguments() {
    pushOnGenericsLengthStack(0);
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnGenericsLengthStack(I)V2
protected void pushOnGenericsLengthStack(int pos) {
    int stackLength = this.genericsLengthStack.length;
    if (++this.genericsLengthPtr >= stackLength) {
        System.arraycopy(this.genericsLengthStack, 0, this.genericsLengthStack = new int[stackLength + GenericsStackIncrement], 0, stackLength);
    }
    this.genericsLengthStack[this.genericsLengthPtr] = pos;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_light_gc(JIAJ)V3
public static final void gtk_style_get_light_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_light_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.DateTime.updateControl()V1
void updateControl() {
    if (text != null) {
        String string = getFormattedString(style);
        ignoreVerify = true;
        text.setText(string);
        ignoreVerify = false;
    }
    redraw();
}
---------------Client-------------------
method: org.eclipse.ui.internal.views.markers.MarkerContentGenerator.updateFilters(java.util.Collection;Z)V3
void updateFilters(Collection filters, boolean andFilters) {
    setAndFilters(andFilters);
    this.filters = filters;
    enabledFilters = FILTERS_CHANGED;
    writeFiltersPreference();
    requestMarkerUpdate();
}
method: org.eclipse.ui.internal.views.markers.MarkerContentGenerator.requestMarkerUpdate()V1
void requestMarkerUpdate() {
    if (builder != null) {
        builder.scheduleUpdate(0L);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.StubUtility.getTypeParameterNames(Aorg.eclipse.jdt.core.ITypeParameter;)Ajava.lang.String;1
public static String[] getTypeParameterNames(ITypeParameter[] typeParameters) {
    String[] typeParametersNames = new String[typeParameters.length];
    for (int i = 0; i < typeParameters.length; i++) {
        typeParametersNames[i] = typeParameters[i].getElementName();
    }
    return typeParametersNames;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.CVSWizardPage.layoutTextField(org.eclipse.swt.widgets.Text;)org.eclipse.swt.widgets.Text;1
public static Text layoutTextField(Text text) {
    GridData data = new  GridData(GridData.FILL_HORIZONTAL);
    data.verticalAlignment = GridData.CENTER;
    data.grabExcessVerticalSpace = false;
    data.widthHint = IDialogConstants.ENTRY_FIELD_WIDTH;
    text.setLayoutData(data);
    return text;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.AvailableIUGroup.getViewerGridData()org.eclipse.swt.layout.GridData;1
protected GridData getViewerGridData() {
    GridData data = super.getViewerGridData();
    data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
    return data;
}
method: org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup.getViewerGridData()org.eclipse.swt.layout.GridData;1
protected GridData getViewerGridData() {
    GridData data = new  GridData(GridData.FILL_BOTH);
    data.grabExcessHorizontalSpace = true;
    data.grabExcessVerticalSpace = true;
    return data;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.syncinfo.ResourceSyncInfo.getTagBytes(AB)AB1
public static byte[] getTagBytes(byte[] syncBytes) throws CVSException {
    byte[] tag = Util.getBytesForSlot(syncBytes, SEPARATOR_BYTE, 5, true);
    if (tag == null) {
        throw new  CVSException(NLS.bind(CVSMessages.ResourceSyncInfo_malformedSyncBytes, new String[] { new  String(syncBytes) }));
    }
    return tag;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.resources.EclipseSynchronizer.getName(AB)java.lang.String;2
private String getName(byte[] syncBytes) throws CVSException {
    return ResourceSyncInfo.getName(syncBytes);
}
method: org.eclipse.team.internal.ccvs.core.syncinfo.ResourceSyncInfo.getName(AB)java.lang.String;1
public static String getName(byte[] syncBytes) throws CVSException {
    String name = Util.getSubstring(syncBytes, SEPARATOR_BYTE, 1, false);
    if (name == null) {
        throw new  CVSException(NLS.bind(CVSMessages.ResourceSyncInfo_malformedSyncBytes, new String[] { new  String(syncBytes) }));
    }
    return name;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgPolicyFactory$MoveFilesFoldersAndCusPolicy.postCreateChange(Aorg.eclipse.ltk.core.refactoring.Change;org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.ltk.core.refactoring.Change;3
public Change postCreateChange(Change[] participantChanges, IProgressMonitor pm) throws CoreException {
    if (fQualifiedNameSearchResult != null) {
        return fQualifiedNameSearchResult.getSingleChange(Changes.getModifiedFiles(participantChanges));
    } else {
        return null;
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.intro.impl.model.IntroPageTitle.getTitle()java.lang.String;1
public String getTitle() {
    return getText();
}
method: org.eclipse.ui.internal.intro.impl.model.IntroText.getText()java.lang.String;1
public String getText() {
    IntroModelRoot root = getModelRoot();
    if (root != null)
        return root.resolveVariables(text);
    return text;
}

---------------Library-------------------
method: org.eclipse.ui.dialogs.SelectionStatusDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (fImage != null) {
        shell.setImage(fImage);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.dialogs.PathVariableDialog.getPathVariableManager()org.eclipse.core.resources.IPathVariableManager;1
private IPathVariableManager getPathVariableManager() {
    if (currentResource != null)
        return currentResource.getPathVariableManager();
    return ResourcesPlugin.getWorkspace().getPathVariableManager();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.ui.GotoReferencedTestAction.getShell()org.eclipse.swt.widgets.Shell;1
private Shell getShell() {
    if (fWorkbench != null)
        return fWorkbench.getShell();
    return JUnitPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.junit.ui.JUnitPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow workBenchWindow = getActiveWorkbenchWindow();
    if (workBenchWindow == null)
        return null;
    return workBenchWindow.getShell();
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.console.ConsoleDocument.clear()V1
public void clear() {
    lineTypes = null;
    lines = null;
    writeIndex = 0;
    readIndex = 0;
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;)V3
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey) {
    setMatchingCharacterPainterPreferenceKeys(enableKey, colorKey, null, null);
}
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;java.lang.String;java.lang.String;)V5
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey, String highlightCharacterAtCaretLocationKey, String enclosingPeerCharactersKey) {
    fMatchingCharacterPainterEnableKey = enableKey;
    fMatchingCharacterPainterColorKey = colorKey;
    fMatchingCharacterPainterEnclosingPeerCharactersKey = enclosingPeerCharactersKey;
    fMatchingCharacterPainterHighlightCharacterAtCaretLocationKey = highlightCharacterAtCaretLocationKey;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.JavaElementDelta.closed(org.eclipse.jdt.core.IJavaElement;)V2
public void closed(IJavaElement element) {
    JavaElementDelta delta = new  JavaElementDelta(element);
    delta.changed(F_CLOSED);
    insertDeltaTree(element, delta);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.addLongField(org.eclipse.jetty.io.Buffer;J)V3
public void addLongField(Buffer name, long value) {
    Buffer v = BufferUtil.toBuffer(value);
    add(name, v);
}
method: org.eclipse.jetty.io.BufferUtil.toBuffer(J)org.eclipse.jetty.io.Buffer;1
public static Buffer toBuffer(long value) {
    ByteArrayBuffer buf = new  ByteArrayBuffer(32);
    putDecLong(buf, value);
    return buf;
}

---------------Library-------------------
method: org.apache.jasper.compiler.SmapUtil$SDEInstaller.randomAccessWriteU2(II)V3
void randomAccessWriteU2(int pos, int val) {
    int savePos = genPos;
    genPos = pos;
    writeU2(val);
    genPos = savePos;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.LibraryVisibilitySection.refresh()V1
public void refresh() {
    update(fCurrentLibrary);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.ClassFile.addDefaultAbstractMethods()V1
public void addDefaultAbstractMethods() {
    MethodBinding[] defaultAbstractMethods = this.referenceBinding.getDefaultAbstractMethods();
    for (int i = 0, max = defaultAbstractMethods.length; i < max; i++) {
        MethodBinding methodBinding = defaultAbstractMethods[i];
        generateMethodInfoHeader(methodBinding);
        int methodAttributeOffset = this.contentsOffset;
        int attributeNumber = generateMethodInfoAttributes(methodBinding);
        completeMethodInfo(methodBinding, methodAttributeOffset, attributeNumber);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(java.lang.Object;org.eclipse.ui.internal.decorators.DecorationBuilder;)V3
public void getDecorations(Object element, DecorationBuilder decoration) {
    LightweightDecoratorDefinition[] decorators = getDecoratorsFor(element);
    for (int i = 0; i < decorators.length; i++) {
        LightweightDecoratorDefinition dd = decorators[i];
        decoration.setCurrentDefinition(dd);
        decorate(element, decoration, dd);
    }
}
method: org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(java.lang.Object;org.eclipse.ui.internal.decorators.DecorationBuilder;org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition;)V4
private void decorate(Object element, DecorationBuilder decoration, LightweightDecoratorDefinition decorator) {
    runnable.setValues(element, decoration, decorator);
    SafeRunner.run(runnable);
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.internal.MarkerType.getAllSupertypes()Aorg.eclipse.ui.views.markers.internal.MarkerType;1
public MarkerType[] getAllSupertypes() {
    ArrayList result = new  ArrayList();
    getAllSupertypes(result);
    return (MarkerType[]) result.toArray(new MarkerType[result.size()]);
}
---------------Client-------------------
method: org.eclipse.equinox.p2.engine.ProvisioningContext.getArtifactKeys(org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.equinox.p2.query.IQueryable;2
public IQueryable<IArtifactKey> getArtifactKeys(IProgressMonitor monitor) {
    return QueryUtil.compoundQueryable(getLoadedArtifactRepositories(monitor));
}
method: org.eclipse.equinox.p2.query.QueryUtil.compoundQueryable(java.util.Collection;)org.eclipse.equinox.p2.query.IQueryable;1
public static <T> IQueryable<T> compoundQueryable(Collection<? extends IQueryable<T>> queryables) {
    return new  CompoundQueryable<T>(queryables.toArray(new IQueryable[queryables.size()]));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.NormalAnnotation;)Z2
@Override
public boolean visit(NormalAnnotation node) {
    typeRefFound(node.getTypeName());
    doVisitChildren(node.values());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_context_get_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_style_context_get_background_color(long context, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_style_context_get_background_color(context, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;4
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    return anyOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;4
public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third, org.hamcrest.Matcher<? super T> fourth) {
    return org.hamcrest.core.AllOf.<T>allOf(first, second, third, fourth);
}
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;4
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(4);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    return allOf(matchers);
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.mapping.CommonViewerAdvisor.isOpenable(org.eclipse.jface.viewers.ISelection;)Z2
private boolean isOpenable(ISelection selection) {
    IStructuredSelection ss = (IStructuredSelection) selection;
    Object object = ss.getFirstElement();
    if (object == null)
        return false;
    return getParticipant().hasCompareInputFor(object);
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.ToolItemEnabledProperty.doGetBooleanValue(java.lang.Object;)Z2
public boolean doGetBooleanValue(Object source) {
    return ((ToolItem) source).getEnabled();
}
method: org.eclipse.swt.widgets.ToolItem.getEnabled()Z1
public boolean getEnabled() {
    checkWidget();
    long topHandle = topHandle();
    return gtk_widget_get_sensitive(topHandle);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.CreateMultipleSourceFoldersDialog$2.createDialogArea(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Control;2
@Override
protected Control createDialogArea(Composite parent) {
    Control result = super.createDialogArea(parent);
    PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, IJavaHelpContextIds.BP_CHOOSE_EXISTING_FOLDER_TO_MAKE_SOURCE_FOLDER);
    return result;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;3
protected String getTemplate(String name, ICompilationUnit parentCU) {
    return getTemplate(name, parentCU, 0);
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;I)java.lang.String;4
protected String getTemplate(String name, ICompilationUnit parentCU, int pos) {
    try {
        Template template = JavaPlugin.getDefault().getTemplateStore().findTemplate(name);
        if (template != null) {
            return JavaContext.evaluateTemplate(template, parentCU, pos);
        }
    } catch (CoreException e) {
        JavaPlugin.log(e);
    } catch (BadLocationException e) {
        JavaPlugin.log(e);
    } catch (TemplateException e) {
        JavaPlugin.log(e);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.product.ProductObject.firePropertyChanged(org.eclipse.pde.internal.core.iproduct.IProductObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
protected void firePropertyChanged(IProductObject object, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        IModelChangeProvider provider = fModel;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChanged(String property, Object oldValue, Object newValue) {
    firePropertyChanged(this, property, oldValue, newValue);
}
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(org.eclipse.pde.internal.ua.core.icheatsheet.comp.ICompCSObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
private void firePropertyChanged(ICompCSObject object, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        IModelChangeProvider provider = fModel;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.navigator.NavigatorSaveablesService.getActiveSaveablesFromTreeSelection(org.eclipse.jface.viewers.ITreeSelection;)Aorg.eclipse.ui.Saveable;2
private Saveable[] getActiveSaveablesFromTreeSelection(ITreeSelection selection) {
    Set result = new  HashSet();
    TreePath[] paths = selection.getPaths();
    for (int i = 0; i < paths.length; i++) {
        TreePath path = paths[i];
        Saveable saveable = findSaveable(path);
        if (saveable != null) {
            result.add(saveable);
        }
    }
    return (Saveable[]) result.toArray(new Saveable[result.size()]);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getKnownRepositoryRoots()Aorg.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;1
public RepositoryRoot[] getKnownRepositoryRoots() {
    return getRepositoryRoots(getKnownRepositoryLocations());
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getRepositoryRoots(Aorg.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;)Aorg.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;2
private RepositoryRoot[] getRepositoryRoots(ICVSRepositoryLocation[] locations) {
    List roots = new  ArrayList();
    for (int i = 0; i < locations.length; i++) {
        ICVSRepositoryLocation location = locations[i];
        RepositoryRoot root = getRepositoryRootFor(location);
        if (root != null)
            roots.add(root);
    }
    return (RepositoryRoot[]) roots.toArray(new RepositoryRoot[roots.size()]);
}

---------------Library-------------------
method: org.objectweb.asm.MethodVisitor.visitTableSwitchInsn(IILorg.objectweb.asm.Label;Aorg.objectweb.asm.Label;)V5
public void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels) {
    if (mv != null) {
        mv.visitTableSwitchInsn(min, max, dflt, labels);
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.TypeStructureBuilder$TypeNameFinderInConstructor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
@Override
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    super.visitFieldInsn(opcode, owner, name, desc);
}
method: org.objectweb.asm.MethodVisitor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    if (mv != null) {
        mv.visitFieldInsn(opcode, owner, name, desc);
    }
}

---------------Library-------------------
method: org.eclipse.equinox.http.jetty.internal.Activator.startServer(java.lang.String;java.util.Dictionary;)V2
public static synchronized void startServer(String pid, Dictionary<String, ?> settings) throws Exception {
    if (staticServerManager == null)
        throw new  IllegalStateException("Inactive");
    staticServerManager.updated(pid, settings);
}
---------------Client-------------------
method: org.eclipse.equinox.internal.util.ref.TimerRef.removeListener(org.eclipse.equinox.internal.util.timer.TimerListener;I)V2
public static void removeListener(TimerListener listener, int event) {
    if (timer == null)
        return;
    timer.removeListener(listener, event);
}
method: org.eclipse.equinox.internal.util.impl.tpt.timer.TimerFactory.removeListener(org.eclipse.equinox.internal.util.timer.TimerListener;I)V3
public void removeListener(TimerListener listener, int event) {
    TimerImpl tmp = timer;
    if (tmp == null)
        throw new  RuntimeException("This is a zombie!");
    tmp.removeListener(listener, event);
}

---------------Library-------------------
method: org.eclipse.ui.internal.ObjectContributorManager.cacheObjectLookup(java.lang.Class;java.util.List;)V3
private void cacheObjectLookup(Class objectClass, List results) {
    if (objectLookup == null) {
        objectLookup = new  HashMap();
    }
    objectLookup.put(objectClass, results);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.BinaryMethod.getReturnType()java.lang.String;1
public String getReturnType() throws JavaModelException {
    if (this.returnType == null) {
        IBinaryMethod info = (IBinaryMethod) getElementInfo();
        this.returnType = getReturnType(info);
    }
    return this.returnType;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.JavaProject.getNonJavaResources()Ajava.lang.Object;1
public Object[] getNonJavaResources() throws JavaModelException {
    return ((JavaProjectElementInfo) getElementInfo()).getNonJavaResources(this);
}
method: org.eclipse.jdt.internal.core.JavaProjectElementInfo.getNonJavaResources(org.eclipse.jdt.internal.core.JavaProject;)Ajava.lang.Object;2
Object[] getNonJavaResources(JavaProject project) {
    if (this.nonJavaResources == null) {
        this.nonJavaResources = computeNonJavaResources(project);
    }
    return this.nonJavaResources;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.core.ctxhelp.text.CtxHelpModel.getCtxHelpRoot()org.eclipse.pde.internal.ua.core.ctxhelp.text.CtxHelpRoot;1
public CtxHelpRoot getCtxHelpRoot() {
    if (fRoot == null) {
        fRoot = getFactory().createRoot();
    }
    return fRoot;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.model.JavaSynchronizationLabelProvider.getModelRoot()java.lang.Object;1
@Override
protected Object getModelRoot() {
    if (fModelRoot == null)
        fModelRoot = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot());
    return fModelRoot;
}
---------------Client-------------------
method: org.eclipse.compare.CompareUI.getResourceBundle()java.util.ResourceBundle;0
public static ResourceBundle getResourceBundle() {
    return CompareUIPlugin.getDefault().getResourceBundle();
}
method: org.eclipse.compare.internal.CompareUIPlugin.getResourceBundle()java.util.ResourceBundle;1
public ResourceBundle getResourceBundle() {
    if (fResourceBundle == null)
        fResourceBundle = Platform.getResourceBundle(getBundle());
    return fResourceBundle;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.StringDialogField.setText(java.lang.String;)V2
public void setText(String text) {
    fText = text;
    if (isOkToUse(fTextControl)) {
        fTextControl.setText(text);
    } else {
        dialogFieldChanged();
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.keys.NewKeysPreferencePage$CategoryFilterTree.filterCategories(Z)V2
public void filterCategories(boolean b) {
    filter.filterCategories(b);
    textChanged();
}
method: org.eclipse.ui.internal.keys.CategoryPatternFilter.filterCategories(Z)V2
public void filterCategories(boolean b) {
    filterCategories = b;
    if (filterCategories) {
        setPattern("org.eclipse.ui.keys.optimization.false");
    } else {
        setPattern("org.eclipse.ui.keys.optimization.true");
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.SuperMethodReference;)Z2
@Override
public boolean visit(SuperMethodReference node) {
    doVisitNode(node.getQualifier());
    doVisitChildren(node.typeArguments());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.ant.core.AntCorePreferences.getDependentBundles(org.osgi.framework.wiring.BundleRevision;)Aorg.osgi.framework.wiring.BundleRevision;2
private BundleRevision[] getDependentBundles(BundleRevision root) {
    BundleRevision[] imported = getImportedBundles(root);
    BundleRevision[] required = getRequiredBundles(root);
    BundleRevision[] dependents = new BundleRevision[imported.length + required.length];
    System.arraycopy(imported, 0, dependents, 0, imported.length);
    System.arraycopy(required, 0, dependents, imported.length, required.length);
    return dependents;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.dom.fragments.AssociativeInfixExpressionFragment.getSubFragmentsMatching(org.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;)Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;2
public IASTFragment[] getSubFragmentsMatching(IASTFragment toMatch) {
    return union(getSubFragmentsWithMyNodeMatching(toMatch), getSubFragmentsWithAnotherNodeMatching(toMatch));
}
method: org.eclipse.jdt.internal.corext.dom.fragments.AssociativeInfixExpressionFragment.union(Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;)Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;2
private static IASTFragment[] union(IASTFragment[] a1, IASTFragment[] a2) {
    IASTFragment[] union = new IASTFragment[a1.length + a2.length];
    System.arraycopy(a1, 0, union, 0, a1.length);
    System.arraycopy(a2, 0, union, a1.length, a2.length);
    return union;
}

---------------Library-------------------
method: org.eclipse.ui.views.tasklist.TaskAction.storeValue()V1
protected void storeValue() {
    IDialogSettings workbenchSettings = TaskList.getPlugin().getDialogSettings();
    IDialogSettings settings = workbenchSettings.getSection("TaskAction");
    if (settings == null) {
        settings = workbenchSettings.addNewSection("TaskAction");
    }
    settings.put(getId(), isChecked());
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.ui.internal.actions.ExportDialog.okPressed()V1
@Override
protected void okPressed() {
    saveWidgetState();
    super.okPressed();
}
method: org.eclipse.pde.api.tools.ui.internal.actions.ExportDialog.saveWidgetState()V1
void saveWidgetState() {
    IDialogSettings rootsettings = ApiUIPlugin.getDefault().getDialogSettings();
    IDialogSettings settings = rootsettings.getSection(SETTINGS_SECTION);
    if (settings == null) {
        settings = rootsettings.addNewSection(SETTINGS_SECTION);
    }
    settings.put(REPORT_PATH_STATE, getValue());
}

---------------Library-------------------
method: org.eclipse.compare.internal.CompareUIPlugin$4.run()V1
public void run() {
    CompareDialog dialog = new  CompareDialog(PlatformUI.getWorkbench().getModalDialogShellProvider().getShell(), input);
    dialog.open();
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.views.dependencies.DependenciesView$ShowLoopsAction.run()V1
@Override
public void run() {
    LoopDialog dialog = new  LoopDialog(PDEPlugin.getActiveWorkbenchShell(), fLoops);
    dialog.open();
}
method: org.eclipse.pde.internal.ui.PDEPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.classfmt.ElementValuePairInfo.hashCode()I1
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + CharOperation.hashCode(this.name);
    result = prime * result + ((this.value == null) ? 0 : this.value.hashCode());
    return result;
}
---------------Client-------------------
method: org.apache.lucene.search.spans.SpanTermQuery.hashCode()I1
@Override
public int hashCode() {
    final int prime = 31;
    int result = super.hashCode();
    result = prime * result + ((term == null) ? 0 : term.hashCode());
    return result;
}
method: org.apache.lucene.search.Query.hashCode()I1
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + Float.floatToIntBits(boost);
    return result;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceMergeHandler.getOperation()org.eclipse.team.ui.mapping.SynchronizationOperation;1
protected synchronized SynchronizationOperation getOperation() {
    if (operation == null) {
        operation = new  ResourceModelProviderOperation(getConfiguration(), getStructuredSelection()) {

            public void execute(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                    IMergeContext context = (IMergeContext) getContext();
                    IDiff[] diffs = getTargetDiffs();
                    if (diffs.length == 0) {
                        promptForNoChanges();
                    }
                    IStatus status = context.merge(diffs, overwrite, monitor);
                    if (!status.isOK())
                        throw new  CoreException(status);
                } catch (CoreException e) {
                    throw new  InvocationTargetException(e);
                }
            }

            protected FastDiffFilter getDiffFilter() {
                return new  FastDiffFilter() {

                    public boolean select(IDiff node) {
                        if (node instanceof IThreeWayDiff) {
                            IThreeWayDiff twd = (IThreeWayDiff) node;
                            if ((twd.getDirection() == IThreeWayDiff.OUTGOING && overwrite) || twd.getDirection() == IThreeWayDiff.CONFLICTING || twd.getDirection() == IThreeWayDiff.INCOMING) {
                                return true;
                            }
                            return false;
                        }
                        return overwrite;
                    }
                };
            }

            protected String getJobName() {
                IDiff[] diffs = getTargetDiffs();
                if (overwrite) {
                    if (diffs.length == 1)
                        return TeamUIMessages.ResourceMergeHandler_0;
                    return NLS.bind(TeamUIMessages.ResourceMergeHandler_1, new  Integer(diffs.length).toString());
                }
                if (diffs.length == 1)
                    return TeamUIMessages.ResourceMergeHandler_2;
                return NLS.bind(TeamUIMessages.ResourceMergeHandler_3, new  Integer(diffs.length).toString());
            }
        };
    }
    return operation;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.ui.editor.sections.DSPropertiesSection.createPropertyElement()org.eclipse.pde.internal.ds.core.IDSProperty;1
private IDSProperty createPropertyElement() {
    IDSDocumentFactory factory = getDSModel().getFactory();
    IDSProperty property = factory.createProperty();
    return property;
}
method: org.eclipse.pde.internal.ds.core.text.DSModel.getFactory()org.eclipse.pde.internal.ds.core.IDSDocumentFactory;1
public IDSDocumentFactory getFactory() {
    if (fFactory == null) {
        fFactory = new  DSDocumentFactory(this);
    }
    return fFactory;
}

---------------Library-------------------
method: org.eclipse.jface.resource.AbstractResourceManager.find(org.eclipse.jface.resource.DeviceResourceDescriptor;)java.lang.Object;2
@Override
public Object find(DeviceResourceDescriptor descriptor) {
    if (map == null) {
        return null;
    }
    RefCount refCount = map.get(descriptor);
    if (refCount == null)
        return null;
    return refCount.resource;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.dom.rewrite.ASTRewriteAnalyzer.getEditGroup(org.eclipse.jdt.internal.core.dom.rewrite.RewriteEvent;)org.eclipse.text.edits.TextEditGroup;2
final TextEditGroup getEditGroup(RewriteEvent change) {
    return this.eventStore.getEventEditGroup(change);
}
method: org.eclipse.jdt.internal.core.dom.rewrite.RewriteEventStore.getEventEditGroup(org.eclipse.jdt.internal.core.dom.rewrite.RewriteEvent;)org.eclipse.text.edits.TextEditGroup;2
public TextEditGroup getEventEditGroup(RewriteEvent event) {
    if (this.editGroups == null) {
        return null;
    }
    return (TextEditGroup) this.editGroups.get(event);
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.SelectPerspectiveDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    okButton = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);
    createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
    updateButtons();
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.site.NewArchiveDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
protected void createButtonsForButtonBar(Composite parent) {
    super.createButtonsForButtonBar(parent);
    dialogChanged();
}
method: org.eclipse.jface.dialogs.StatusDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    fOkButton = createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);
    createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.util.TarEntry.clone()java.lang.Object;1
@Override
public Object clone() {
    TarEntry entry = new  TarEntry(this.name, this.filepos);
    entry.setFileType(this.type);
    entry.setMode(this.mode);
    entry.setSize(this.size);
    entry.setTime(this.time);
    return entry;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.IntroduceIndirectionRefactoring.updateIntermediaryVisibility(org.eclipse.jdt.internal.corext.refactoring.code.IntroduceIndirectionRefactoring$NoOverrideProgressMonitor;)org.eclipse.ltk.core.refactoring.RefactoringStatus;2
private RefactoringStatus updateIntermediaryVisibility(NoOverrideProgressMonitor monitor) throws JavaModelException {
    return rewriteVisibility(fIntermediaryAdjustments, fRewrites, monitor);
}
method: org.eclipse.jdt.internal.corext.refactoring.code.IntroduceIndirectionRefactoring.rewriteVisibility(java.util.Map;java.util.Map;org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.ltk.core.refactoring.RefactoringStatus;4
private RefactoringStatus rewriteVisibility(Map<IMember, IncomingMemberVisibilityAdjustment> adjustments, Map<ICompilationUnit, CompilationUnitRewrite> rewrites, IProgressMonitor monitor) throws JavaModelException {
    RefactoringStatus status = new  RefactoringStatus();
    fAdjustor.setRewrites(rewrites);
    fAdjustor.setAdjustments(adjustments);
    fAdjustor.setStatus(status);
    fAdjustor.rewriteVisibility(monitor);
    return status;
}

---------------Library-------------------
method: org.eclipse.pde.ui.launcher.TestTab.updateRunInUIThreadGroup(org.eclipse.debug.core.ILaunchConfiguration;)V2
private void updateRunInUIThreadGroup(ILaunchConfiguration config) {
    boolean shouldRunInUIThread = true;
    try {
        shouldRunInUIThread = config.getAttribute(IPDELauncherConstants.RUN_IN_UI_THREAD, true);
    } catch (CoreException ce) {
    }
    runInUIThread.setSelection(shouldRunInUIThread);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.team.internal.core.RepositoryProviderManager.providerUnmapped(org.eclipse.core.resources.IProject;)V2
public void providerUnmapped(IProject project) {
    Object[] allListeners = listeners.getListeners();
    for (int i = 0; i < allListeners.length; i++) {
        IRepositoryProviderListener listener = (IRepositoryProviderListener) allListeners[i];
        listener.providerUnmapped(project);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.partPropertyChanged(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void partPropertyChanged(PropertyChangeEvent event) {
    firePartPropertyChange(event);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.firePartPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void firePartPropertyChange(PropertyChangeEvent event) {
    Object[] l = partChangeListeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        ((IPropertyChangeListener) l[i]).propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.ConvertLineDelimitersAction$2$1.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent event) {
    fStrictCheckIfTextLocation = button.getSelection();
    refresh();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doUpdateUI()V1
protected void doUpdateUI() {
    fBuildPathDialogField.refresh();
    fClassPathList.refresh();
    doStatusLineUpdate();
}
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doStatusLineUpdate()V1
private void doStatusLineUpdate() {
    if (Display.getCurrent() != null) {
        IStatus res = findMostSevereStatus();
        fContext.statusChanged(res);
    }
}

---------------Library-------------------
method: org.eclipse.equinox.p2.query.QueryUtil.createPipeQuery(org.eclipse.equinox.p2.query.IQuery;org.eclipse.equinox.p2.query.IQuery;)org.eclipse.equinox.p2.query.IQuery;2
public static <T> IQuery<T> createPipeQuery(IQuery<? extends T> query1, IQuery<? extends T> query2) {
    ArrayList<IQuery<? extends T>> queries = new  ArrayList<IQuery<? extends T>>(2);
    queries.add(query1);
    queries.add(query2);
    return createPipeQuery(queries);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;2
public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T> first, org.hamcrest.Matcher<? super T> second) {
    return org.hamcrest.core.AnyOf.<T>anyOf(first, second);
}
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;2
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    return anyOf(matchers);
}

---------------Library-------------------
method: org.apache.lucene.analysis.payloads.IntegerEncoder.encode(ACII)org.apache.lucene.index.Payload;4
public Payload encode(char[] buffer, int offset, int length) {
    Payload result = new  Payload();
    int payload = ArrayUtil.parseInt(buffer, offset, length);
    byte[] bytes = PayloadHelper.encodeInt(payload);
    result.setData(bytes);
    return result;
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.core.impl.engine.AbstractCSSEngine.parseStyleDeclaration(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSStyleDeclaration;2
@Override
public CSSStyleDeclaration parseStyleDeclaration(InputSource source) throws IOException {
    checkInputSource(source);
    CSSParser parser = makeCSSParser();
    CSSStyleDeclaration styleDeclaration = parser.parseStyleDeclaration(source);
    return styleDeclaration;
}
method: org.eclipse.e4.ui.css.core.impl.dom.parsers.AbstractCSSParser.parseStyleDeclaration(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSStyleDeclaration;2
@Override
public CSSStyleDeclaration parseStyleDeclaration(InputSource source) throws IOException {
    CSSStyleDeclarationImpl styleDeclaration = new  CSSStyleDeclarationImpl(null);
    parseStyleDeclaration(((styleDeclaration)), source);
    return styleDeclaration;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.director.ProfileChangeRequest.setProfileProperty(java.lang.String;java.lang.String;)V3
public void setProfileProperty(String key, String value) {
    if (propertiesToAdd == null)
        propertiesToAdd = new  HashMap<String, String>();
    propertiesToAdd.put(key, value);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_base(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_style_get_base(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_style_get_base(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jsch.internal.ui.UserValidationDialog.close()Z1
public boolean close() {
    if (keyLockImage != null) {
        keyLockImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.equinox.internal.frameworkadmin.equinox.EclipseLauncherParser.getPersistentDataLocation(java.util.List;java.net.URI;java.net.URI;org.eclipse.equinox.internal.provisional.frameworkadmin.LauncherData;)V5
private void getPersistentDataLocation(List<String> lines, URI osgiInstallArea, URI configArea, LauncherData launcherData) {
    if (launcherData.getFwPersistentDataLocation() == null) {
        launcherData.setFwPersistentDataLocation(URIUtil.toFile(configArea), ParserUtils.isArgumentSet(EquinoxConstants.OPTION_CLEAN, lines));
    }
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.editor.AntEditor.doSetSelection(org.eclipse.jface.viewers.ISelection;)V2
@Override
protected void doSetSelection(ISelection selection) {
    super.doSetSelection(selection);
    synchronizeOutlinePage(true);
}
method: org.eclipse.ant.internal.ui.editor.AntEditor.synchronizeOutlinePage(Z)V2
public void synchronizeOutlinePage(boolean checkIfOutlinePageActive) {
    if (getSelectionProvider() == null) {
        return;
    }
    AntElementNode node = getNode();
    synchronizeOutlinePage(node, checkIfOutlinePageActive);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.actions.variables.ChangeVariableValueInputDialog.validateInput()V1
protected void validateInput() {
    String errorMessage = null;
    if (validator != null) {
        errorMessage = validator.isValid(text.getText());
    }
    errorMessageLabel.setText(errorMessage == null ? IInternalDebugCoreConstants.EMPTY_STRING : errorMessage);
    okButton.setEnabled(errorMessage == null);
    errorMessageLabel.getParent().update();
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.CommentTemplateEditDialog.validateInput()V1
protected void validateInput() {
    String errorMessage = null;
    if (validator != null) {
        errorMessage = validator.isValid(text.getText());
    }
    setErrorMessage(errorMessage);
}
method: org.eclipse.team.internal.ccvs.ui.CommentTemplateEditDialog.setErrorMessage(java.lang.String;)V2
public void setErrorMessage(String errorMessage) {
    errorMessageText.setText(errorMessage == null ? "" : errorMessage);
    okButton.setEnabled(errorMessage == null);
    errorMessageText.getParent().update();
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TreeItem.getForeground()org.eclipse.swt.graphics.Color;1
public Color getForeground() {
    checkWidget();
    if (!parent.checkData(this))
        error(SWT.ERROR_WIDGET_DISPOSED);
    return _getForeground();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getExtraIndentAfterNewLine()java.lang.String;1
private String getExtraIndentAfterNewLine() {
    int formatterContinuationIndentationSize = getContinuationIndentationSize();
    int binaryAlignmentValue = getBinaryOperatorAlignmentStyle();
    int indentSize = formatterContinuationIndentationSize;
    if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_BY_ONE) {
        indentSize = 1;
    } else if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_ON_COLUMN) {
    }
    return CodeFormatterUtil.createIndentString(indentSize, fProject);
}
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getBinaryOperatorAlignmentStyle()I1
private int getBinaryOperatorAlignmentStyle() {
    String binaryAlignmentValue = getCoreFormatterOption(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_BINARY_EXPRESSION);
    return DefaultCodeFormatterConstants.getIndentStyle(binaryAlignmentValue);
}

---------------Library-------------------
method: org.eclipse.ui.internal.layout.CellLayout.setMargins(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellLayout;2
public CellLayout setMargins(Point newMargins) {
    marginWidth = newMargins.x;
    marginHeight = newMargins.y;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.ui.dialogs.YesNoCancelListSelectionDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    createButton(parent, IDialogConstants.YES_ID, IDialogConstants.YES_LABEL, true);
    createButton(parent, IDialogConstants.NO_ID, IDialogConstants.NO_LABEL, false);
    createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.SuperInterfaceSelectionDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    createButton(parent, ADD_ID, NewWizardMessages.SuperInterfaceSelectionDialog_addButton_label, true);
    super.createButtonsForButtonBar(parent);
}
method: org.eclipse.ui.dialogs.SelectionDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);
    createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
}

---------------Library-------------------
method: org.eclipse.ui.internal.views.ViewsPlugin.getViewImageDescriptor(java.lang.String;)org.eclipse.jface.resource.ImageDescriptor;1
public static ImageDescriptor getViewImageDescriptor(String relativePath) {
    return imageDescriptorFromPlugin(PLUGIN_ID, ICONS_PATH + relativePath);
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.WidgetDelegatingValueProperty.observeDelayed(ILorg.eclipse.swt.widgets.Widget;)org.eclipse.jface.databinding.swt.ISWTObservableValue;3
public ISWTObservableValue observeDelayed(int delay, Widget widget) {
    return SWTObservables.observeDelayedValue(delay, observe(widget));
}
method: org.eclipse.jface.databinding.swt.SWTObservables.observeDelayedValue(ILorg.eclipse.jface.databinding.swt.ISWTObservableValue;)org.eclipse.jface.databinding.swt.ISWTObservableValue;2
public static ISWTObservableValue observeDelayedValue(int delay, ISWTObservableValue observable) {
    return new  SWTDelayedObservableValueDecorator(Observables.observeDelayedValue(delay, observable), observable.getWidget());
}

---------------Library-------------------
method: org.eclipse.jdt.core.dom.AnnotationBinding.getKey()java.lang.String;1
public String getKey() {
    if (this.key == null) {
        String recipientKey = getRecipientKey();
        this.key = new  String(this.binding.computeUniqueKey(recipientKey.toCharArray()));
    }
    return this.key;
}
---------------Client-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTab.getUpdateJob()org.eclipse.core.runtime.jobs.Job;1
private Job getUpdateJob() {
    if (fRereshJob == null) {
        fRereshJob = createUpdateJob();
        fRereshJob.setSystem(true);
    }
    return fRereshJob;
}
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTab.createUpdateJob()org.eclipse.core.runtime.jobs.Job;1
protected Job createUpdateJob() {
    return new  WorkbenchJob(getControl().getDisplay(), "Update LCD") {

        @Override
        public IStatus runInUIThread(IProgressMonitor monitor) {
            if (!getControl().isDisposed()) {
                updateLaunchConfigurationDialog();
            }
            return Status.OK_STATUS;
        }

        @Override
        public boolean shouldRun() {
            return !getControl().isDisposed();
        }
    };
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.dtd.schema.Nfm.getQuestion(org.eclipse.ant.internal.ui.dtd.schema.Nfm;)org.eclipse.ant.internal.ui.dtd.schema.Nfm;1
public static Nfm getQuestion(Nfm x) {
    Nfm tmp = nfm(x);
    tmp.start.next2 = tmp.stop;
    free(x);
    return tmp;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.lookup.BlockScope.problemReporter()org.eclipse.jdt.internal.compiler.problem.ProblemReporter;1
public ProblemReporter problemReporter() {
    return methodScope().problemReporter();
}
method: org.eclipse.jdt.internal.compiler.lookup.MethodScope.problemReporter()org.eclipse.jdt.internal.compiler.problem.ProblemReporter;1
public ProblemReporter problemReporter() {
    ProblemReporter problemReporter = referenceCompilationUnit().problemReporter;
    problemReporter.referenceContext = this.referenceContext;
    return problemReporter;
}

---------------Library-------------------
method: org.eclipse.ui.part.MultiPageEditor.sync()V1
protected void sync() {
    if (syncVector != null) {
        Iterator itr = syncVector.iterator();
        while (itr.hasNext()) {
            PageBook pageBook = (PageBook) itr.next();
            syncPageBook(pageBook);
        }
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.dialogs.ProjectLinkedResourcePage$1.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent e) {
    TabFolder source = (TabFolder) e.getSource();
    if (source.getSelectionIndex() == 1)
        switchToLinkedResources();
    else
        switchToPathVariables();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.viewsupport.ColoredViewersManager$1.run()V1
public void run() {
    updateAllViewers();
}
method: org.eclipse.jdt.internal.ui.viewsupport.ColoredViewersManager.updateAllViewers()V1
protected final void updateAllViewers() {
    for (Iterator<ColoringLabelProvider> iterator = fManagedLabelProviders.iterator(); iterator.hasNext(); ) {
        ColoringLabelProvider lp = iterator.next();
        lp.update();
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_rc_style_set_text(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_rc_style_set_text(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_rc_style_set_text(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.bundle.ImportPackageHeader.addPackage(java.lang.String;)org.eclipse.pde.internal.core.text.bundle.ImportPackageObject;2
public ImportPackageObject addPackage(String id) {
    ImportPackageObject obj = new  ImportPackageObject(this, id, null, getVersionAttribute());
    addManifestElement(obj);
    return obj;
}
---------------Client-------------------
method: org.eclipse.jdt.launching.JavaRuntime.newRuntimeContainerClasspathEntry(org.eclipse.core.runtime.IPath;I)org.eclipse.jdt.launching.IRuntimeClasspathEntry;2
public static IRuntimeClasspathEntry newRuntimeContainerClasspathEntry(IPath path, int classpathProperty) throws CoreException {
    return newRuntimeContainerClasspathEntry(path, classpathProperty, null);
}
method: org.eclipse.jdt.launching.JavaRuntime.newRuntimeContainerClasspathEntry(org.eclipse.core.runtime.IPath;ILorg.eclipse.jdt.core.IJavaProject;)org.eclipse.jdt.launching.IRuntimeClasspathEntry;3
public static IRuntimeClasspathEntry newRuntimeContainerClasspathEntry(IPath path, int classpathProperty, IJavaProject project) throws CoreException {
    RuntimeClasspathEntry entry = new  RuntimeClasspathEntry(JavaCore.newContainerEntry(path), classpathProperty);
    entry.setJavaProject(project);
    return entry;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.preferences.IgnorePreferencePage$4.createDialogArea(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Control;2
protected Control createDialogArea(Composite parent) {
    Control control = super.createDialogArea(parent);
    PlatformUI.getWorkbench().getHelpSystem().setHelp(control, IHelpContextIds.IGNORE_PREFERENCE_PAGE);
    return control;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;3
protected String getTemplate(String name, ICompilationUnit parentCU) {
    return getTemplate(name, parentCU, 0);
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;I)java.lang.String;4
protected String getTemplate(String name, ICompilationUnit parentCU, int pos) {
    try {
        Template template = JavaPlugin.getDefault().getTemplateStore().findTemplate(name);
        if (template != null) {
            return JavaContext.evaluateTemplate(template, parentCU, pos);
        }
    } catch (CoreException e) {
        JavaPlugin.log(e);
    } catch (BadLocationException e) {
        JavaPlugin.log(e);
    } catch (TemplateException e) {
        JavaPlugin.log(e);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_window_move(JII)V3
public static final void gdk_window_move(long window, int x, int y) {
    lock.lock();
    try {
        _gdk_window_move(window, x, y);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.objectweb.asm.ClassVisitor.visitInnerClass(java.lang.String;java.lang.String;java.lang.String;I)V5
public void visitInnerClass(String name, String outerName, String innerName, int access) {
    if (cv != null) {
        cv.visitInnerClass(name, outerName, innerName, access);
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.TypeStructureBuilder$TypeNameFinderInConstructor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
@Override
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    super.visitFieldInsn(opcode, owner, name, desc);
}
method: org.objectweb.asm.MethodVisitor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    if (mv != null) {
        mv.visitFieldInsn(opcode, owner, name, desc);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnRealBlockStack(I)V2
protected void pushOnRealBlockStack(int i) {
    int stackLength = this.realBlockStack.length;
    if (++this.realBlockPtr >= stackLength) {
        System.arraycopy(this.realBlockStack, 0, this.realBlockStack = new int[stackLength + StackIncrement], 0, stackLength);
    }
    this.realBlockStack[this.realBlockPtr] = i;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.consumeEmptyTypeArguments()V1
protected void consumeEmptyTypeArguments() {
    pushOnGenericsLengthStack(0);
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnGenericsLengthStack(I)V2
protected void pushOnGenericsLengthStack(int pos) {
    int stackLength = this.genericsLengthStack.length;
    if (++this.genericsLengthPtr >= stackLength) {
        System.arraycopy(this.genericsLengthStack, 0, this.genericsLengthStack = new int[stackLength + GenericsStackIncrement], 0, stackLength);
    }
    this.genericsLengthStack[this.genericsLengthPtr] = pos;
}

---------------Library-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab$10.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent e) {
    StringVariableSelectionDialog dialog = new  StringVariableSelectionDialog(getShell());
    dialog.open();
    String variable = dialog.getVariableExpression();
    if (variable != null) {
        fFileText.insert(variable);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.target.TargetDefinitionContentPage$16.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent e) {
    StringVariableSelectionDialog dialog = new  StringVariableSelectionDialog(getShell());
    dialog.open();
    String variable = dialog.getVariableExpression();
    if (variable != null) {
        textControl.insert(variable);
    }
}
method: org.eclipse.jface.wizard.WizardPage.getShell()org.eclipse.swt.widgets.Shell;1
@Override
public Shell getShell() {
    IWizardContainer container = getContainer();
    if (container == null) {
        return null;
    }
    return container.getShell();
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.dtd.schema.Nfm.getPlus(org.eclipse.ant.internal.ui.dtd.schema.Nfm;)org.eclipse.ant.internal.ui.dtd.schema.Nfm;1
public static Nfm getPlus(Nfm x) {
    x.stop.next2 = x.start;
    Nfm tmp = nfm(x);
    free(x);
    return tmp;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.lookup.BlockScope.problemReporter()org.eclipse.jdt.internal.compiler.problem.ProblemReporter;1
public ProblemReporter problemReporter() {
    return methodScope().problemReporter();
}
method: org.eclipse.jdt.internal.compiler.lookup.MethodScope.problemReporter()org.eclipse.jdt.internal.compiler.problem.ProblemReporter;1
public ProblemReporter problemReporter() {
    ProblemReporter problemReporter = referenceCompilationUnit().problemReporter;
    problemReporter.referenceContext = this.referenceContext;
    return problemReporter;
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.getColor(java.lang.String;)org.eclipse.swt.graphics.Color;2
private Color getColor(String key) {
    if (fPreferenceStore != null) {
        RGB rgb = PreferenceConverter.getColor(fPreferenceStore, key);
        return getColor(rgb);
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.jface.internal.text.source.DiffPainter.getDisplayCharacter(I)java.lang.String;2
public String getDisplayCharacter(int line) {
    return getDisplayCharacter(getDiffInfo(line));
}
method: org.eclipse.jface.internal.text.source.DiffPainter.getDiffInfo(I)org.eclipse.jface.text.source.ILineDiffInfo;2
private ILineDiffInfo getDiffInfo(int line) {
    if (fLineDiffer != null)
        return fLineDiffer.getLineInfo(line);
    return null;
}

---------------Library-------------------
method: org.eclipse.jface.window.ToolTip.setData(java.lang.String;java.lang.Object;)V3
public void setData(String key, Object value) {
    if (data == null) {
        data = new  HashMap<String, Object>();
    }
    data.put(key, value);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.target.ExportTargetJob.getCapability(org.eclipse.equinox.p2.metadata.IInstallableUnit;java.lang.String;)java.lang.String;3
private String getCapability(IInstallableUnit iu, String namespace) {
    for (Iterator<?> i = iu.getProvidedCapabilities().iterator(); i.hasNext(); ) {
        IProvidedCapability capability = (IProvidedCapability) i.next();
        if (capability.getNamespace().equals(namespace))
            return capability.getName();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.e4.ui.internal.workbench.XMLModelReconciler.getStructuralFeature(org.eclipse.emf.ecore.EObject;java.lang.String;)org.eclipse.emf.ecore.EStructuralFeature;2
private static EStructuralFeature getStructuralFeature(EObject object, String featureName) {
    for (EStructuralFeature sf : object.eClass().getEAllStructuralFeatures()) {
        if (sf.getName().equals(featureName)) {
            return sf;
        }
    }
    return null;
}
method: org.eclipse.emf.ecore.impl.ENamedElementImpl.getName()java.lang.String;1
public String getName() {
    return getNameGen();
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.schema.SchemaJavaAttributeDetails.doOpenSelectionDialog(ILorg.eclipse.pde.internal.ui.parts.FormEntry;)V3
private void doOpenSelectionDialog(int scopeType, FormEntry entry) {
    try {
        String filter = entry.getValue();
        filter = filter.substring(filter.lastIndexOf(".") + 1);
        SelectionDialog dialog = JavaUI.createTypeDialog(PDEPlugin.getActiveWorkbenchShell(), PlatformUI.getWorkbench().getProgressService(), SearchEngine.createWorkspaceScope(), scopeType, false, filter);
        dialog.setTitle(PDEUIMessages.GeneralInfoSection_selectionTitle);
        if (dialog.open() == Window.OK) {
            IType type = (IType) dialog.getResult()[0];
            entry.setValue(type.getFullyQualifiedName('$'));
            entry.commit();
        }
    } catch (CoreException e) {
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.ui.wizards.DSFileWizardPage$4.doOpenSelectionDialog(ILorg.eclipse.swt.widgets.Text;)V3
private void doOpenSelectionDialog(int scopeType, Text entry) {
    try {
        String filter = entry.getText();
        filter = filter.substring(filter.lastIndexOf(".") + 1);
        SelectionDialog dialog = JavaUI.createTypeDialog(Activator.getActiveWorkbenchShell(), PlatformUI.getWorkbench().getProgressService(), SearchEngine.createWorkspaceScope(), scopeType, false, filter);
        dialog.setTitle(Messages.DSFileWizardPage_selectType);
        if (dialog.open() == Window.OK) {
            IType type = (IType) dialog.getResult()[0];
            entry.setText(type.getFullyQualifiedName('$'));
        }
    } catch (CoreException e) {
        Activator.logException(e);
    }
}
method: org.eclipse.pde.internal.ds.ui.Activator.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_window_resize(JII)V3
public static final void gdk_window_resize(long window, int width, int height) {
    lock.lock();
    try {
        _gdk_window_resize(window, width, height);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.target.EditTargetNode.getWizard()org.eclipse.jface.wizard.IWizard;1
public IWizard getWizard() {
    if (fWizard == null) {
        fWizard = new  EditTargetDefinitionWizard(fDefinition, false);
        fWizard.setWindowTitle(PDEUIMessages.EditTargetNode_0);
    }
    return fWizard;
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.filters.UpdateActiveFiltersOperation.execute(org.eclipse.core.runtime.IProgressMonitor;org.eclipse.core.runtime.IAdaptable;)org.eclipse.core.runtime.IStatus;3
public IStatus execute(IProgressMonitor monitor, IAdaptable info) {
    contentService.getFilterService().activateFilterIdsAndUpdateViewer(filterIdsToActivate);
    return Status.OK_STATUS;
}
method: org.eclipse.ui.internal.navigator.NavigatorContentService.getFilterService()org.eclipse.ui.navigator.INavigatorFilterService;1
public INavigatorFilterService getFilterService() {
    if (navigatorFilterService == null) {
        navigatorFilterService = new  NavigatorFilterService(this);
    }
    return navigatorFilterService;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.callhierarchy.CallHierarchy.parseList(java.lang.String;)Aorg.eclipse.jdt.internal.ui.util.StringMatcher;1
private static StringMatcher[] parseList(String listString) {
    List<StringMatcher> list = new  ArrayList<StringMatcher>(10);
    StringTokenizer tokenizer = new  StringTokenizer(listString, ",");
    while (tokenizer.hasMoreTokens()) {
        String textFilter = tokenizer.nextToken().trim();
        list.add(new  StringMatcher(textFilter, false, false));
    }
    return list.toArray(new StringMatcher[list.size()]);
}
---------------Client-------------------
method: org.eclipse.ui.internal.BrandingProperties.getURLs(java.lang.String;org.osgi.framework.Bundle;)Ajava.net.URL;2
public static URL[] getURLs(String value, Bundle definingBundle) {
    if (value == null) {
        return null;
    }
    StringTokenizer tokens = new  StringTokenizer(value, ",");
    ArrayList array = new  ArrayList(10);
    while (tokens.hasMoreTokens()) {
        array.add(getUrl(tokens.nextToken().trim(), definingBundle));
    }
    return (URL[]) array.toArray(new URL[array.size()]);
}
method: org.eclipse.ui.internal.BrandingProperties.getUrl(java.lang.String;org.osgi.framework.Bundle;)java.net.URL;2
public static URL getUrl(String value, Bundle definingBundle) {
    try {
        if (value != null) {
            return new  URL(value);
        }
    } catch (MalformedURLException e) {
        if (definingBundle != null) {
            return Platform.find(definingBundle, new  Path(value));
        }
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.ltk.ui.refactoring.RefactoringWizard.performCancel()Z1
public boolean performCancel() {
    if (fChange != null)
        fChange.dispose();
    return super.performCancel();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.hashCode()I1
public int hashCode() {
    return resource().hashCode();
}
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.resource()org.eclipse.core.resources.IResource;1
public IResource resource() {
    if (this.resource != null)
        return this.resource;
    return super.resource();
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.SWTFactory.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;I)org.eclipse.swt.widgets.Button;4
public static Button createPushButton(Composite parent, String label, Image image, int fill) {
    Button button = new  Button(parent, SWT.PUSH);
    button.setFont(parent.getFont());
    if (image != null) {
        button.setImage(image);
    }
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData(fill);
    button.setLayoutData(gd);
    setButtonDimensionHint(button);
    return button;
}
---------------Client-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTab.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;)org.eclipse.swt.widgets.Button;4
protected Button createPushButton(Composite parent, String label, Image image) {
    return SWTFactory.createPushButton(parent, label, image);
}
method: org.eclipse.debug.internal.ui.SWTFactory.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;)org.eclipse.swt.widgets.Button;3
public static Button createPushButton(Composite parent, String label, Image image) {
    Button button = new  Button(parent, SWT.PUSH);
    button.setFont(parent.getFont());
    if (image != null) {
        button.setImage(image);
    }
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData();
    button.setLayoutData(gd);
    setButtonDimensionHint(button);
    return button;
}

---------------Library-------------------
method: org.eclipse.core.internal.databinding.observable.masterdetail.SetDetailValueObservableMap.dispose()V1
public synchronized void dispose() {
    super.dispose();
    observableValueFactory = null;
    detailObservableValueMap = null;
    detailStaleListener = null;
    staleDetailObservables = null;
}
---------------Client-------------------
method: org.eclipse.swt.widgets.TableItem.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    font = null;
    cellFont = null;
}
method: org.eclipse.swt.widgets.Item.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    text = null;
    image = null;
}

---------------Library-------------------
method: org.eclipse.ui.part.PageSite.deactivate()V1
@Override
public void deactivate() {
    active = false;
    if (contextService != null) {
        contextService.deactivate();
    }
    serviceLocator.deactivate();
}
---------------Client-------------------
method: org.eclipse.ui.internal.console.PinConsoleAction.run()V1
@Override
public void run() {
    fView.setPinned(isChecked());
}
method: org.eclipse.ui.internal.console.ConsoleView.setPinned(Z)V2
@Override
public void setPinned(boolean pin) {
    fPinned = pin;
    if (fPinAction != null) {
        fPinAction.update();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.java.AnonymousTypeProposalInfo.resolveMember()org.eclipse.jdt.core.IMember;1
@Override
protected IMember resolveMember() throws JavaModelException {
    char[] signature = fProposal.getDeclarationSignature();
    String typeName = SignatureUtil.stripSignatureToFQN(String.valueOf(signature));
    return fJavaProject.findType(typeName);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.nullInfoLessUnconditionalCopy()org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;1
public UnconditionalFlowInfo nullInfoLessUnconditionalCopy() {
    return unconditionalInitsWithoutSideEffect().nullInfoLessUnconditionalCopy();
}
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.unconditionalInitsWithoutSideEffect()org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;1
public UnconditionalFlowInfo unconditionalInitsWithoutSideEffect() {
    return this.initsWhenTrue.unconditionalCopy().mergedWith(this.initsWhenFalse.unconditionalInits());
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TableColumn.releaseHandle()V1
@Override
void releaseHandle() {
    super.releaseHandle();
    handle = buttonHandle = labelHandle = imageHandle = 0;
    modelIndex = -1;
    parent = null;
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Button.releaseHandle()V1
@Override
void releaseHandle() {
    super.releaseHandle();
    boxHandle = imageHandle = labelHandle = arrowHandle = 0;
}
method: org.eclipse.swt.widgets.Control.releaseHandle()V1
@Override
void releaseHandle() {
    super.releaseHandle();
    fixedHandle = 0;
    parent = null;
}

---------------Library-------------------
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;6
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth, Matcher<? super T> sixth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(6);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    matchers.add(sixth);
    return allOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;6
public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third, org.hamcrest.Matcher<? super T> fourth, org.hamcrest.Matcher<? super T> fifth, org.hamcrest.Matcher<? super T> sixth) {
    return org.hamcrest.core.AnyOf.<T>anyOf(first, second, third, fourth, fifth, sixth);
}
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;6
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth, Matcher<? super T> sixth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    matchers.add(sixth);
    return anyOf(matchers);
}

---------------Library-------------------
method: org.eclipse.osgi.internal.debug.FrameworkDebugOptions.start(org.osgi.framework.BundleContext;)V2
public void start(BundleContext bc) {
    this.context = bc;
    listenerTracker = new  ServiceTracker<DebugOptionsListener, DebugOptionsListener>(bc, DebugOptionsListener.class.getName(), this);
    listenerTracker.open();
}
---------------Client-------------------
method: org.apache.felix.gogo.shell.Activator.start(org.osgi.framework.BundleContext;)V2
public void start(final BundleContext ctxt) throws Exception {
    context = ctxt;
    commandProcessorTracker = processorTracker();
}
method: org.apache.felix.gogo.shell.Activator.processorTracker()org.osgi.util.tracker.ServiceTracker;1
private ServiceTracker processorTracker() {
    ServiceTracker t = new  ServiceTracker(context, CommandProcessor.class.getName(), null) {

        @Override
        public Object addingService(ServiceReference reference) {
            CommandProcessor processor = (CommandProcessor) super.addingService(reference);
            startShell(context, processor);
            return processor;
        }

        @Override
        public void removedService(ServiceReference reference, Object service) {
            if (thread != null) {
                thread.interrupt();
            }
            super.removedService(reference, service);
        }
    };
    t.open();
    return t;
}

---------------Library-------------------
method: org.eclipse.ui.internal.forms.widgets.TitleRegion.addDragSupport(org.eclipse.swt.widgets.Control;IAorg.eclipse.swt.dnd.Transfer;org.eclipse.swt.dnd.DragSourceListener;)org.eclipse.swt.dnd.DragSource;5
private DragSource addDragSupport(Control control, int operations, Transfer[] transferTypes, DragSourceListener listener) {
    DragSource source = new  DragSource(control, operations);
    source.setTransfer(transferTypes);
    source.addDragListener(listener);
    source.setDragSourceEffect(new  DragSourceEffect(control) {

        public void dragStart(DragSourceEvent event) {
            event.image = createDragEffectImage();
        }
    });
    return source;
}
---------------Client-------------------
method: org.eclipse.team.core.mapping.provider.SynchronizationScopeManager.getUncoveredTraversals(Aorg.eclipse.core.resources.mapping.ResourceTraversal;Aorg.eclipse.core.resources.mapping.ResourceTraversal;)Aorg.eclipse.core.resources.mapping.ResourceTraversal;3
private ResourceTraversal[] getUncoveredTraversals(ResourceTraversal[] newTraversals, ResourceTraversal[] previousTraversals) {
    CompoundResourceTraversal t = new  CompoundResourceTraversal();
    t.addTraversals(newTraversals);
    return t.getUncoveredTraversals(previousTraversals);
}
method: org.eclipse.team.internal.core.mapping.CompoundResourceTraversal.getUncoveredTraversals(Aorg.eclipse.core.resources.mapping.ResourceTraversal;)Aorg.eclipse.core.resources.mapping.ResourceTraversal;2
public synchronized ResourceTraversal[] getUncoveredTraversals(ResourceTraversal[] traversals) {
    CompoundResourceTraversal other = new  CompoundResourceTraversal();
    other.addTraversals(traversals);
    return getUncoveredTraversals(other);
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.ImportWizard.addPages()V1
@Override
public void addPages() {
    addPage(new  SelectionPage(this.workbench, this.selection, getAvailableImportWizards(), WorkbenchMessages.ImportWizard_selectSource));
}
---------------Client-------------------
method: org.eclipse.ui.progress.DeferredTreeContentManager$5.add(Ajava.lang.Object;org.eclipse.core.runtime.IProgressMonitor;)V3
@Override
public void add(Object[] elements, IProgressMonitor monitor) {
    addChildren(parent, elements, monitor);
}
method: org.eclipse.ui.progress.DeferredTreeContentManager.addChildren(java.lang.Object;Ajava.lang.Object;org.eclipse.core.runtime.IProgressMonitor;)V4
protected void addChildren(final Object parent, final Object[] children, IProgressMonitor monitor) {
    WorkbenchJob updateJob = new  WorkbenchJob(ProgressMessages.DeferredTreeContentManager_AddingChildren) {

        @Override
        public IStatus runInUIThread(IProgressMonitor updateMonitor) {
            if (treeViewer.getControl().isDisposed() || updateMonitor.isCanceled()) {
                return Status.CANCEL_STATUS;
            }
            treeViewer.add(parent, children);
            return Status.OK_STATUS;
        }
    };
    updateJob.setSystem(true);
    updateJob.schedule();
}

---------------Library-------------------
method: org.eclipse.team.ui.mapping.SynchronizationActionProvider.setContext(org.eclipse.ui.actions.ActionContext;)V2
public void setContext(ActionContext context) {
    super.setContext(context);
    if (openWithActions != null)
        openWithActions.setContext(context);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.help.ui.internal.views.RenameDialog.setOldName(java.lang.String;)V2
public void setOldName(String oldName) {
    this.oldName = oldName;
    if (text != null)
        text.setText(oldName);
    this.newName = oldName;
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.renderings.AsyncVirtualContentTableViewer.setTopIndex(java.lang.Object;)V2
public void setTopIndex(Object key) {
    fPendingTopIndexKey = key;
    attemptSetTopIndex();
}
method: org.eclipse.debug.internal.ui.views.memory.renderings.AsyncVirtualContentTableViewer.attemptSetTopIndex()V1
protected synchronized void attemptSetTopIndex() {
    if (fPendingTopIndexKey != null) {
        Object remaining = doAttemptSetTopIndex(fPendingTopIndexKey);
        if (remaining == null) {
            fPendingTopIndexKey = remaining;
        }
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.GeneralInfoSection.addListeners()V1
protected void addListeners() {
    IBaseModel model = getPage().getModel();
    if (model instanceof IModelChangeProvider)
        ((IModelChangeProvider) model).addModelChangedListener(this);
}
---------------Client-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.OpenEvent;)V2
protected void handleOpen(OpenEvent event) {
    handleOpen(event.getSelection());
}
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.ISelection;)V2
protected void handleOpen(ISelection selection) {
    if (selection instanceof IStructuredSelection) {
        getActionGroup().runDefaultAction((IStructuredSelection) selection);
    }
}

---------------Library-------------------
method: org.eclipse.emf.ecore.impl.EPackageImpl.addEParameter(org.eclipse.emf.ecore.EOperation;org.eclipse.emf.ecore.EGenericType;java.lang.String;II)V6
@Deprecated
protected void addEParameter(EOperation owner, EGenericType type, String name, int lowerBound, int upperBound) {
    EParameter p = ecoreFactory.createEParameter();
    p.setEGenericType(type);
    p.setName(name);
    owner.getEParameters().add(p);
    p.setLowerBound(lowerBound);
    p.setUpperBound(upperBound);
}
---------------Client-------------------
method: org.eclipse.emf.ecore.impl.EPackageImpl.addEParameter(org.eclipse.emf.ecore.EOperation;org.eclipse.emf.ecore.EClassifier;java.lang.String;II)V6
protected void addEParameter(EOperation owner, EClassifier type, String name, int lowerBound, int upperBound) {
    EParameter p = internalAddEParameter(owner, type, name);
    p.setLowerBound(lowerBound);
    p.setUpperBound(upperBound);
}
method: org.eclipse.emf.ecore.impl.EPackageImpl.internalAddEParameter(org.eclipse.emf.ecore.EOperation;org.eclipse.emf.ecore.EClassifier;java.lang.String;)org.eclipse.emf.ecore.EParameter;4
private EParameter internalAddEParameter(EOperation owner, EClassifier type, String name) {
    EParameter p = ecoreFactory.createEParameter();
    p.setEType(type);
    p.setName(name);
    owner.getEParameters().add(p);
    return p;
}

---------------Library-------------------
method: org.eclipse.compare.internal.CompareEditor.dispose()V1
public void dispose() {
    IEditorInput input = getEditorInput();
    if (input instanceof IPropertyChangeNotifier)
        ((IPropertyChangeNotifier) input).removePropertyChangeListener(this);
    super.dispose();
}
---------------Client-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.OpenEvent;)V2
protected void handleOpen(OpenEvent event) {
    handleOpen(event.getSelection());
}
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.ISelection;)V2
protected void handleOpen(ISelection selection) {
    if (selection instanceof IStructuredSelection) {
        getActionGroup().runDefaultAction((IStructuredSelection) selection);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.builders.BundleErrorReporter.containsPackage(org.eclipse.pde.internal.core.builders.IHeader;java.lang.String;)Z3
private boolean containsPackage(IHeader header, String name) {
    if (header != null) {
        ManifestElement[] elements = header.getElements();
        for (int i = 0; i < elements.length; i++) {
            if (elements[i].getValue().equals(name))
                return true;
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.update.ThreadEventHandler.indexOf(org.eclipse.debug.core.model.IStackFrame;)I2
protected int indexOf(IStackFrame frame) {
    try {
        return indexOf(frame.getThread().getStackFrames(), frame);
    } catch (DebugException e) {
        return -1;
    }
}
method: org.eclipse.debug.internal.ui.viewers.update.DebugEventHandler.indexOf(Ajava.lang.Object;java.lang.Object;)I3
protected int indexOf(Object[] list, Object element) {
    for (int i = 0; i < list.length; i++) {
        if (element.equals(list[i])) {
            return i;
        }
    }
    return -1;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_editable_select_region(JII)V3
public static final void gtk_editable_select_region(long editable, int start, int end) {
    lock.lock();
    try {
        _gtk_editable_select_region(editable, start, end);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.CompilationUnit.getPackageDeclarations()Aorg.eclipse.jdt.core.IPackageDeclaration;1
public IPackageDeclaration[] getPackageDeclarations() throws JavaModelException {
    ArrayList list = getChildrenOfType(PACKAGE_DECLARATION);
    IPackageDeclaration[] array = new IPackageDeclaration[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.eclipse.ui.forms.FormColors.initialize()V1
protected void initialize() {
    background = display.getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    foreground = display.getSystemColor(SWT.COLOR_LIST_FOREGROUND);
    initializeColorTable();
    updateBorderColor();
}
---------------Client-------------------
method: org.eclipse.jetty.io.View.clear()V1
@Override
public void clear() {
    setMarkIndex(-1);
    setGetIndex(0);
    setPutIndex(_buffer.getIndex());
    setGetIndex(_buffer.getIndex());
}
method: org.eclipse.jetty.io.AbstractBuffer.setGetIndex(I)V2
public void setGetIndex(int getIndex) {
    _get = getIndex;
    _hash = 0;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.localstore.UnifiedTreeNode.reuse(org.eclipse.core.internal.localstore.UnifiedTree;org.eclipse.core.resources.IResource;org.eclipse.core.filesystem.IFileStore;org.eclipse.core.filesystem.IFileInfo;Z)V6
public void reuse(UnifiedTree aTree, IResource aResource, IFileStore aStore, IFileInfo info, boolean existsInWorkspace) {
    this.tree = aTree;
    this.child = null;
    this.resource = aResource;
    this.store = aStore;
    this.fileInfo = info;
    this.existsWorkspace = existsInWorkspace;
}
---------------Client-------------------
method: org.apache.lucene.index.SegmentInfo.setDocStore(ILjava.lang.String;Z)V4
void setDocStore(int offset, String segment, boolean isCompoundFile) {
    docStoreOffset = offset;
    docStoreSegment = segment;
    docStoreIsCompoundFile = isCompoundFile;
    clearFiles();
}
method: org.apache.lucene.index.SegmentInfo.clearFiles()V1
private void clearFiles() {
    files = null;
    sizeInBytesNoStore = -1;
    sizeInBytesWithStore = -1;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository.initialize(org.eclipse.equinox.p2.repository.metadata.spi.AbstractMetadataRepository$RepositoryState;)V2
public void initialize(RepositoryState state) {
    setName(state.Name);
    setType(state.Type);
    setVersion(state.Version.toString());
    setProvider(state.Provider);
    setDescription(state.Description);
    setLocation(state.Location);
    setProperties(state.Properties);
}
---------------Client-------------------
method: org.eclipse.debug.ui.WorkingDirectoryBlock.setOtherWorkingDirectoryText(java.lang.String;)V2
protected final void setOtherWorkingDirectoryText(String dir) {
    if (dir != null) {
        fOtherWorkingText.setText(dir);
        fUseDefaultDirButton.setSelection(false);
        fUseOtherDirButton.setSelection(true);
        handleUseOtherWorkingDirButtonSelected();
    }
}
method: org.eclipse.debug.ui.WorkingDirectoryBlock.handleUseOtherWorkingDirButtonSelected()V1
private void handleUseOtherWorkingDirButtonSelected() {
    fOtherWorkingText.setEnabled(true);
    fWorkspaceButton.setEnabled(true);
    fVariablesButton.setEnabled(true);
    fFileSystemButton.setEnabled(true);
    updateLaunchConfigurationDialog();
}

---------------Library-------------------
method: org.eclipse.core.commands.Command.addExecutionListener(org.eclipse.core.commands.IExecutionListener;)V2
public final void addExecutionListener(final IExecutionListener executionListener) {
    if (executionListener == null) {
        throw new  NullPointerException("Cannot add a null execution listener");
    }
    if (executionListeners == null) {
        executionListeners = new  ListenerList(ListenerList.IDENTITY);
    }
    executionListeners.add(executionListener);
}
---------------Client-------------------
method: org.eclipse.core.commands.Command.addCommandListener(org.eclipse.core.commands.ICommandListener;)V2
public final void addCommandListener(final ICommandListener commandListener) {
    if (commandListener == null) {
        throw new  NullPointerException("Cannot add a null command listener");
    }
    addListenerObject(commandListener);
}
method: org.eclipse.core.commands.common.EventManager.addListenerObject(java.lang.Object;)V2
protected final synchronized void addListenerObject(final Object listener) {
    if (listenerList == null) {
        listenerList = new  ListenerList(ListenerList.IDENTITY);
    }
    listenerList.add(listener);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.InstructionPointerContext.equals(java.lang.Object;)Z2
@Override
public boolean equals(Object other) {
    if (other instanceof InstructionPointerContext) {
        InstructionPointerContext otherContext = (InstructionPointerContext) other;
        if (getAnnotation().equals(otherContext.getAnnotation())) {
            return getEditor().equals(otherContext.getEditor());
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.updatesite.SiteCategory$1.compare(org.eclipse.equinox.internal.p2.updatesite.SiteCategory;org.eclipse.equinox.internal.p2.updatesite.SiteCategory;)I3
public int compare(SiteCategory cat1, SiteCategory cat2) {
    if (cat1.equals(cat2))
        return 0;
    return cat1.getName().compareTo(cat2.getName());
}
method: org.eclipse.equinox.internal.p2.updatesite.SiteCategory.equals(java.lang.Object;)Z2
public boolean equals(Object obj) {
    boolean result = false;
    if (obj instanceof SiteCategory) {
        SiteCategory otherCategory = (SiteCategory) obj;
        result = getName().equalsIgnoreCase(otherCategory.getName());
    }
    return result;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.SourceType.getFields()Aorg.eclipse.jdt.core.IField;1
public IField[] getFields() throws JavaModelException {
    ArrayList list = getChildrenOfType(FIELD);
    IField[] array = new IField[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.eclipse.ltk.internal.ui.refactoring.RefactoringPluginImages.createManaged(java.lang.String;java.lang.String;)org.eclipse.jface.resource.ImageDescriptor;2
private static ImageDescriptor createManaged(String prefix, String name) {
    ImageDescriptor result = create(prefix, name.substring(NAME_PREFIX_LENGTH), true);
    if (fgAvoidSWTErrorMap == null) {
        fgAvoidSWTErrorMap = new  HashMap();
    }
    fgAvoidSWTErrorMap.put(name, result);
    if (fgImageRegistry != null) {
        RefactoringUIPlugin.logErrorMessage("Image registry already defined");
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.JavaPluginImages.createManagedFromKey(java.lang.String;java.lang.String;)org.eclipse.jface.resource.ImageDescriptor;2
private static ImageDescriptor createManagedFromKey(String prefix, String key) {
    return createManaged(prefix, key.substring(NAME_PREFIX_LENGTH), key);
}
method: org.eclipse.jdt.internal.ui.JavaPluginImages.createManaged(java.lang.String;java.lang.String;java.lang.String;)org.eclipse.jface.resource.ImageDescriptor;3
private static ImageDescriptor createManaged(String prefix, String name, String key) {
    ImageDescriptor result = create(prefix, name, true);
    if (fgAvoidSWTErrorMap == null) {
        fgAvoidSWTErrorMap = new  HashMap<String, ImageDescriptor>();
    }
    fgAvoidSWTErrorMap.put(key, result);
    if (fgImageRegistry != null) {
        JavaPlugin.logErrorMessage("Image registry already defined");
    }
    return result;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.schema.SchemaSimpleType.setSchema(org.eclipse.pde.internal.core.ischema.ISchema;)V2
public void setSchema(ISchema schema) {
    super.setSchema(schema);
    if (restriction != null)
        restriction.setParent(schema);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.java.TypeProposalInfo.resolveMember()org.eclipse.jdt.core.IMember;1
@Override
protected IMember resolveMember() throws JavaModelException {
    char[] signature = fProposal.getSignature();
    String typeName = SignatureUtil.stripSignatureToFQN(String.valueOf(signature));
    return fJavaProject.findType(typeName);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.nullInfoLessUnconditionalCopy()org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;1
public UnconditionalFlowInfo nullInfoLessUnconditionalCopy() {
    return unconditionalInitsWithoutSideEffect().nullInfoLessUnconditionalCopy();
}
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.unconditionalInitsWithoutSideEffect()org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;1
public UnconditionalFlowInfo unconditionalInitsWithoutSideEffect() {
    return this.initsWhenTrue.unconditionalCopy().mergedWith(this.initsWhenFalse.unconditionalInits());
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.commands.QueryByTag.refreshTags()V1
private void refreshTags() {
    fTagsCombo.removeAll();
    String[] tags = fTagManager.getTags();
    for (int i = 0; i < tags.length; i++) {
        fTagsCombo.add(tags[i]);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewPart.setMemberFilter(Aorg.eclipse.jdt.core.IMember;)V2
private void setMemberFilter(IMember[] memberFilter) {
    Assert.isNotNull(fAllViewers);
    for (int i = 0; i < fAllViewers.length; i++) {
        fAllViewers[i].setMemberFilter(memberFilter);
    }
}
method: org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewer.setMemberFilter(Aorg.eclipse.jdt.core.IMember;)V2
public void setMemberFilter(IMember[] memberFilter) {
    TypeHierarchyContentProvider contentProvider = getHierarchyContentProvider();
    if (contentProvider != null) {
        contentProvider.setMemberFilter(memberFilter);
    }
}

---------------Library-------------------
method: org.eclipse.debug.ui.memory.AbstractTableRendering.updateLabels()V1
@Override
public void updateLabels() {
    updateRenderingLabel(true);
    if (fTableViewer != null) {
        setColumnHeadings();
        fTableViewer.refresh();
    }
}
---------------Client-------------------
method: org.eclipse.ui.dialogs.FilteredTree.clearText()V1
protected void clearText() {
    setFilterText("");
    textChanged();
}
method: org.eclipse.ui.dialogs.FilteredTree.setFilterText(java.lang.String;)V2
protected void setFilterText(String string) {
    if (filterText != null) {
        filterText.setText(string);
        selectAll();
    }
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.editor.AntEditor$1.selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
@Override
public void selectionChanged(SelectionChangedEvent event) {
    fSelectionSetFromOutline = false;
    doSelectionChanged(event);
    fSelectionSetFromOutline = true;
}
---------------Client-------------------
method: org.eclipse.jetty.util.statistic.CounterStatistic.reset()V1
public void reset() {
    reset(0);
}
method: org.eclipse.jetty.util.statistic.CounterStatistic.reset(J)V2
public void reset(final long value) {
    _max.set(value);
    _curr.set(value);
    _total.set(0);
}

---------------Library-------------------
method: org.eclipse.search.internal.ui.SearchPageDescriptor.createObject(org.eclipse.search.ui.ISearchPageContainer;)org.eclipse.search.ui.ISearchPage;2
public ISearchPage createObject(ISearchPageContainer container) throws CoreException {
    if (fCreatedPage == null) {
        fCreatedPage = (ISearchPage) fElement.createExecutableExtension(CLASS_ATTRIBUTE);
        fCreatedPage.setTitle(getLabel());
        fCreatedPage.setContainer(container);
    }
    return fCreatedPage;
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.quickdiff.ReferenceProviderDescriptor.createProvider()org.eclipse.ui.texteditor.quickdiff.IQuickDiffReferenceProvider;1
public IQuickDiffReferenceProvider createProvider() {
    try {
        IQuickDiffReferenceProvider impl = (IQuickDiffReferenceProvider) fConfiguration.createExecutableExtension(CLASS_ATTRIBUTE);
        impl.setId(getId());
        return impl;
    } catch (CoreException e) {
        return null;
    }
}
method: org.eclipse.ui.texteditor.quickdiff.ReferenceProviderDescriptor.getId()java.lang.String;1
public String getId() {
    if (fId == null) {
        fId = fConfiguration.getAttribute(ID_ATTRIBUTE);
        Assert.isNotNull(fId);
    }
    return fId;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.bundle.RequiredExecutionEnvironmentHeader.getEnvironments()Aorg.eclipse.pde.internal.core.text.bundle.ExecutionEnvironment;1
public ExecutionEnvironment[] getEnvironments() {
    PDEManifestElement[] elements = getElements();
    ExecutionEnvironment[] result = new ExecutionEnvironment[elements.length];
    System.arraycopy(elements, 0, result, 0, elements.length);
    return result;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.pipe(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)org.eclipse.equinox.p2.metadata.expression.IExpression;2
public IExpression pipe(IExpression... operands) {
    return Pipe.createPipe(convertArray(operands));
}
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.convertArray(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)Aorg.eclipse.equinox.internal.p2.metadata.expression.Expression;1
protected static Expression[] convertArray(IExpression[] operands) {
    Expression[] ops = new Expression[operands.length];
    System.arraycopy(operands, 0, ops, 0, operands.length);
    return ops;
}

---------------Library-------------------
method: org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(org.eclipse.core.expressions.Expression;org.eclipse.core.expressions.IEvaluationContext;)org.eclipse.core.expressions.EvaluationResult;2
public static EvaluationResult safeEvaluate(Expression expression, IEvaluationContext scope) {
    Evaluator evaluator = new  Evaluator();
    evaluator.expression = expression;
    evaluator.scope = scope;
    SafeRunner.run(evaluator);
    return evaluator.result;
}
---------------Client-------------------
method: org.eclipse.core.internal.jobs.LockManager$LockState.suspend(org.eclipse.core.internal.jobs.OrderedLock;)org.eclipse.core.internal.jobs.LockManager$LockState;1
protected static LockState suspend(OrderedLock lock) {
    LockState state = new  LockState();
    state.lock = lock;
    state.depth = lock.forceRelease();
    return state;
}
method: org.eclipse.core.internal.jobs.OrderedLock.forceRelease()I1
protected int forceRelease() {
    int oldDepth = depth;
    doRelease();
    return oldDepth;
}

---------------Library-------------------
method: org.eclipse.jface.viewers.StructuredViewer.fireOpen(org.eclipse.jface.viewers.OpenEvent;)V2
protected void fireOpen(final OpenEvent event) {
    Object[] listeners = openListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final IOpenListener l = (IOpenListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.open(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_arrow_set(JII)V3
public static final void gtk_arrow_set(long arrow, int arrow_type, int shadow_type) {
    lock.lock();
    try {
        _gtk_arrow_set(arrow, arrow_type, shadow_type);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.Container.findMember(java.lang.String;Z)org.eclipse.core.resources.IResource;3
public IResource findMember(String memberPath, boolean phantom) {
    IPath childPath = getFullPath().append(memberPath);
    ResourceInfo info = workspace.getResourceInfo(childPath, phantom, false);
    return info == null ? null : workspace.newResource(childPath, info.getType());
}
---------------Client-------------------
method: org.eclipse.core.internal.resources.Container.findMember(org.eclipse.core.runtime.IPath;)org.eclipse.core.resources.IResource;2
public IResource findMember(IPath childPath) {
    return findMember(childPath, false);
}
method: org.eclipse.core.internal.resources.Container.findMember(org.eclipse.core.runtime.IPath;Z)org.eclipse.core.resources.IResource;3
public IResource findMember(IPath childPath, boolean phantom) {
    childPath = getFullPath().append(childPath);
    ResourceInfo info = workspace.getResourceInfo(childPath, phantom, false);
    return (info == null) ? null : workspace.newResource(childPath, info.getType());
}

---------------Library-------------------
method: org.eclipse.swt.browser.DownloadFactory_1_8.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.Spinner.getTextLimit()I1
public int getTextLimit() {
    checkWidget();
    int limit = OS.gtk_entry_get_max_length(handle);
    return limit == 0 ? 0xFFFF : limit;
}
---------------Client-------------------
method: org.eclipse.swt.graphics.TextLayout.getTextDirection()I1
public int getTextDirection() {
    return getOrientation();
}
method: org.eclipse.swt.graphics.TextLayout.getOrientation()I1
public int getOrientation() {
    checkLayout();
    int baseDir = OS.pango_context_get_base_dir(context);
    return baseDir == OS.PANGO_DIRECTION_RTL ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;
}

---------------Library-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuildTab.updateReferencedProjects(org.eclipse.debug.core.ILaunchConfiguration;)V2
private void updateReferencedProjects(ILaunchConfiguration configuration) {
    boolean ref = false;
    try {
        ref = configuration.getAttribute(IExternalToolConstants.ATTR_INCLUDE_REFERENCED_PROJECTS, true);
    } catch (CoreException e) {
        ExternalToolsPlugin.getDefault().log("Exception reading launch configuration", e);
    }
    fReferencedProjects.setSelection(ref);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.equinox.p2.operations.ProvisioningJob$DoubleProgressMonitor.clearBlocked()V1
public void clearBlocked() {
    super.clearBlocked();
    if (additionalMonitor instanceof IProgressMonitorWithBlocking)
        ((IProgressMonitorWithBlocking) additionalMonitor).clearBlocked();
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.editor.text.NotifyingReconciler.initialProcess()V1
@Override
protected void initialProcess() {
    super.initialProcess();
    notifyReconcilingParticipants();
}
method: org.eclipse.jface.text.reconciler.MonoReconciler.initialProcess()V1
protected void initialProcess() {
    if (fStrategy instanceof IReconcilingStrategyExtension) {
        IReconcilingStrategyExtension extension = (IReconcilingStrategyExtension) fStrategy;
        extension.initialReconcile();
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TableItem.getForeground()org.eclipse.swt.graphics.Color;1
public Color getForeground() {
    checkWidget();
    if (!parent.checkData(this))
        error(SWT.ERROR_WIDGET_DISPOSED);
    return _getForeground();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getExtraIndentAfterNewLine()java.lang.String;1
private String getExtraIndentAfterNewLine() {
    int formatterContinuationIndentationSize = getContinuationIndentationSize();
    int binaryAlignmentValue = getBinaryOperatorAlignmentStyle();
    int indentSize = formatterContinuationIndentationSize;
    if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_BY_ONE) {
        indentSize = 1;
    } else if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_ON_COLUMN) {
    }
    return CodeFormatterUtil.createIndentString(indentSize, fProject);
}
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getBinaryOperatorAlignmentStyle()I1
private int getBinaryOperatorAlignmentStyle() {
    String binaryAlignmentValue = getCoreFormatterOption(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_BINARY_EXPRESSION);
    return DefaultCodeFormatterConstants.getIndentStyle(binaryAlignmentValue);
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.SelectResourcesDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
protected void configureShell(Shell newShell) {
    super.configureShell(newShell);
    if (fTitle != null)
        newShell.setText(fTitle);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.dialogs.OverrideMethodDialog$OverrideMethodValidator.validate(Ajava.lang.Object;)org.eclipse.core.runtime.IStatus;2
public IStatus validate(Object[] selection) {
    int count = 0;
    for (int index = 0; index < selection.length; index++) {
        if (selection[index] instanceof IMethodBinding)
            count++;
    }
    if (count == 0)
        return new  StatusInfo(IStatus.ERROR, "");
    return new  StatusInfo(IStatus.INFO, Messages.format(JavaUIMessages.OverrideMethodDialog_selectioninfo_more, new String[] { String.valueOf(count), String.valueOf(fNumMethods) }));
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.AddUnimplementedConstructorsAction$AddUnimplementedConstructorsValidator.validate(Ajava.lang.Object;)org.eclipse.core.runtime.IStatus;2
public IStatus validate(Object[] selection) {
    int count = countSelectedMethods(selection);
    if (count == 0)
        return new  StatusInfo(IStatus.ERROR, "");
    String message = Messages.format(ActionMessages.AddUnimplementedConstructorsAction_methods_selected, new Object[] { String.valueOf(count), String.valueOf(fEntries) });
    return new  StatusInfo(IStatus.INFO, message);
}
method: org.eclipse.jdt.ui.actions.AddUnimplementedConstructorsAction$AddUnimplementedConstructorsValidator.countSelectedMethods(Ajava.lang.Object;)I2
private int countSelectedMethods(Object[] selection) {
    int count = 0;
    for (int i = 0; i < selection.length; i++) {
        if (selection[i] instanceof IMethodBinding)
            count++;
    }
    return count;
}

---------------Library-------------------
method: org.eclipse.ant.core.AntCorePreferences.setCustomURLs(Ajava.net.URL;)V2
@Deprecated
public void setCustomURLs(URL[] urls) {
    additionalEntries = new IAntClasspathEntry[urls.length];
    for (int i = 0; i < urls.length; i++) {
        URL url = urls[i];
        IAntClasspathEntry entry = new  AntClasspathEntry(url);
        additionalEntries[i] = entry;
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.ide.dialogs.ResourceFilterGroup.setFilters(Aorg.eclipse.core.resources.IResourceFilterDescription;)V2
public void setFilters(IResourceFilterDescription[] filters) {
    initialFilters = new UIResourceFilterDescription[filters.length];
    for (int i = 0; i < filters.length; i++) initialFilters[i] = UIResourceFilterDescription.wrap(filters[i]);
}
method: org.eclipse.ui.ide.dialogs.UIResourceFilterDescription.wrap(org.eclipse.core.resources.IResourceFilterDescription;)org.eclipse.ui.ide.dialogs.UIResourceFilterDescription;1
public static UIResourceFilterDescription wrap(final IResourceFilterDescription iResourceFilterDescription) {
    return new  UIResourceFilterDescription() {

        public FileInfoMatcherDescription getFileInfoMatcherDescription() {
            return iResourceFilterDescription.getFileInfoMatcherDescription();
        }

        public IPath getPath() {
            return iResourceFilterDescription.getResource().getProjectRelativePath();
        }

        public IProject getProject() {
            return iResourceFilterDescription.getResource().getProject();
        }

        public int getType() {
            return iResourceFilterDescription.getType();
        }
    };
}

---------------Library-------------------
method: org.eclipse.jface.preference.FontFieldEditor.doLoadDefault()V1
@Override
protected void doLoadDefault() {
    if (changeFontButton == null) {
        return;
    }
    updateFont(PreferenceConverter.getDefaultFontDataArray(getPreferenceStore(), getPreferenceName()));
}
---------------Client-------------------
method: org.eclipse.ui.internal.handlers.SpyHandler.execute(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;2
@Override
public Object execute(ExecutionEvent event) {
    Shell shell = HandlerUtil.getActiveShell(event);
    if (shell != null) {
        Control control = shell.getDisplay().getFocusControl();
        if (control != null) {
            showTooltip(control);
        }
    }
    return null;
}
method: org.eclipse.swt.widgets.Widget.getDisplay()org.eclipse.swt.widgets.Display;1
public Display getDisplay() {
    Display display = this.display;
    if (display == null)
        error(SWT.ERROR_WIDGET_DISPOSED);
    return display;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.callhierarchy.CallHierarchyViewer.cancelJobs()V1
void cancelJobs() {
    if (fPart == null)
        return;
    fContentProvider.cancelJobs(fPart.getCurrentMethodWrappers());
}
---------------Client-------------------
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.reset()V1
public void reset() {
    eventHandler.reset(getRoots());
}
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.getRoots()Aorg.eclipse.core.resources.IResource;1
public IResource[] getRoots() {
    if (roots == null) {
        return super.getRoots();
    } else {
        return roots;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.Collection;java.lang.Class;Z)java.util.Collection;3
public static Collection safeCopy(Collection collection, Class c, boolean allowNullElements) {
    if (collection == null || c == null) {
        throw new  NullPointerException();
    }
    collection = Collections.unmodifiableCollection(new  ArrayList(collection));
    Iterator iterator = collection.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return collection;
}
---------------Client-------------------
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;)java.util.Set;2
public static final Set safeCopy(final Set set, final Class c) {
    return safeCopy(set, c, false);
}
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;Z)java.util.Set;3
public static final Set safeCopy(final Set set, final Class c, final boolean allowNullElements) {
    if (set == null || c == null) {
        throw new  NullPointerException();
    }
    final Set copy = Collections.unmodifiableSet(new  HashSet(set));
    final Iterator iterator = copy.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return set;
}

---------------Library-------------------
method: org.eclipse.jetty.server.bio.SocketConnector.close()V1
public void close() throws IOException {
    if (_serverSocket != null)
        _serverSocket.close();
    _serverSocket = null;
    _localPort = -2;
}
---------------Client-------------------
method: org.eclipse.search.internal.core.text.FileCharSequenceProvider$FileCharSequence.close()V1
public void close() throws IOException {
    clearReader();
}
method: org.eclipse.search.internal.core.text.FileCharSequenceProvider$FileCharSequence.clearReader()V1
private void clearReader() throws IOException {
    if (fReader != null) {
        fReader.close();
    }
    fReader = null;
    fReaderPos = Integer.MAX_VALUE;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.hierarchy.HierarchyResolver.worked(org.eclipse.core.runtime.IProgressMonitor;I)V3
protected void worked(IProgressMonitor monitor, int work) {
    if (monitor != null) {
        if (monitor.isCanceled()) {
            throw new  OperationCanceledException();
        } else {
            monitor.worked(work);
        }
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;)V1
public static void updateMonitor(IProgressMonitor monitor) throws OperationCanceledException {
    updateMonitor(monitor, 0);
}
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;I)V2
public static void updateMonitor(IProgressMonitor monitor, int work) throws OperationCanceledException {
    if (monitor == null) {
        return;
    }
    if (monitor.isCanceled()) {
        throw new  OperationCanceledException();
    }
    monitor.worked(work);
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.ignore(java.lang.Throwable;)V2
public void ignore(Throwable ignored) {
    if (_level <= LEVEL_ALL) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":IGNORED:", "", ignored);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.Throwable;)V2
public void debug(Throwable thrown) {
    debug("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;java.lang.Throwable;)V3
public void debug(String msg, Throwable thrown) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.isActiveEditor()Z1
protected final boolean isActiveEditor() {
    IWorkbenchWindow window = getSite().getWorkbenchWindow();
    IWorkbenchPage page = window.getActivePage();
    if (page == null)
        return false;
    IEditorPart activeEditor = page.getActiveEditor();
    return activeEditor != null && activeEditor.equals(this);
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.editor.AntEditor.isActivePart()Z1
private boolean isActivePart() {
    IWorkbenchPart part = getActivePart();
    return part != null && part.equals(this);
}
method: org.eclipse.ant.internal.ui.editor.AntEditor.getActivePart()org.eclipse.ui.IWorkbenchPart;1
private IWorkbenchPart getActivePart() {
    IWorkbenchWindow window = getSite().getWorkbenchWindow();
    IPartService service = window.getPartService();
    return service.getActivePart();
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.product.ProductIntroOperation.createIntroConfigExtension(org.eclipse.pde.core.plugin.IPluginModelBase;)org.eclipse.pde.core.plugin.IPluginExtension;2
private IPluginExtension createIntroConfigExtension(IPluginModelBase model) throws CoreException {
    IPluginExtension extension = model.getFactory().createExtension();
    extension.setPoint(INTRO_CONFIG_POINT);
    extension.add(createIntroConfigExtensionContent(extension));
    return extension;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.ui.wizards.toc.RegisterTocOperation.createExtensionToc(org.eclipse.pde.core.plugin.IPluginModelBase;)org.eclipse.pde.core.plugin.IPluginExtension;2
private IPluginExtension createExtensionToc(IPluginModelBase model) throws CoreException {
    IPluginExtension extension = model.getFactory().createExtension();
    extension.setPoint(F_TOC_EXTENSION_POINT_ID);
    createExtensionChildren(extension);
    return extension;
}
method: org.eclipse.pde.internal.ua.ui.wizards.toc.RegisterTocOperation.createExtensionChildren(org.eclipse.pde.core.plugin.IPluginExtension;)V2
private void createExtensionChildren(IPluginExtension extension) throws CoreException {
    IPluginElement tocElement = createElementToc(extension);
    if (tocElement != null) {
        extension.add(tocElement);
    }
}

---------------Library-------------------
method: org.eclipse.swt.custom.CTabFolder.reskin(I)V2
@Override
public void reskin(int flags) {
    super.reskin(flags);
    for (int i = 0; i < items.length; i++) {
        items[i].reskin(flags);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.core.subscribers.SyncSetInputFromSyncSet.remove(Aorg.eclipse.core.resources.IResource;)V2
private void remove(IResource[] resources) {
    for (int i = 0; i < resources.length; i++) {
        remove(resources[i]);
    }
}
method: org.eclipse.team.internal.core.subscribers.SyncSetInput.remove(org.eclipse.core.resources.IResource;)V2
protected void remove(IResource resource) {
    SyncInfo oldInfo = syncSet.getSyncInfo(resource);
    if (oldInfo != null) {
        syncSet.remove(resource);
    }
}

---------------Library-------------------
method: org.eclipse.ltk.internal.ui.refactoring.model.RefactoringModelAdapterFactory.getAdapter(java.lang.Object;java.lang.Class;)java.lang.Object;3
public Object getAdapter(final Object adaptable, final Class adapter) {
    if (adaptable instanceof RefactoringDescriptorCompareInput) {
        final RefactoringDescriptorCompareInput input = (RefactoringDescriptorCompareInput) adaptable;
        final RefactoringDescriptorProxy descriptor = input.getDescriptor();
        if (descriptor != null)
            return descriptor.getAdapter(ResourceMapping.class);
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.ListUtil$TableLabelProvider.getColumnImage(java.lang.Object;I)org.eclipse.swt.graphics.Image;3
public Image getColumnImage(Object o, int index) {
    return getImage(o);
}
method: org.eclipse.pde.internal.ui.elements.ElementLabelProvider.getImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
public Image getImage(Object element) {
    if (element instanceof IPDEElement) {
        return ((IPDEElement) element).getImage();
    }
    return super.getImage(element);
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_bg(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_style_get_bg(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_style_get_bg(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$1.assistSessionStarted(org.eclipse.jface.text.contentassist.ContentAssistEvent;)V2
public void assistSessionStarted(ContentAssistEvent event) {
    fAssistant.setStatusLineVisible(true);
    fAssistant.setStatusMessage(getJumpHintStatusLineMessage());
}
---------------Client-------------------
method: org.eclipse.ui.views.markers.internal.TableView.setComparator(org.eclipse.ui.views.markers.internal.TableComparator;)V2
void setComparator(TableComparator comparator) {
    viewer.setComparator(comparator);
    updateForNewComparator(comparator);
}
method: org.eclipse.ui.views.markers.internal.TableView.updateForNewComparator(org.eclipse.ui.views.markers.internal.TableComparator;)V2
void updateForNewComparator(TableComparator comparator) {
    comparator.saveState(getDialogSettings());
    viewer.refresh();
    setSortIndicators();
}

---------------Library-------------------
method: org.eclipse.ant.core.AntCorePreferences.setAntURLs(Ajava.net.URL;)V2
@Deprecated
public void setAntURLs(URL[] urls) {
    antHomeEntries = new IAntClasspathEntry[urls.length];
    for (int i = 0; i < urls.length; i++) {
        URL url = urls[i];
        IAntClasspathEntry entry = new  AntClasspathEntry(url);
        antHomeEntries[i] = entry;
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.ide.dialogs.ResourceFilterGroup.setFilters(Aorg.eclipse.core.resources.IResourceFilterDescription;)V2
public void setFilters(IResourceFilterDescription[] filters) {
    initialFilters = new UIResourceFilterDescription[filters.length];
    for (int i = 0; i < filters.length; i++) initialFilters[i] = UIResourceFilterDescription.wrap(filters[i]);
}
method: org.eclipse.ui.ide.dialogs.UIResourceFilterDescription.wrap(org.eclipse.core.resources.IResourceFilterDescription;)org.eclipse.ui.ide.dialogs.UIResourceFilterDescription;1
public static UIResourceFilterDescription wrap(final IResourceFilterDescription iResourceFilterDescription) {
    return new  UIResourceFilterDescription() {

        public FileInfoMatcherDescription getFileInfoMatcherDescription() {
            return iResourceFilterDescription.getFileInfoMatcherDescription();
        }

        public IPath getPath() {
            return iResourceFilterDescription.getResource().getProjectRelativePath();
        }

        public IProject getProject() {
            return iResourceFilterDescription.getResource().getProject();
        }

        public int getType() {
            return iResourceFilterDescription.getType();
        }
    };
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.PackageDeclaration;)Z2
@Override
public boolean visit(PackageDeclaration node) {
    doVisitNode(node.getJavadoc());
    doVisitChildren(node.annotations());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.jface.dialogs.StatusDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (fTitle != null) {
        shell.setText(fTitle);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractTextEditor.disposeNonDefaultCaret()V1
private void disposeNonDefaultCaret() {
    if (fNonDefaultCaretImage != null) {
        fNonDefaultCaretImage.dispose();
        fNonDefaultCaretImage = null;
    }
    if (fNonDefaultCaret != null) {
        fNonDefaultCaret.dispose();
        fNonDefaultCaret = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractTextEditor.updateContentDependentActions()V1
protected void updateContentDependentActions() {
    if (fContentActions != null) {
        Iterator e = fContentActions.iterator();
        while (e.hasNext()) updateAction((String) e.next());
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.breadcrumb.BreadcrumbItemDetails.installFocusComposite(org.eclipse.swt.widgets.Composite;)V2
private void installFocusComposite(Composite composite) {
    composite.addTraverseListener(new  TraverseListener() {

        public void keyTraversed(TraverseEvent e) {
            if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
                int index = fParent.getViewer().getIndexOfItem(fParent);
                if (e.detail == SWT.TRAVERSE_TAB_NEXT) {
                    index++;
                } else {
                    index--;
                }
                if (index > 0 && index < fParent.getViewer().getItemCount()) {
                    fParent.getViewer().selectItem(fParent.getViewer().getItem(index));
                }
                e.doit = true;
            }
        }
    });
    composite.addKeyListener(new  KeyListener() {

        public void keyPressed(KeyEvent e) {
            BreadcrumbViewer viewer = fParent.getViewer();
            switch(e.keyCode) {
                case SWT.ARROW_LEFT:
                    if (fSelected) {
                        viewer.doTraverse(false);
                        e.doit = false;
                    } else {
                        viewer.selectItem(fParent);
                    }
                    break;
                case SWT.ARROW_RIGHT:
                    if (fSelected) {
                        viewer.doTraverse(true);
                        e.doit = false;
                    } else {
                        viewer.selectItem(fParent);
                    }
                    break;
                case SWT.ARROW_DOWN:
                    if (!fSelected) {
                        viewer.selectItem(fParent);
                    }
                    openDropDown();
                    e.doit = false;
                    break;
                case SWT.KEYPAD_ADD:
                    if (!fSelected) {
                        viewer.selectItem(fParent);
                    }
                    openDropDown();
                    e.doit = false;
                    break;
                case SWT.CR:
                    if (!fSelected) {
                        viewer.selectItem(fParent);
                    }
                    viewer.fireOpen();
                    break;
                default:
                    if (e.character == ' ') {
                        if (!fSelected) {
                            viewer.selectItem(fParent);
                        }
                        openDropDown();
                        e.doit = false;
                    }
                    break;
            }
        }

        private void openDropDown() {
            BreadcrumbViewer viewer = fParent.getViewer();
            int index = viewer.getIndexOfItem(fParent);
            BreadcrumbItem parent = fParent.getViewer().getItem(index - 1);
            Shell shell = parent.getDropDownShell();
            if (shell == null) {
                parent.openDropDownMenu();
                shell = parent.getDropDownShell();
            }
            shell.setFocus();
        }

        public void keyReleased(KeyEvent e) {
        }
    });
    composite.addFocusListener(new  FocusListener() {

        public void focusGained(FocusEvent e) {
            if (!fHasFocus) {
                fHasFocus = true;
                updateSelection();
            }
        }

        public void focusLost(FocusEvent e) {
            if (fHasFocus) {
                fHasFocus = false;
                updateSelection();
            }
        }
    });
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.launchConfigurations.SelectLaunchersDialog.addViewerListeners(org.eclipse.jface.viewers.StructuredViewer;)V2
@Override
protected void addViewerListeners(StructuredViewer viewer) {
    viewer.addSelectionChangedListener(new  ISelectionChangedListener() {

        @Override
        public void selectionChanged(SelectionChangedEvent event) {
            IStructuredSelection ss = (IStructuredSelection) event.getSelection();
            if (ss != null && !ss.isEmpty()) {
                SelectLaunchersDialog.this.description.setText(((ILaunchDelegate) ss.getFirstElement()).getDescription());
            } else {
                SelectLaunchersDialog.this.description.setText(IInternalDebugCoreConstants.EMPTY_STRING);
            }
        }
    });
    super.addViewerListeners(viewer);
}
method: org.eclipse.debug.internal.ui.AbstractDebugListSelectionDialog.addViewerListeners(org.eclipse.jface.viewers.StructuredViewer;)V2
@Override
protected void addViewerListeners(StructuredViewer viewer) {
    viewer.addSelectionChangedListener(new  ISelectionChangedListener() {

        @Override
        public void selectionChanged(SelectionChangedEvent event) {
            getButton(IDialogConstants.OK_ID).setEnabled(isValid());
        }
    });
    viewer.addDoubleClickListener(new  IDoubleClickListener() {

        @Override
        public void doubleClick(DoubleClickEvent event) {
            if (isValid()) {
                okPressed();
            }
        }
    });
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridDataFactory.hint(II)org.eclipse.jface.layout.GridDataFactory;3
public GridDataFactory hint(int xHint, int yHint) {
    data.widthHint = xHint;
    data.heightHint = yHint;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.generics.InferTypeArgumentsTCModel.isAGenericType(org.eclipse.jdt.internal.corext.refactoring.typeconstraints.types.TType;)Z1
public static boolean isAGenericType(TType type) {
    return type.isGenericType() || type.isParameterizedType() || (type.isRawType() && type.getTypeDeclaration().isGenericType());
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.util.JdtFlags.isPackageVisible(org.eclipse.jdt.core.dom.IBinding;)Z1
public static boolean isPackageVisible(IBinding binding) {
    return (!isPrivate(binding) && !isProtected(binding) && !isPublic(binding));
}
method: org.eclipse.jdt.internal.corext.util.JdtFlags.isPublic(org.eclipse.jdt.core.dom.IBinding;)Z1
public static boolean isPublic(IBinding binding) {
    if (isInterfaceOrAnnotationMember(binding))
        return true;
    return Modifier.isPublic(binding.getModifiers());
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.ProfileVersioner.update(org.eclipse.jdt.internal.ui.preferences.formatter.ProfileManager$CustomProfile;)V2
public void update(CustomProfile profile) {
    final Map<String, String> oldSettings = profile.getSettings();
    Map<String, String> newSettings = updateAndComplete(oldSettings, profile.getVersion());
    profile.setVersion(CURRENT_VERSION);
    profile.setSettings(newSettings);
}
---------------Client-------------------
method: org.eclipse.jface.util.SafeRunnableDialog.handleSelectionChange()V1
void handleSelectionChange() {
    IStatus newSelection = getSingleSelection();
    setStatus(newSelection);
    updateEnablements();
    showDetailsArea();
}
method: org.eclipse.jface.util.SafeRunnableDialog.updateEnablements()V1
private void updateEnablements() {
    Button details = getButton(IDialogConstants.DETAILS_ID);
    if (details != null) {
        details.setEnabled(true);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.filebuffers.TextFileBufferManager.removeFileBufferListener(org.eclipse.core.filebuffers.IFileBufferListener;)V2
public void removeFileBufferListener(IFileBufferListener listener) {
    Assert.isNotNull(listener);
    synchronized (fFileBufferListeners) {
        fFileBufferListeners.remove(listener);
    }
}
---------------Client-------------------
method: org.eclipse.search2.internal.ui.InternalSearchUI.addQueryListener(org.eclipse.search.ui.IQueryListener;)V2
public void addQueryListener(IQueryListener l) {
    getSearchManager().addQueryListener(l);
}
method: org.eclipse.search2.internal.ui.QueryManager.addQueryListener(org.eclipse.search.ui.IQueryListener;)V2
public void addQueryListener(IQueryListener l) {
    synchronized (fListeners) {
        fListeners.add(l);
    }
}

---------------Library-------------------
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;3
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    return anyOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;3
public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third) {
    return org.hamcrest.core.AllOf.<T>allOf(first, second, third);
}
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;3
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(3);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    return allOf(matchers);
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.model.ResourceFactory.saveState(org.eclipse.ui.IMemento;)V2
public void saveState(IMemento memento) {
    memento.putString(TAG_PATH, res.getFullPath().toString());
    memento.putString(TAG_TYPE, Integer.toString(res.getType()));
}
---------------Client-------------------
method: org.eclipse.debug.internal.core.ResourceFactory.saveState(org.eclipse.debug.internal.core.XMLMemento;org.eclipse.core.resources.IResource;)V2
public static void saveState(XMLMemento memento, IResource res) {
    memento.putString(TAG_PATH, res.getFullPath().toString());
    memento.putString(TAG_TYPE, Integer.toString(res.getType()));
}
method: org.eclipse.debug.internal.core.XMLMemento.putString(java.lang.String;java.lang.String;)V3
public void putString(String key, String value) {
    if (value == null) {
        return;
    }
    element.setAttribute(key, value);
}

---------------Library-------------------
method: org.eclipse.ui.internal.about.AboutBundleGroupData.getFeatureImage()org.eclipse.jface.resource.ImageDescriptor;1
public ImageDescriptor getFeatureImage() {
    if (featureImage == null) {
        featureImage = getImage(getFeatureImageUrl());
    }
    return featureImage;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.fix.SerialVersionDefaultOperation.addLinkedPositions(org.eclipse.jdt.core.dom.rewrite.ASTRewrite;org.eclipse.jdt.core.dom.VariableDeclarationFragment;org.eclipse.jdt.internal.corext.fix.LinkedProposalModel;)V4
@Override
protected void addLinkedPositions(final ASTRewrite rewrite, final VariableDeclarationFragment fragment, final LinkedProposalModel positionGroups) {
    Assert.isNotNull(rewrite);
    Assert.isNotNull(fragment);
    final Expression initializer = fragment.getInitializer();
    if (initializer != null) {
        LinkedProposalPositionGroup group = new  LinkedProposalPositionGroup(GROUP_INITIALIZER);
        group.addPosition(rewrite.track(initializer), true);
        positionGroups.addPositionGroup(group);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.PerspectiveBarManager.ensureVisible(org.eclipse.ui.internal.PerspectiveBarContributionItem;)V2
private void ensureVisible(PerspectiveBarContributionItem contribItem) {
    relocate(contribItem, 1);
}
method: org.eclipse.ui.internal.PerspectiveBarManager.relocate(org.eclipse.ui.internal.PerspectiveBarContributionItem;I)V3
void relocate(PerspectiveBarContributionItem contribItem, int index) {
    PerspectiveBarContributionItem newItem = new  PerspectiveBarContributionItem(contribItem.getPerspective(), contribItem.getPage());
    removeItem(contribItem);
    contribItem.dispose();
    contribItem = null;
    insert(index, newItem);
    update(false);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.provisional.security.ui.X509CertificateViewDialog.close()Z1
public boolean close() {
    if (titleImage != null) {
        titleImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.search.ui.text.AbstractTextSearchViewPage.updateFilterActions(Aorg.eclipse.jface.action.IAction;)V2
private void updateFilterActions(IAction[] filterActions) {
    if (filterActions != null) {
        for (int i = 0; i < filterActions.length; i++) {
            IAction curr = filterActions[i];
            if (curr instanceof IUpdate) {
                ((IUpdate) curr).update();
            }
        }
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.mapping.CompareInputChangeNotifier.fireChanges(Aorg.eclipse.compare.structuremergeviewer.ICompareInput;)V2
protected void fireChanges(ICompareInput[] inputs) {
    for (int i = 0; i < inputs.length; i++) {
        ICompareInput input = inputs[i];
        fireChange(input);
    }
}
method: org.eclipse.team.internal.ui.mapping.CompareInputChangeNotifier.fireChange(org.eclipse.compare.structuremergeviewer.ICompareInput;)V2
protected void fireChange(ICompareInput input) {
    if (input instanceof AbstractCompareInput) {
        AbstractCompareInput ci = (AbstractCompareInput) input;
        ci.update();
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.PropertySheetEntry.fireValueChanged()V1
private void fireValueChanged() {
    Object[] array = getListeners();
    for (int i = 0; i < array.length; i++) {
        IPropertySheetEntryListener listener = (IPropertySheetEntryListener) array[i];
        listener.valueChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.testEnded(org.eclipse.jdt.internal.junit.model.TestCaseElement;)V2
public void testEnded(TestCaseElement testCaseElement) {
    fireTestCaseFinished(testCaseElement);
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireTestCaseFinished(org.eclipse.jdt.junit.model.ITestCaseElement;)V2
private void fireTestCaseFinished(ITestCaseElement testCaseElement) {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).testCaseFinished(testCaseElement);
    }
}

---------------Library-------------------
method: org.eclipse.jface.preference.FontFieldEditor.doLoad()V1
@Override
protected void doLoad() {
    if (changeFontButton == null) {
        return;
    }
    updateFont(PreferenceConverter.getFontDataArray(getPreferenceStore(), getPreferenceName()));
}
---------------Client-------------------
method: org.eclipse.ui.internal.handlers.SpyHandler.execute(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;2
@Override
public Object execute(ExecutionEvent event) {
    Shell shell = HandlerUtil.getActiveShell(event);
    if (shell != null) {
        Control control = shell.getDisplay().getFocusControl();
        if (control != null) {
            showTooltip(control);
        }
    }
    return null;
}
method: org.eclipse.swt.widgets.Widget.getDisplay()org.eclipse.swt.widgets.Display;1
public Display getDisplay() {
    Display display = this.display;
    if (display == null)
        error(SWT.ERROR_WIDGET_DISPOSED);
    return display;
}

---------------Library-------------------
method: org.eclipse.help.internal.HelpData.isSortOthers()Z1
public synchronized boolean isSortOthers() {
    if (sortMode == null) {
        loadHelpData();
    }
    return "true".equals(sortMode);
}
---------------Client-------------------
method: org.eclipse.jface.bindings.BindingManager.isPerfectMatch(org.eclipse.jface.bindings.TriggerSequence;)Z2
public final boolean isPerfectMatch(final TriggerSequence trigger) {
    return getActiveBindings().containsKey(trigger);
}
method: org.eclipse.jface.bindings.BindingManager.getActiveBindings()java.util.Map;1
private final Map getActiveBindings() {
    if (activeBindings == null) {
        recomputeBindings();
    }
    return activeBindings;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.product.ProductModel.getProduct()org.eclipse.pde.internal.core.iproduct.IProduct;1
public IProduct getProduct() {
    if (fProduct == null)
        fProduct = getFactory().createProduct();
    return fProduct;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.ui.part.MultiPageEditorPart.getEditor(I)org.eclipse.ui.IEditorPart;2
protected IEditorPart getEditor(int pageIndex) {
    Item item = getItem(pageIndex);
    if (item != null) {
        Object data = item.getData();
        if (data instanceof IEditorPart) {
            return (IEditorPart) data;
        }
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.ListUtil$TableLabelProvider.getColumnImage(java.lang.Object;I)org.eclipse.swt.graphics.Image;3
public Image getColumnImage(Object o, int index) {
    return getImage(o);
}
method: org.eclipse.pde.internal.ui.elements.ElementLabelProvider.getImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
public Image getImage(Object element) {
    if (element instanceof IPDEElement) {
        return ((IPDEElement) element).getImage();
    }
    return super.getImage(element);
}

---------------Library-------------------
method: org.eclipse.core.internal.utils.Policy.log(ILjava.lang.String;java.lang.Throwable;)V3
public static void log(int severity, String message, Throwable t) {
    if (message == null)
        message = "";
    log(new  Status(severity, ResourcesPlugin.PI_RESOURCES, 1, message, t));
}
---------------Client-------------------
method: org.eclipse.ant.internal.launching.AntLaunching.log(java.lang.String;java.lang.Throwable;)V2
public static void log(String message, Throwable exception) {
    IStatus status = newErrorStatus(message, exception);
    log(status);
}
method: org.eclipse.ant.internal.launching.AntLaunching.newErrorStatus(java.lang.String;java.lang.Throwable;)org.eclipse.core.runtime.IStatus;2
public static IStatus newErrorStatus(String message, Throwable exception) {
    if (message == null) {
        message = EMPTY_STRING;
    }
    return new  Status(IStatus.ERROR, PLUGIN_ID, 0, message, exception);
}

---------------Library-------------------
method: org.eclipse.team.ui.synchronize.AbstractSynchronizeParticipant.init(java.lang.String;org.eclipse.ui.IMemento;)V3
public void init(String secondaryId, IMemento memento) throws PartInitException {
    setSecondaryId(secondaryId);
    pinned = Boolean.valueOf(memento.getString(CTX_PINNED)).booleanValue();
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.feature.IdentifiableObject.parse(org.w3c.dom.Node;)V2
protected void parse(Node node) {
    super.parse(node);
    id = getNodeAttribute(node, "id");
}
method: org.eclipse.pde.internal.core.feature.FeatureObject.getNodeAttribute(org.w3c.dom.Node;java.lang.String;)java.lang.String;3
String getNodeAttribute(Node node, String name) {
    Node attribute = node.getAttributes().getNamedItem(name);
    if (attribute != null)
        return attribute.getNodeValue();
    return null;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.imports.FeatureImportWizard.getSettingsSection(org.eclipse.jface.dialogs.IDialogSettings;)org.eclipse.jface.dialogs.IDialogSettings;2
private IDialogSettings getSettingsSection(IDialogSettings master) {
    IDialogSettings setting = master.getSection(STORE_SECTION);
    if (setting == null) {
        setting = master.addNewSection(STORE_SECTION);
    }
    return setting;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.SynchronizeView.createDefaultPage(org.eclipse.ui.part.PageBook;)org.eclipse.ui.part.IPage;2
protected IPage createDefaultPage(PageBook book) {
    Page page = new  MessagePage();
    page.createControl(getPageBook());
    initPage(page);
    return page;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.getFields(java.lang.String;)Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;2
public Variable[] getFields(String type) {
    Variable[] fields = getCompletion().findFieldVariables(type);
    arrange(fields);
    return fields;
}
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.arrange(Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;)V2
private void arrange(Variable[] variables) {
    Arrays.sort(variables, new  Comparator<Variable>() {

        public int compare(Variable o1, Variable o2) {
            return rank(o1) - rank(o2);
        }

        private int rank(Variable l) {
            return fUsedNames.contains(l.getName()) ? 1 : 0;
        }
    });
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.ExpandableComposite.setForeground(org.eclipse.swt.graphics.Color;)V2
public void setForeground(Color fg) {
    super.setForeground(fg);
    if (textLabel != null)
        textLabel.setForeground(fg);
    if (toggle != null)
        toggle.setForeground(fg);
}
---------------Client-------------------
method: org.eclipse.ui.internal.WWinPluginAction.setChecked(Z)V2
@Override
public void setChecked(boolean checked) {
    super.setChecked(checked);
    if (retargetAction != null) {
        retargetAction.setChecked(checked);
    }
}
method: org.eclipse.ui.actions.RetargetAction.setChecked(Z)V2
@Override
public void setChecked(boolean checked) {
    super.setChecked(checked);
    if (handler != null) {
        handler.setChecked(checked);
    }
}

---------------Library-------------------
method: org.eclipse.equinox.p2.query.QueryUtil.compoundQueryable(org.eclipse.equinox.p2.query.IQueryable;org.eclipse.equinox.p2.query.IQueryable;)org.eclipse.equinox.p2.query.IQueryable;2
@SuppressWarnings("unchecked")
public static <T> IQueryable<T> compoundQueryable(IQueryable<T> query1, IQueryable<T> query2) {
    return new  CompoundQueryable<T>(new IQueryable[] { query1, query2 });
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.Diffs.createListDiff(org.eclipse.core.databinding.observable.list.ListDiffEntry;org.eclipse.core.databinding.observable.list.ListDiffEntry;)org.eclipse.core.databinding.observable.list.ListDiff;2
public static ListDiff createListDiff(ListDiffEntry difference1, ListDiffEntry difference2) {
    return createListDiff(new ListDiffEntry[] { difference1, difference2 });
}
method: org.eclipse.core.databinding.observable.Diffs.createListDiff(Aorg.eclipse.core.databinding.observable.list.ListDiffEntry;)org.eclipse.core.databinding.observable.list.ListDiff;1
public static ListDiff createListDiff(final ListDiffEntry[] differences) {
    return new  ListDiff() {

        public ListDiffEntry[] getDifferences() {
            return differences;
        }
    };
}

---------------Library-------------------
method: org.eclipse.ui.statushandlers.StatusAdapter.setProperty(org.eclipse.core.runtime.QualifiedName;java.lang.Object;)V3
public void setProperty(QualifiedName key, Object value) {
    if (properties == null) {
        properties = new  HashMap();
    }
    properties.put(key, value);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.simpleconfigurator.Activator.stop(org.osgi.framework.BundleContext;)V2
public void stop(BundleContext context) throws Exception {
    if (configuratorRegistration != null) {
        configuratorRegistration.unregister();
        configuratorRegistration = null;
    }
    if (commandRegistration != null) {
        commandRegistration.unregister();
        commandRegistration = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.JavadocWizardPage.createCombo(org.eclipse.swt.widgets.Composite;ILjava.lang.String;org.eclipse.swt.layout.GridData;)org.eclipse.swt.widgets.Combo;5
protected Combo createCombo(Composite composite, int style, String message, GridData gd) {
    Combo combo = new  Combo(composite, style);
    SWTUtil.setDefaultVisibleItemCount(combo);
    if (message != null)
        combo.setText(message);
    combo.setLayoutData(gd);
    return combo;
}
---------------Client-------------------
method: org.eclipse.jsch.internal.ui.preference.SWTUtils.createLabel(org.eclipse.swt.widgets.Composite;java.lang.String;)org.eclipse.swt.widgets.Label;2
public static Label createLabel(Composite parent, String message) {
    return createLabel(parent, message, 1);
}
method: org.eclipse.jsch.internal.ui.preference.SWTUtils.createLabel(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Label;3
public static Label createLabel(Composite parent, String message, int span) {
    final Label label = new  Label(parent, SWT.WRAP);
    if (message != null)
        label.setText(message);
    label.setLayoutData(createHFillGridData(span));
    return label;
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.registry.RegistryReader.readRegistry(org.eclipse.core.runtime.IExtensionRegistry;java.lang.String;java.lang.String;)V4
void readRegistry(IExtensionRegistry registry, String pluginId, String extensionPoint) {
    IExtensionPoint point = registry.getExtensionPoint(pluginId, extensionPoint);
    if (point != null) {
        IExtension[] extensions = point.getExtensions();
        extensions = orderExtensions(extensions);
        for (int i = 0; i < extensions.length; i++) readExtension(extensions[i]);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.CompositeModelProvider.handleChange(org.eclipse.team.core.synchronize.SyncInfo;)V2
protected void handleChange(SyncInfo info) {
    handleRemoval(info.getLocal());
    handleAddition(info);
}
method: org.eclipse.team.internal.ui.synchronize.CompositeModelProvider.handleRemoval(org.eclipse.core.resources.IResource;)V2
protected void handleRemoval(IResource resource) {
    ISynchronizeModelProvider[] providers = getProvidersContaining(resource);
    for (int i = 0; i < providers.length; i++) {
        ISynchronizeModelProvider provider = providers[i];
        removeFromProvider(resource, provider);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.refactoring.PDERenameParticipant.addBuildPropertiesChange(org.eclipse.ltk.core.refactoring.CompositeChange;org.eclipse.core.runtime.IProgressMonitor;)V3
protected void addBuildPropertiesChange(CompositeChange result, IProgressMonitor pm) throws CoreException {
    IFile file = PDEProject.getBuildProperties(fProject);
    if (file.exists()) {
        Change change = BuildPropertiesChange.createRenameChange(file, fElements.keySet().toArray(), getNewNames(), pm);
        if (change != null)
            result.add(change);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.refactoring.PDERenameParticipant.addBundleManifestChange(org.eclipse.ltk.core.refactoring.CompositeChange;org.eclipse.core.runtime.IProgressMonitor;)V3
protected void addBundleManifestChange(CompositeChange result, IProgressMonitor pm) throws CoreException {
    addBundleManifestChange(PDEProject.getManifest(fProject), result, pm);
}
method: org.eclipse.pde.internal.ui.refactoring.PDERenameParticipant.addBundleManifestChange(org.eclipse.core.resources.IFile;org.eclipse.ltk.core.refactoring.CompositeChange;org.eclipse.core.runtime.IProgressMonitor;)V4
protected void addBundleManifestChange(IFile file, CompositeChange result, IProgressMonitor pm) throws CoreException {
    if (file.exists()) {
        Change change = BundleManifestChange.createRenameChange(file, fElements.keySet().toArray(), getNewNames(), pm);
        if (change != null)
            result.add(change);
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.AbstractDebugListSelectionDialog.okPressed()V1
@Override
protected void okPressed() {
    ISelection selection = fViewer.getSelection();
    if (selection instanceof IStructuredSelection) {
        setResult(((IStructuredSelection) selection).toList());
    }
    super.okPressed();
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.InstallWizard.planChanged()V1
protected void planChanged() {
    super.planChanged();
    synchSelections(getOperationSelectionsPage());
}
method: org.eclipse.equinox.internal.p2.ui.dialogs.InstallWizard.getOperationSelectionsPage()org.eclipse.equinox.internal.p2.ui.dialogs.ISelectableIUsPage;1
protected ISelectableIUsPage getOperationSelectionsPage() {
    IWizardPage page = getContainer().getCurrentPage();
    if (page instanceof ISelectableIUsPage)
        return (ISelectableIUsPage) page;
    return mainPage;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.PDESourcePage.updateSelection(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void updateSelection(SelectionChangedEvent event) {
    ISelection sel = event.getSelection();
    if (sel instanceof IStructuredSelection) {
        IStructuredSelection structuredSelection = (IStructuredSelection) sel;
        updateSelection(structuredSelection.getFirstElement());
    }
}
---------------Client-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.OpenEvent;)V2
protected void handleOpen(OpenEvent event) {
    handleOpen(event.getSelection());
}
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.ISelection;)V2
protected void handleOpen(ISelection selection) {
    if (selection instanceof IStructuredSelection) {
        getActionGroup().runDefaultAction((IStructuredSelection) selection);
    }
}

---------------Library-------------------
method: org.eclipse.team.ui.history.HistoryPageSaveablePart.isFile(java.lang.Object;)Z1
private static boolean isFile(Object object) {
    IResource resource = Utils.getResource(object);
    return (resource != null && resource.getType() == IResource.FILE);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgUtils.hasAncestorOfType(org.eclipse.jdt.core.IJavaElement;I)Z2
public static boolean hasAncestorOfType(IJavaElement element, int type) {
    return element.getAncestor(type) != null;
}
method: org.eclipse.jdt.internal.core.JavaElement.getAncestor(I)org.eclipse.jdt.core.IJavaElement;2
public IJavaElement getAncestor(int ancestorType) {
    IJavaElement element = this;
    while (element != null) {
        if (element.getElementType() == ancestorType)
            return element;
        element = element.getParent();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.target.TargetCreationPage$1.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent e) {
    boolean enabled = fExistingTargetButton.getSelection();
    fTargets.setEnabled(enabled);
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageOne$NameGroup.postSetFocus()V1
public void postSetFocus() {
    fNameField.postSetFocusOnDialogField(getShell().getDisplay());
}
method: org.eclipse.jface.wizard.WizardPage.getShell()org.eclipse.swt.widgets.Shell;1
@Override
public Shell getShell() {
    IWizardContainer container = getContainer();
    if (container == null) {
        return null;
    }
    return container.getShell();
}

---------------Library-------------------
method: org.eclipse.ui.internal.WorkbenchConfigurer.getData(java.lang.String;)java.lang.Object;2
@Override
public Object getData(String key) {
    if (key == null) {
        throw new  IllegalArgumentException();
    }
    return extraData.get(key);
}
---------------Client-------------------
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findClass(java.lang.String;)java.lang.Class;2
public Class<?> findClass(String name) throws ClassNotFoundException {
    Class<?> result = findLocalClass(name);
    if (result == null)
        throw new  ClassNotFoundException(name);
    return result;
}
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findLocalClass(java.lang.String;)java.lang.Class;2
public Class<?> findLocalClass(String name) {
    try {
        return classLoader.loadClass(name);
    } catch (ClassNotFoundException e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.spelling.SpellingEngineDescriptor.getLabel()java.lang.String;1
public String getLabel() {
    if (fLabel == null) {
        fLabel = fConfiguration.getAttribute(LABEL_ATTRIBUTE);
        Assert.isNotNull(fLabel);
    }
    return fLabel;
}
---------------Client-------------------
method: org.eclipse.ui.internal.Perspective.getPerspectiveExtensionActionSets()java.util.ArrayList;1
protected ArrayList getPerspectiveExtensionActionSets() {
    return page.getPerspectiveExtensionActionSets(descriptor.getOriginalId());
}
method: org.eclipse.ui.internal.registry.PerspectiveDescriptor.getOriginalId()java.lang.String;1
public String getOriginalId() {
    if (originalId == null) {
        originalId = getId();
    }
    return originalId;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.dialogs.MultiElementListSelectionDialog.setComparator(java.util.Comparator;)V2
public void setComparator(Comparator<?> comparator) {
    fComparator = comparator;
    if (fFilteredList != null)
        fFilteredList.setComparator(fComparator);
}
---------------Client-------------------
method: org.eclipse.jface.text.quickassist.QuickAssistAssistant.setStatusLineVisible(Z)V2
public void setStatusLineVisible(boolean show) {
    fQuickAssistAssistantImpl.setStatusLineVisible(show);
}
method: org.eclipse.jface.text.contentassist.ContentAssistant.setStatusLineVisible(Z)V2
public void setStatusLineVisible(boolean show) {
    fIsStatusLineVisible = show;
    if (fProposalPopup != null)
        fProposalPopup.setStatusLineVisible(show);
}

---------------Library-------------------
method: org.eclipse.emf.ecore.util.DelegatingFeatureMap.lastIndexOf(org.eclipse.emf.ecore.EStructuralFeature;java.lang.Object;Z)I4
protected int lastIndexOf(EStructuralFeature feature, Object object, boolean resolve) {
    FeatureMapUtil.Validator validator = FeatureMapUtil.getValidator(owner.eClass(), feature);
    int result = -1;
    int count = 0;
    if (FeatureMapUtil.isFeatureMap(feature)) {
        for (int i = 0, size = delegateSize(); i < size; ++i) {
            Entry entry = delegateGet(i);
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.equals(object)) {
                    result = count;
                }
                ++count;
            }
        }
    } else if (object != null) {
        int size = delegateSize();
        for (int i = 0; i < size; ++i) {
            Entry entry = delegateGet(i);
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (object.equals(entry.getValue())) {
                    result = count;
                }
                ++count;
            }
        }
        if (resolve) {
            result = -1;
            count = 0;
            for (int i = 0; i < size; ++i) {
                Entry entry = delegateGet(i);
                if (validator.isValid(entry.getEStructuralFeature())) {
                    if (object == resolveProxy((EObject) entry.getValue())) {
                        result = count;
                    }
                    ++count;
                }
            }
        }
    } else {
        for (int i = 0, size = delegateSize(); i < size; ++i) {
            Entry entry = delegateGet(i);
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.getValue() == null) {
                    result = count;
                }
                ++count;
            }
        }
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.emf.ecore.util.DelegatingFeatureMap.basicIndexOf(org.eclipse.emf.ecore.EStructuralFeature;java.lang.Object;)I3
public int basicIndexOf(EStructuralFeature feature, Object object) {
    return indexOf(feature, object, false);
}
method: org.eclipse.emf.ecore.util.DelegatingFeatureMap.indexOf(org.eclipse.emf.ecore.EStructuralFeature;java.lang.Object;Z)I4
protected int indexOf(EStructuralFeature feature, Object object, boolean resolve) {
    FeatureMapUtil.Validator validator = FeatureMapUtil.getValidator(owner.eClass(), feature);
    int result = 0;
    if (FeatureMapUtil.isFeatureMap(feature)) {
        for (int i = 0, size = delegateSize(); i < size; ++i) {
            Entry entry = delegateGet(i);
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.equals(object)) {
                    return result;
                }
                ++result;
            }
        }
    } else if (object != null) {
        int size = delegateSize();
        for (int i = 0; i < size; ++i) {
            Entry entry = delegateGet(i);
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (object.equals(entry.getValue())) {
                    return result;
                }
                ++result;
            }
        }
        if (resolve) {
            result = 0;
            for (int i = 0; i < size; ++i) {
                Entry entry = delegateGet(i);
                if (validator.isValid(entry.getEStructuralFeature())) {
                    if (object == resolveProxy((EObject) entry.getValue())) {
                        return result;
                    }
                    ++result;
                }
            }
        }
    } else {
        for (int i = 0, size = delegateSize(); i < size; ++i) {
            Entry entry = delegateGet(i);
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.getValue() == null) {
                    return result;
                }
                ++result;
            }
        }
    }
    return -1;
}

---------------Library-------------------
method: org.eclipse.swt.widgets.MenuItem.releaseChildren(Z)V2
@Override
void releaseChildren(boolean destroy) {
    if (menu != null) {
        menu.release(false);
        menu = null;
    }
    super.releaseChildren(destroy);
}
---------------Client-------------------
method: org.eclipse.search.internal.ui.SearchResultView.setContentDescription(java.lang.String;)V2
protected void setContentDescription(String title) {
    super.setContentDescription(title);
}
method: org.eclipse.ui.part.ViewPart.setContentDescription(java.lang.String;)V2
@Override
protected void setContentDescription(String description) {
    if (compatibilityTitleListener != null) {
        removePropertyListener(compatibilityTitleListener);
        compatibilityTitleListener = null;
    }
    super.setContentDescription(description);
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.MarkerField.getImageManager()org.eclipse.jface.resource.ResourceManager;1
protected ResourceManager getImageManager() {
    if (imageManager == null)
        return IDEWorkbenchPlugin.getDefault().getResourceManager();
    return imageManager;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.AbstractOpenWizardAction.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell == null) {
        return JavaPlugin.getActiveWorkbenchShell();
    }
    return fShell;
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.ui.dialogs.SelectionDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (title != null) {
        shell.setText(title);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.app.Activator.getEnvironmentInfo()org.eclipse.osgi.service.environment.EnvironmentInfo;0
private static EnvironmentInfo getEnvironmentInfo() {
    BundleContext bc = Activator.getContext();
    if (bc == null)
        return null;
    ServiceReference infoRef = bc.getServiceReference(EnvironmentInfo.class.getName());
    if (infoRef == null)
        return null;
    EnvironmentInfo envInfo = (EnvironmentInfo) bc.getService(infoRef);
    if (envInfo == null)
        return null;
    bc.ungetService(infoRef);
    return envInfo;
}
---------------Client-------------------
method: org.eclipse.equinox.p2.publisher.eclipse.BundlesAction.acquirePluginConverter()org.eclipse.osgi.service.pluginconversion.PluginConverter;0
private static PluginConverter acquirePluginConverter() {
    return (PluginConverter) ServiceHelper.getService(Activator.getContext(), PluginConverter.class.getName());
}
method: org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper.getService(org.osgi.framework.BundleContext;java.lang.String;)java.lang.Object;2
public static Object getService(BundleContext context, String name) {
    if (context == null)
        return null;
    ServiceReference<?> reference = context.getServiceReference(name);
    if (reference == null)
        return null;
    Object result = context.getService(reference);
    context.ungetService(reference);
    return result;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.Utils.asyncExec(java.lang.Runnable;org.eclipse.jface.viewers.StructuredViewer;)V2
public static void asyncExec(final Runnable r, StructuredViewer v) {
    if (v == null)
        return;
    final Control ctrl = v.getControl();
    if (ctrl != null && !ctrl.isDisposed()) {
        ctrl.getDisplay().asyncExec(new  Runnable() {

            public void run() {
                if (!ctrl.isDisposed()) {
                    BusyIndicator.showWhile(ctrl.getDisplay(), r);
                }
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.Utils.syncExec(java.lang.Runnable;org.eclipse.jface.viewers.StructuredViewer;)V2
public static void syncExec(final Runnable r, StructuredViewer v) {
    if (v == null)
        return;
    final Control ctrl = v.getControl();
    syncExec(r, ctrl);
}
method: org.eclipse.team.internal.ui.Utils.syncExec(java.lang.Runnable;org.eclipse.swt.widgets.Control;)V2
public static void syncExec(final Runnable r, final Control ctrl) {
    if (ctrl != null && !ctrl.isDisposed()) {
        ctrl.getDisplay().syncExec(new  Runnable() {

            public void run() {
                if (!ctrl.isDisposed()) {
                    BusyIndicator.showWhile(ctrl.getDisplay(), r);
                }
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.dialogs.PreferencePageContainerDialog.firePageChanged(org.eclipse.jface.dialogs.PageChangedEvent;)V2
private void firePageChanged(final PageChangedEvent event) {
    Object[] listeners = pageChangedListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        final IPageChangedListener l = (IPageChangedListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            public void run() {
                l.pageChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.dialogs.CheatSheetCategoryBasedSelectionDialog.selectPreviouslySelectedCheatSheet(org.eclipse.ui.internal.cheatsheets.registry.CheatSheetCollectionElement;)V2
protected void selectPreviouslySelectedCheatSheet(CheatSheetCollectionElement category) {
    String cheatsheetId = settings.get(STORE_SELECTED_CHEATSHEET_ID);
    if (cheatsheetId == null)
        return;
    CheatSheetElement cheatsheet = category.findCheatSheet(cheatsheetId, false);
    if (cheatsheet == null)
        return;
    treeViewer.setSelection(new  StructuredSelection(cheatsheet));
}
---------------Client-------------------
method: org.eclipse.ui.ide.dialogs.ResourceTreeAndListGroup.initialCheckTreeItem(java.lang.Object;)V2
public void initialCheckTreeItem(Object element) {
    treeItemChecked(element, true);
    selectAndReveal(element);
}
method: org.eclipse.ui.ide.dialogs.ResourceTreeAndListGroup.selectAndReveal(java.lang.Object;)V2
private void selectAndReveal(Object treeElement) {
    treeViewer.reveal(treeElement);
    IStructuredSelection selection = new  StructuredSelection(treeElement);
    treeViewer.setSelection(selection);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.TypeDeclaration;)V2
@Override
public void endVisit(TypeDeclaration node) {
    if (skipNode(node))
        return;
    GenericSequentialFlowInfo info = processSequential(node, node.getSuperclassType());
    process(info, node.superInterfaceTypes());
    process(info, node.bodyDeclarations());
    info.setNoReturn();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.LambdaExpression;)V2
@Override
public void endVisit(LambdaExpression node) {
    if (skipNode(node))
        return;
    GenericSequentialFlowInfo info = createSequential(node);
    process(info, node.parameters());
    process(info, node.getBody());
    info.setNoReturn();
}
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.createSequential(org.eclipse.jdt.core.dom.ASTNode;)org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo;2
protected GenericSequentialFlowInfo createSequential(ASTNode parent) {
    GenericSequentialFlowInfo result = createSequential();
    setFlowInfo(parent, result);
    return result;
}

---------------Library-------------------
method: org.eclipse.jface.text.TextViewer.addTextListener(org.eclipse.jface.text.ITextListener;)V2
public void addTextListener(ITextListener listener) {
    Assert.isNotNull(listener);
    if (fTextListeners == null)
        fTextListeners = new  ArrayList();
    if (!fTextListeners.contains(listener))
        fTextListeners.add(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.progress.WorkbenchSiteProgressService.warnOfContentChange()V1
@Override
public void warnOfContentChange() {
    MPart part = site.getModel();
    if (!part.getTags().contains(CSSConstants.CSS_CONTENT_CHANGE_CLASS)) {
        part.getTags().add(CSSConstants.CSS_CONTENT_CHANGE_CLASS);
    }
}
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.getTags()java.util.List;1
public List<String> getTags() {
    if (tags == null) {
        tags = new  EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION_ELEMENT__TAGS);
    }
    return tags;
}

---------------Library-------------------
method: org.eclipse.core.internal.preferences.EclipsePreferences$SortedProperties.keys()java.util.Enumeration;1
public synchronized Enumeration keys() {
    TreeSet set = new  TreeSet();
    for (Enumeration e = super.keys(); e.hasMoreElements(); ) set.add(e.nextElement());
    return Collections.enumeration(set);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarPackageWizardPage.getSelectedElements()Ajava.lang.Object;1
private Object[] getSelectedElements() {
    return getSelectedResources().toArray();
}
method: org.eclipse.ui.dialogs.WizardExportResourcesPage.getSelectedResources()java.util.List;1
protected List getSelectedResources() {
    Iterator resourcesToExportIterator = this.getSelectedResourcesIterator();
    List resourcesToExport = new  ArrayList();
    while (resourcesToExportIterator.hasNext()) {
        resourcesToExport.add(resourcesToExportIterator.next());
    }
    return resourcesToExport;
}

---------------Library-------------------
method: org.apache.batik.css.dom.CSSOMSVGPaint$AbstractModificationHandler.uriChanged(java.lang.String;)V2
public void uriChanged(String uri) {
    textChanged("url(" + uri + ") none");
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setLocalImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;)V2
public static void setLocalImageDescriptors(IAction action, String iconName) {
    setImageDescriptors(action, "lcl16/", iconName);
}
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;java.lang.String;)V3
public static void setImageDescriptors(IAction action, String type, String relPath) {
    action.setImageDescriptor(create("e" + type, relPath));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.NewAnnotationCreationWizard.addPages()V1
@Override
public void addPages() {
    super.addPages();
    if (fPage == null) {
        fPage = new  NewAnnotationWizardPage();
        fPage.init(getSelection());
    }
    addPage(fPage);
}
---------------Client-------------------
method: org.eclipse.ui.internal.decorators.DecoratorManager.update(java.lang.String;)V2
@Override
public void update(String decoratorId) {
    IBaseLabelProvider provider = getBaseLabelProvider(decoratorId);
    if (provider != null) {
        scheduler.clearResults();
        fireListeners(new  LabelProviderChangedEvent(provider));
    }
}
method: org.eclipse.ui.internal.decorators.DecorationScheduler.clearResults()V1
void clearResults() {
    if (clearJob == null) {
        clearJob = getClearJob();
    }
    clearJob.schedule();
}

---------------Library-------------------
method: org.eclipse.swt.graphics.Transform.invert()V1
public void invert() {
    if (isDisposed())
        SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
    if (Cairo.cairo_matrix_invert(handle) != 0) {
        SWT.error(SWT.ERROR_CANNOT_INVERT_MATRIX);
    }
}
---------------Client-------------------
method: org.eclipse.jface.text.TextViewerUndoManager.reset()V1
public void reset() {
    if (isConnected())
        fDocumentUndoManager.reset();
}
method: org.eclipse.text.undo.DocumentUndoManager.reset()V1
public void reset() {
    if (isConnected()) {
        shutdown();
        initialize();
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TableItem.getImageIndent()I1
public int getImageIndent() {
    checkWidget();
    if (!parent.checkData(this))
        error(SWT.ERROR_WIDGET_DISPOSED);
    return 0;
}
---------------Client-------------------
method: org.eclipse.team.core.diff.provider.DiffTree.getProperty(org.eclipse.core.runtime.IPath;I)Z3
public boolean getProperty(IPath path, int property) {
    return pathTree.getProperty(path, property);
}
method: org.eclipse.team.internal.core.mapping.PathTree.getProperty(org.eclipse.core.runtime.IPath;I)Z3
public synchronized boolean getProperty(IPath path, int property) {
    if (path.segmentCount() == 0)
        return false;
    Node node = getNode(path);
    if (node == null)
        return false;
    return (node.hasFlag(property));
}

---------------Library-------------------
method: org.eclipse.osgi.internal.framework.FilterImpl.getAttributes()Ajava.lang.String;1
public String[] getAttributes() {
    List<String> results = new  ArrayList<String>();
    getAttributesInternal(results);
    return results.toArray(new String[results.size()]);
}
---------------Client-------------------
method: org.eclipse.equinox.p2.engine.ProvisioningContext.getArtifactKeys(org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.equinox.p2.query.IQueryable;2
public IQueryable<IArtifactKey> getArtifactKeys(IProgressMonitor monitor) {
    return QueryUtil.compoundQueryable(getLoadedArtifactRepositories(monitor));
}
method: org.eclipse.equinox.p2.query.QueryUtil.compoundQueryable(java.util.Collection;)org.eclipse.equinox.p2.query.IQueryable;1
public static <T> IQueryable<T> compoundQueryable(Collection<? extends IQueryable<T>> queryables) {
    return new  CompoundQueryable<T>(queryables.toArray(new IQueryable[queryables.size()]));
}

---------------Library-------------------
method: org.apache.lucene.search.function.ByteFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache;java.lang.String;org.apache.lucene.index.IndexReader;)org.apache.lucene.search.function.DocValues;4
@Override
public DocValues getCachedFieldValues(FieldCache cache, String field, IndexReader reader) throws IOException {
    final byte[] arr = cache.getBytes(reader, field, parser);
    return new  DocValues() {

        @Override
        public float floatVal(int doc) {
            return arr[doc];
        }

        @Override
        public int intVal(int doc) {
            return arr[doc];
        }

        @Override
        public String toString(int doc) {
            return description() + '=' + intVal(doc);
        }

        @Override
        Object getInnerArray() {
            return arr;
        }
    };
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb$1.createDropDown(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
@Override
protected Control createDropDown(Composite dropDownParent, IBreadcrumbDropDownSite site, TreePath path) {
    return createDropDownControl(dropDownParent, site, path);
}
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb.createDropDownControl(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
public Control createDropDownControl(Composite parent, final IBreadcrumbDropDownSite site, TreePath paramPath) {
    TreeViewerDropDown dropDownTreeViewer = new  TreeViewerDropDown() {

        SubTreeModelViewer fDropDownViewer;

        @Override
        protected TreeViewer createTreeViewer(Composite composite, int style, final TreePath path) {
            fDropDownViewer = new  SubTreeModelViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.VIRTUAL | SWT.POP_UP, fTreeViewer.getPresentationContext());
            Object launchViewInput = fTreeViewer.getInput();
            fDropDownViewer.setInput(launchViewInput, path.getParentPath());
            ViewerFilter[] filters = fTreeViewer.getFilters();
            fDropDownViewer.setFilters(filters);
            ModelDelta stateDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
            fTreeViewer.saveElementState(TreePath.EMPTY, stateDelta, IModelDelta.EXPAND | IModelDelta.SELECT);
            if (!fView.getBreadcrumbDropDownAutoExpand()) {
                final ModelDelta prunedDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
                stateDelta.accept(new  IModelDeltaVisitor() {

                    ModelDelta copy = prunedDelta;

                    @Override
                    public boolean visit(IModelDelta delta, int depth) {
                        TreePath deltaPath = getViewerTreePath(delta);
                        if (deltaPath.getSegmentCount() == 0) {
                            copy.setChildCount(delta.getChildCount());
                        } else if (deltaPath.getSegmentCount() != 0 && path.startsWith(deltaPath, null)) {
                            copy = copy.addNode(delta.getElement(), delta.getIndex(), delta.getFlags(), delta.getChildCount());
                        }
                        if (deltaPath.equals(path)) {
                            copy.setFlags(IModelDelta.SELECT | IModelDelta.REVEAL);
                            return false;
                        }
                        return true;
                    }

                    private TreePath getViewerTreePath(IModelDelta node) {
                        ArrayList<Object> list = new  ArrayList<Object>();
                        IModelDelta parentDelta = node.getParentDelta();
                        while (parentDelta != null) {
                            list.add(0, node.getElement());
                            node = parentDelta;
                            parentDelta = node.getParentDelta();
                        }
                        return new  TreePath(list.toArray());
                    }
                });
                stateDelta = prunedDelta;
            }
            fDropDownViewer.updateViewer(stateDelta);
            fDropDownViewer.addLabelUpdateListener(new  ILabelUpdateListener() {

                @Override
                public void labelUpdateComplete(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesBegin() {
                }

                @Override
                public void labelUpdateStarted(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesComplete() {
                    new  UIJob(fViewer.getControl().getDisplay(), "resize breadcrub dropdown") {

                        {
                            setSystem(true);
                        }

                        @Override
                        public IStatus runInUIThread(IProgressMonitor monitor) {
                            site.updateSize();
                            return Status.OK_STATUS;
                        }
                    }.schedule();
                }
            });
            return fDropDownViewer;
        }

        @Override
        protected void openElement(ISelection selection) {
            if (fTreeViewer.getControl().isDisposed()) {
                return;
            }
            if (selection != null && (selection instanceof ITreeSelection) && !selection.isEmpty()) {
                TreeModelContentProvider contentProvider = (TreeModelContentProvider) fTreeViewer.getContentProvider();
                TreePath path = TreePath.EMPTY;
                int count = fTreeViewer.getChildCount(path);
                count = contentProvider.viewToModelCount(path, count);
                ModelDelta rootDelta = new  ModelDelta(fTreeViewer.getInput(), -1, IModelDelta.NO_CHANGE, count);
                TreePath rootPath = fDropDownViewer.getRootPath();
                ModelDelta delta = rootDelta;
                for (int i = 0; i < rootPath.getSegmentCount(); i++) {
                    Object element = rootPath.getSegment(i);
                    int index = fTreeViewer.findElementIndex(path, element);
                    index = contentProvider.viewToModelIndex(path, index);
                    path = path.createChildPath(element);
                    count = fTreeViewer.getChildCount(path);
                    count = contentProvider.viewToModelCount(path, count);
                    delta = delta.addNode(rootPath.getSegment(i), index, IModelDelta.NO_CHANGE, count);
                }
                fDropDownViewer.saveElementState(TreePath.EMPTY, delta, IModelDelta.EXPAND | IModelDelta.SELECT);
                rootDelta.accept(new  IModelDeltaVisitor() {

                    @Override
                    public boolean visit(IModelDelta paramDelta, int depth) {
                        if ((paramDelta.getFlags() & IModelDelta.SELECT) != 0) {
                            ((ModelDelta) paramDelta).setFlags(paramDelta.getFlags() | IModelDelta.FORCE);
                        }
                        return true;
                    }
                });
                if (fView.getBreadcrumbDropDownAutoExpand()) {
                    fTreeViewer.collapseToLevel(rootPath, AbstractTreeViewer.ALL_LEVELS);
                }
                fTreeViewer.updateViewer(rootDelta);
                fViewer.setSelection(StructuredSelection.EMPTY);
                site.close();
            }
            super.openElement(selection);
        }
    };
    return dropDownTreeViewer.createDropDown(parent, site, paramPath);
}

---------------Library-------------------
method: org.eclipse.core.internal.filesystem.Policy.log(ILjava.lang.String;java.lang.Throwable;)V3
public static void log(int severity, String message, Throwable t) {
    if (message == null)
        message = "";
    RuntimeLog.log(new  Status(severity, PI_FILE_SYSTEM, 1, message, t));
}
---------------Client-------------------
method: org.eclipse.ant.internal.launching.AntLaunching.log(java.lang.String;java.lang.Throwable;)V2
public static void log(String message, Throwable exception) {
    IStatus status = newErrorStatus(message, exception);
    log(status);
}
method: org.eclipse.ant.internal.launching.AntLaunching.newErrorStatus(java.lang.String;java.lang.Throwable;)org.eclipse.core.runtime.IStatus;2
public static IStatus newErrorStatus(String message, Throwable exception) {
    if (message == null) {
        message = EMPTY_STRING;
    }
    return new  Status(IStatus.ERROR, PLUGIN_ID, 0, message, exception);
}

---------------Library-------------------
method: org.eclipse.search.internal.ui.SearchManager.handleUpdateMatch(org.eclipse.core.resources.IMarker;)V2
private void handleUpdateMatch(IMarker marker) {
    SearchResultViewEntry entry = findEntry(marker);
    if (entry != null) {
        Iterator iter = fListeners.iterator();
        while (iter.hasNext()) ((SearchResultViewer) iter.next()).handleUpdateMatch(entry, false);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.process(org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo;java.util.List;)V3
protected void process(GenericSequentialFlowInfo info, List<? extends ASTNode> nodes) {
    if (nodes == null)
        return;
    for (Iterator<? extends ASTNode> iter = nodes.iterator(); iter.hasNext(); ) {
        info.merge(getFlowInfo(iter.next()), fFlowContext);
    }
}
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo.merge(org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowInfo;org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowContext;)V3
public void merge(FlowInfo info, FlowContext context) {
    if (info == null)
        return;
    mergeSequential(info, context);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.memory.provisional.AbstractAsyncTableRendering.addMenuListener(org.eclipse.jface.action.IMenuListener;)V2
private void addMenuListener(IMenuListener menuListener) {
    if (fMenuListeners == null) {
        fMenuListeners = new  ArrayList<IMenuListener>();
    }
    if (!fMenuListeners.contains(menuListener)) {
        fMenuMgr.addMenuListener(menuListener);
        fMenuListeners.add(menuListener);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.core.ctxhelp.text.CtxHelpDocumentHandler.error(org.xml.sax.SAXParseException;)V2
public void error(SAXParseException e) throws SAXException {
    fModel.addError(e);
    super.error(e);
}
method: org.eclipse.pde.internal.ua.core.ctxhelp.text.CtxHelpModel.addError(java.lang.Exception;)V2
public void addError(Exception e) {
    if (fErrors == null) {
        fErrors = new  ArrayList(1);
    }
    if (!fErrors.contains(e)) {
        fErrors.add(e);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.model.RegistryResolver.getVersionIdentifier(org.eclipse.core.runtime.model.PluginPrerequisiteModel;)org.eclipse.core.runtime.PluginVersionIdentifier;2
private PluginVersionIdentifier getVersionIdentifier(PluginPrerequisiteModel prereq) {
    String version = prereq.getVersion();
    return version == null ? null : new  PluginVersionIdentifier(version);
}
---------------Client-------------------
method: org.eclipse.ui.internal.BrandingProperties.getImage(java.lang.String;org.osgi.framework.Bundle;)org.eclipse.jface.resource.ImageDescriptor;2
public static ImageDescriptor getImage(String value, Bundle definingBundle) {
    URL url = getUrl(value, definingBundle);
    return url == null ? null : ImageDescriptor.createFromURL(url);
}
method: org.eclipse.ui.internal.BrandingProperties.getUrl(java.lang.String;org.osgi.framework.Bundle;)java.net.URL;2
public static URL getUrl(String value, Bundle definingBundle) {
    try {
        if (value != null) {
            return new  URL(value);
        }
    } catch (MalformedURLException e) {
        if (definingBundle != null) {
            return Platform.find(definingBundle, new  Path(value));
        }
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.core.internal.jobs.LockManager$LockState.suspend(org.eclipse.core.internal.jobs.OrderedLock;)org.eclipse.core.internal.jobs.LockManager$LockState;1
protected static LockState suspend(OrderedLock lock) {
    LockState state = new  LockState();
    state.lock = lock;
    state.depth = lock.forceRelease();
    return state;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.formatter.DefaultCodeFormatterOptions.getEclipseDefaultSettings()org.eclipse.jdt.internal.formatter.DefaultCodeFormatterOptions;0
public static DefaultCodeFormatterOptions getEclipseDefaultSettings() {
    DefaultCodeFormatterOptions options = new  DefaultCodeFormatterOptions();
    options.setEclipseDefaultSettings();
    return options;
}
method: org.eclipse.jdt.internal.formatter.DefaultCodeFormatterOptions.setEclipseDefaultSettings()V1
public void setEclipseDefaultSettings() {
    setJavaConventionsSettings();
    this.tab_char = TAB;
    this.tab_size = 4;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.bundle.RequireBundleHeader.getRequiredBundles()Aorg.eclipse.pde.internal.core.text.bundle.RequireBundleObject;1
public RequireBundleObject[] getRequiredBundles() {
    PDEManifestElement[] elements = getElements();
    RequireBundleObject[] result = new RequireBundleObject[elements.length];
    System.arraycopy(elements, 0, result, 0, elements.length);
    return result;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.pipe(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)org.eclipse.equinox.p2.metadata.expression.IExpression;2
public IExpression pipe(IExpression... operands) {
    return Pipe.createPipe(convertArray(operands));
}
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.convertArray(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)Aorg.eclipse.equinox.internal.p2.metadata.expression.Expression;1
protected static Expression[] convertArray(IExpression[] operands) {
    Expression[] ops = new Expression[operands.length];
    System.arraycopy(operands, 0, ops, 0, operands.length);
    return ops;
}

---------------Library-------------------
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;4
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(4);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    return allOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;4
public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third, org.hamcrest.Matcher<? super T> fourth) {
    return org.hamcrest.core.AnyOf.<T>anyOf(first, second, third, fourth);
}
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;4
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    return anyOf(matchers);
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.Diffs$1.getDifferences()Aorg.eclipse.core.databinding.observable.list.ListDiffEntry;1
public ListDiffEntry[] getDifferences() {
    if (lazyDiff == null) {
        lazyDiff = Diffs.computeListDiff(oldList, newList);
    }
    return lazyDiff.getDifferences();
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.Diffs$2.getAdditions()java.util.Set;1
public Set getAdditions() {
    return getLazyDiff().getAdditions();
}
method: org.eclipse.core.databinding.observable.Diffs$2.getLazyDiff()org.eclipse.core.databinding.observable.set.SetDiff;1
private SetDiff getLazyDiff() {
    if (lazyDiff == null) {
        lazyDiff = computeSetDiff(oldSet, newSet);
    }
    return lazyDiff;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.CompilationUnit.getTypes()Aorg.eclipse.jdt.core.IType;1
public IType[] getTypes() throws JavaModelException {
    ArrayList list = getChildrenOfType(TYPE);
    IType[] array = new IType[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.classfmt.NonNullDefaultAwareTypeAnnotationWalker.getNonNullAnnotation(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;)org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;1
private static IBinaryAnnotation getNonNullAnnotation(LookupEnvironment environment) {
    final char[] nonNullAnnotationName = CharOperation.concat('L', CharOperation.concatWith(environment.getNonNullAnnotationName(), '/'), ';');
    return new  IBinaryAnnotation() {

        @Override
        public char[] getTypeName() {
            return nonNullAnnotationName;
        }

        @Override
        public IBinaryElementValuePair[] getElementValuePairs() {
            return null;
        }
    };
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.core.impl.engine.AbstractCSSEngine.parseStyleDeclaration(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSStyleDeclaration;2
@Override
public CSSStyleDeclaration parseStyleDeclaration(InputSource source) throws IOException {
    checkInputSource(source);
    CSSParser parser = makeCSSParser();
    CSSStyleDeclaration styleDeclaration = parser.parseStyleDeclaration(source);
    return styleDeclaration;
}
method: org.eclipse.e4.ui.css.core.impl.dom.parsers.AbstractCSSParser.parseStyleDeclaration(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSStyleDeclaration;2
@Override
public CSSStyleDeclaration parseStyleDeclaration(InputSource source) throws IOException {
    CSSStyleDeclarationImpl styleDeclaration = new  CSSStyleDeclarationImpl(null);
    parseStyleDeclaration(((styleDeclaration)), source);
    return styleDeclaration;
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.preferences.AntClasspathBlock$2.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
@Override
public void keyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        remove();
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.actions.RefreshAction$1.keyReleased(org.eclipse.swt.events.KeyEvent;)V2
public void keyReleased(KeyEvent e) {
    handleKeyReleased(e);
}
method: org.eclipse.equinox.internal.p2.ui.actions.RefreshAction.handleKeyReleased(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyReleased(KeyEvent event) {
    if (event.keyCode == SWT.F5 && event.stateMask == 0) {
        refresh();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.apt.util.Archive.allPackages()java.util.Set;1
public Set<String> allPackages() {
    if (this.packagesCache == null) {
        this.initialize();
    }
    return this.packagesCache.keySet();
}
---------------Client-------------------
method: org.eclipse.ui.wizards.datatransfer.WizardExternalProjectImportPage.getProjectName()java.lang.String;1
public String getProjectName() {
    return getProjectNameFieldValue();
}
method: org.eclipse.ui.wizards.datatransfer.WizardExternalProjectImportPage.getProjectNameFieldValue()java.lang.String;1
private String getProjectNameFieldValue() {
    if (projectNameField == null) {
        return "";
    }
    return projectNameField.getText().trim();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_entry_set_icon_sensitive(JIZ)V3
public static final void gtk_entry_set_icon_sensitive(long entry, int icon_pos, boolean sensitive) {
    lock.lock();
    try {
        _gtk_entry_set_icon_sensitive(entry, icon_pos, sensitive);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.WorkbenchWizardSelectionPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
@Override
public IWizardPage getNextPage() {
    ITriggerPoint triggerPoint = getWorkbench().getActivitySupport().getTriggerPointManager().getTriggerPoint(triggerPointId);
    if (triggerPoint == null || WorkbenchActivityHelper.allowUseOf(triggerPoint, getSelectedNode())) {
        return super.getNextPage();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getModifiedResource()org.eclipse.core.resources.IResource;1
public IResource getModifiedResource() {
    IType enclosing = getEnclosingType();
    if (enclosing != null) {
        return enclosing.getResource();
    }
    IPackageFragment pack = getPackageFragment();
    if (pack != null) {
        String cuName = getCompilationUnitName(getTypeNameWithoutParameters());
        return pack.getCompilationUnit(cuName).getResource();
    }
    return null;
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getEnclosingType()org.eclipse.jdt.core.IType;1
public IType getEnclosingType() {
    if (isEnclosingTypeSelected()) {
        return fCurrEnclosingType;
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.search.indexing.IndexManager.getParticipantsContainer(org.eclipse.jdt.internal.core.index.IndexLocation;)org.eclipse.core.runtime.IPath;2
private IPath getParticipantsContainer(IndexLocation indexLocation) {
    if (this.participantsContainers == null) {
        readParticipantsIndexNamesFile();
    }
    return (IPath) this.participantsContainers.get(indexLocation);
}
---------------Client-------------------
method: org.eclipse.pde.internal.runtime.PDERuntimePlugin.getState()org.eclipse.osgi.service.resolver.State;1
public State getState() {
    return getPlatformAdmin().getState(false);
}
method: org.eclipse.pde.internal.runtime.PDERuntimePlugin.getPlatformAdmin()org.eclipse.osgi.service.resolver.PlatformAdmin;1
public PlatformAdmin getPlatformAdmin() {
    if (platformAdminTracker == null) {
        return null;
    }
    return (PlatformAdmin) platformAdminTracker.getService();
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridLayoutFactory.spacing(II)org.eclipse.jface.layout.GridLayoutFactory;3
public GridLayoutFactory spacing(int hSpacing, int vSpacing) {
    l.horizontalSpacing = hSpacing;
    l.verticalSpacing = vSpacing;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridDataFactory.minSize(II)org.eclipse.jface.layout.GridDataFactory;3
public GridDataFactory minSize(int minX, int minY) {
    data.minimumWidth = minX;
    data.minimumHeight = minY;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.actions.SurroundWithTemplateMenuAction$4.menuShown(org.eclipse.swt.events.MenuEvent;)V2
@Override
public void menuShown(MenuEvent e) {
    Menu m = (Menu) e.widget;
    MenuItem[] items = m.getItems();
    for (int i = 0; i < items.length; i++) {
        items[i].dispose();
    }
    fillMenu(m);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.sessionEnded(J)V2
public void sessionEnded(long elapsedTime) {
    fireSessionFinished();
    fSession.swapOut();
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireSessionFinished()V1
private void fireSessionFinished() {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).sessionFinished(fSession);
    }
}

---------------Library-------------------
method: org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yyclose()V1
public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;
    zzEndRead = zzStartRead;
    if (zzReader != null)
        zzReader.close();
}
---------------Client-------------------
method: org.apache.batik.css.parser.Parser.setLocale(java.util.Locale;)V2
public void setLocale(Locale locale) throws CSSException {
    localizableSupport.setLocale(locale);
}
method: org.apache.batik.i18n.LocalizableSupport.setLocale(java.util.Locale;)V2
public void setLocale(Locale l) {
    if (locale != l) {
        locale = l;
        resourceBundles.clear();
        lastResourceClass = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.generics.ParametricStructureComputer.isParametricType(org.eclipse.jdt.internal.corext.refactoring.typeconstraints.types.TType;)Z2
private boolean isParametricType(TType type) {
    return type.isParameterizedType() || type.isGenericType() || (type.isRawType() && type.getTypeDeclaration().isGenericType());
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.util.JdtFlags.isPackageVisible(org.eclipse.jdt.core.dom.IBinding;)Z1
public static boolean isPackageVisible(IBinding binding) {
    return (!isPrivate(binding) && !isProtected(binding) && !isPublic(binding));
}
method: org.eclipse.jdt.internal.corext.util.JdtFlags.isPublic(org.eclipse.jdt.core.dom.IBinding;)Z1
public static boolean isPublic(IBinding binding) {
    if (isInterfaceOrAnnotationMember(binding))
        return true;
    return Modifier.isPublic(binding.getModifiers());
}

---------------Library-------------------
method: org.eclipse.jdt.core.dom.TypeBinding.getKey()java.lang.String;1
public String getKey() {
    if (this.key == null) {
        this.key = new  String(this.binding.computeUniqueKey());
    }
    return this.key;
}
---------------Client-------------------
method: org.eclipse.emf.common.util.ECollections$2.listIterator()java.util.ListIterator;1
public ListIterator<Map.Entry<K, V>> listIterator() {
    return listView().listIterator();
}
method: org.eclipse.emf.common.util.ECollections$2.listView()java.util.List;1
protected List<Map.Entry<K, V>> listView() {
    if (listView == null) {
        listView = new  AbstractList<Map.Entry<K, V>>() {

            @Override
            public Map.Entry<K, V> get(int index) {
                return basicGet(index);
            }

            @Override
            public int size() {
                return map.size();
            }
        };
    }
    return listView;
}

---------------Library-------------------
method: org.eclipse.ui.internal.forms.widgets.FormsResources.getTextCursor()org.eclipse.swt.graphics.Cursor;0
public static Cursor getTextCursor() {
    if (textCursor == null)
        textCursor = new  Cursor(Display.getCurrent(), SWT.CURSOR_IBEAM);
    return textCursor;
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.provisional.ApiPlugin.getApiBaselineManager()org.eclipse.pde.api.tools.internal.provisional.IApiBaselineManager;1
public IApiBaselineManager getApiBaselineManager() {
    return ApiBaselineManager.getManager();
}
method: org.eclipse.pde.api.tools.internal.ApiBaselineManager.getManager()org.eclipse.pde.api.tools.internal.ApiBaselineManager;0
public static synchronized ApiBaselineManager getManager() {
    if (fInstance == null) {
        fInstance = new  ApiBaselineManager(ApiPlugin.isRunningInFramework());
    }
    return fInstance;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.MatchSection.initialize()V1
private void initialize() {
    IBaseModel model = getPage().getModel();
    if (model instanceof IModelChangeProvider)
        ((IModelChangeProvider) model).addModelChangedListener(this);
}
---------------Client-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.OpenEvent;)V2
protected void handleOpen(OpenEvent event) {
    handleOpen(event.getSelection());
}
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.ISelection;)V2
protected void handleOpen(ISelection selection) {
    if (selection instanceof IStructuredSelection) {
        getActionGroup().runDefaultAction((IStructuredSelection) selection);
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.internal.ProblemFilter.resetState()V1
public void resetState() {
    super.resetState();
    contains = DEFAULT_CONTAINS;
    description = DEFAULT_DESCRIPTION;
    selectBySeverity = DEFAULT_SELECT_BY_SEVERITY;
    severity = DEFAULT_SEVERITY;
}
---------------Client-------------------
method: org.eclipse.jface.preference.ScaleFieldEditor.setDefaultValues()V1
private void setDefaultValues() {
    setValues(0, 10, 1, 1);
}
method: org.eclipse.jface.preference.ScaleFieldEditor.setValues(IIII)V5
private void setValues(int min, int max, int increment, int pageIncrement) {
    this.incrementValue = increment;
    this.maxValue = max;
    this.minValue = min;
    this.pageIncrementValue = pageIncrement;
    updateScale();
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.ExpandableComposite.setFont(org.eclipse.swt.graphics.Font;)V2
public void setFont(Font font) {
    super.setFont(font);
    if (textLabel != null)
        textLabel.setFont(font);
    if (toggle != null)
        toggle.setFont(font);
}
---------------Client-------------------
method: org.eclipse.ui.internal.WWinPluginAction.setChecked(Z)V2
@Override
public void setChecked(boolean checked) {
    super.setChecked(checked);
    if (retargetAction != null) {
        retargetAction.setChecked(checked);
    }
}
method: org.eclipse.ui.actions.RetargetAction.setChecked(Z)V2
@Override
public void setChecked(boolean checked) {
    super.setChecked(checked);
    if (handler != null) {
        handler.setChecked(checked);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.GenerateDiffFileWizard$LocationPage$WorkspaceDialog.close()Z1
public boolean close() {
    if (dlgTitleImage != null)
        dlgTitleImage.dispose();
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.context.InputContextManager.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(IResourceChangeEvent event) {
    IResourceDelta delta = event.getDelta();
    try {
        delta.accept(new  IResourceDeltaVisitor() {

            public boolean visit(IResourceDelta delta) {
                int kind = delta.getKind();
                IResource resource = delta.getResource();
                if (resource instanceof IFile) {
                    if (kind == IResourceDelta.ADDED)
                        asyncStructureChanged((IFile) resource, true);
                    else if (kind == IResourceDelta.REMOVED)
                        asyncStructureChanged((IFile) resource, false);
                    return false;
                }
                return true;
            }
        });
    } catch (CoreException e) {
        PDEPlugin.logException(e);
    }
}
---------------Client-------------------
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(IResourceChangeEvent event) {
    IResourceDelta delta = event.getDelta();
    if (delta != null)
        handleDelta(delta);
}
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.handleDelta(org.eclipse.core.resources.IResourceDelta;)V2
private void handleDelta(IResourceDelta d) {
    try {
        d.accept(new  IResourceDeltaVisitor() {

            public boolean visit(IResourceDelta delta) throws CoreException {
                switch(delta.getKind()) {
                    case IResourceDelta.ADDED:
                        return false;
                    case IResourceDelta.REMOVED:
                        IResource res = delta.getResource();
                        if (res instanceof IFile) {
                            Match[] matches = fResult.getMatches(res);
                            fResult.removeMatches(matches);
                        }
                        break;
                    case IResourceDelta.CHANGED:
                        break;
                }
                return true;
            }
        });
    } catch (CoreException e) {
        SearchPlugin.log(e);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.plugin.Extensions.isValid()Z1
public boolean isValid() {
    if (fValid == null) {
        fValid = new  Boolean(hasRequiredAttributes());
    }
    return fValid.booleanValue();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.ClassFile.isClass()Z1
public boolean isClass() throws JavaModelException {
    return getType().isClass();
}
method: org.eclipse.jdt.internal.core.ClassFile.getType()org.eclipse.jdt.core.IType;1
public IType getType() {
    if (this.binaryType == null) {
        this.binaryType = new  BinaryType(this, getTypeName());
    }
    return this.binaryType;
}

---------------Library-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsMainTab.updateLocation(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateLocation(ILaunchConfiguration configuration) {
    String location = IExternalToolConstants.EMPTY_STRING;
    try {
        location = configuration.getAttribute(IExternalToolConstants.ATTR_LOCATION, IExternalToolConstants.EMPTY_STRING);
    } catch (CoreException ce) {
        ExternalToolsPlugin.getDefault().log(ExternalToolsLaunchConfigurationMessages.ExternalToolsMainTab_Error_reading_configuration_10, ce);
    }
    locationField.setText(location);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ds.core.text.DSModel.getDSComponent()org.eclipse.pde.internal.ds.core.IDSComponent;1
public IDSComponent getDSComponent() {
    if (fComponent == null) {
        fComponent = getFactory().createComponent();
    }
    return fComponent;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.help.internal.base.BaseHelpSystem.resolve(java.lang.String;java.lang.String;)java.net.URL;2
public static URL resolve(String href, String servlet) {
    String url = null;
    if (href == null || href.indexOf("://") != -1 || isFileProtocol(href)) {
        url = href;
    } else {
        BaseHelpSystem.ensureWebappRunning();
        String base = getBase(servlet);
        if (href.startsWith("/")) {
            url = base + href;
        } else {
            url = base + "/" + href;
        }
    }
    try {
        return new  URL(url);
    } catch (MalformedURLException e) {
        return null;
    }
}
---------------Client-------------------
method: org.eclipse.help.ui.internal.DefaultHelpUI.resolve(java.lang.String;Z)java.net.URL;3
public URL resolve(String href, boolean documentOnly) {
    return BaseHelpSystem.resolve(href, documentOnly);
}
method: org.eclipse.help.internal.base.BaseHelpSystem.resolve(java.lang.String;Z)java.net.URL;2
public static URL resolve(String href, boolean documentOnly) {
    String url = null;
    if (href == null || href.indexOf("://") != -1 || isFileProtocol(href))
        url = href;
    else {
        BaseHelpSystem.ensureWebappRunning();
        String base = getBase(documentOnly);
        if (href.startsWith("/"))
            url = base + href;
        else
            url = base + "/" + href;
    }
    try {
        return new  URL(url);
    } catch (MalformedURLException e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.structure.HierarchyProcessor.getUnindentedText(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;2
protected static String getUnindentedText(final String text, final ICompilationUnit declaringCu) throws JavaModelException {
    final String[] lines = Strings.convertIntoLines(text);
    Strings.trimIndentation(lines, declaringCu.getJavaProject(), false);
    return Strings.concatenate(lines, StubUtility.getLineDelimiterUsed(declaringCu));
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.provisional.Factory.methodDescriptor(java.lang.String;java.lang.String;java.lang.String;)org.eclipse.pde.api.tools.internal.provisional.descriptors.IMethodDescriptor;3
public static IMethodDescriptor methodDescriptor(String typename, String name, String signature) {
    IReferenceTypeDescriptor type = typeDescriptor(typename);
    return type.getMethod(name, signature);
}
method: org.eclipse.pde.api.tools.internal.provisional.Factory.typeDescriptor(java.lang.String;)org.eclipse.pde.api.tools.internal.provisional.descriptors.IReferenceTypeDescriptor;1
public static IReferenceTypeDescriptor typeDescriptor(String fullyQualifiedName) {
    String packageName = Signatures.getPackageName(fullyQualifiedName);
    String typeName = Signatures.getTypeName(fullyQualifiedName);
    return packageDescriptor(packageName).getType(typeName);
}

---------------Library-------------------
method: org.eclipse.ui.dialogs.SelectionStatusDialog.create()V1
@Override
public void create() {
    super.create();
    if (fLastStatus != null) {
        updateStatus(fLastStatus);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.lookup.CaptureBinding.genericTypeSignature()AC1
public char[] genericTypeSignature() {
    if (this.genericTypeSignature == null) {
        this.genericTypeSignature = CharOperation.concat(TypeConstants.WILDCARD_CAPTURE, this.wildcard.genericTypeSignature());
    }
    return this.genericTypeSignature;
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.memory.provisional.AbstractAsyncTableRendering$12.getLabel(java.lang.Object;)java.lang.String;2
@Override
public String getLabel(Object o) {
    return AbstractAsyncTableRendering.this.getLabel();
}
method: org.eclipse.debug.internal.ui.memory.provisional.AbstractAsyncTableRendering.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fLabel == null) {
        fLabel = DebugUIMessages.AbstractAsyncTableRendering_1;
        updateRenderingLabel(isVisible());
    }
    return fLabel;
}

---------------Library-------------------
method: org.eclipse.ltk.ui.refactoring.RefactoringWizardPage.getRefactoringSettings()org.eclipse.jface.dialogs.IDialogSettings;1
protected IDialogSettings getRefactoringSettings() {
    IDialogSettings settings = getDialogSettings();
    if (settings == null)
        return null;
    IDialogSettings result = settings.getSection(REFACTORING_SETTINGS);
    if (result == null) {
        result = new  DialogSettings(REFACTORING_SETTINGS);
        settings.addSection(result);
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.AntUIPlugin.getDialogSettingsSection(java.lang.String;)org.eclipse.jface.dialogs.IDialogSettings;2
public IDialogSettings getDialogSettingsSection(String name) {
    IDialogSettings dialogSettings = getDialogSettings();
    IDialogSettings section = dialogSettings.getSection(name);
    if (section == null) {
        section = dialogSettings.addNewSection(name);
    }
    return section;
}
method: org.eclipse.jface.dialogs.DialogSettings.addNewSection(java.lang.String;)org.eclipse.jface.dialogs.IDialogSettings;2
@Override
public IDialogSettings addNewSection(String sectionName) {
    DialogSettings section = new  DialogSettings(sectionName);
    addSection(section);
    return section;
}

---------------Library-------------------
method: org.eclipse.team.ui.mapping.SynchronizationActionProvider.fillActionBars(org.eclipse.ui.IActionBars;)V2
public void fillActionBars(IActionBars actionBars) {
    super.fillActionBars(actionBars);
    if (openWithActions != null)
        openWithActions.fillActionBars(actionBars);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.At.evaluateAsIterator(org.eclipse.equinox.p2.metadata.expression.IEvaluationContext;)java.util.Iterator;2
public Iterator<?> evaluateAsIterator(IEvaluationContext context) {
    Object value = evaluate(context);
    if (!(value instanceof Iterator<?>))
        value = RepeatableIterator.create(value);
    return (Iterator<?>) value;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringActions.getEnclosingType(org.eclipse.jdt.internal.ui.javaeditor.JavaTextSelection;)org.eclipse.jdt.core.IType;1
public static IType getEnclosingType(JavaTextSelection selection) throws JavaModelException {
    return convertToEnclosingType(selection.resolveEnclosingElement());
}
method: org.eclipse.jdt.internal.ui.refactoring.actions.RefactoringActions.convertToEnclosingType(org.eclipse.jdt.core.IJavaElement;)org.eclipse.jdt.core.IType;1
private static IType convertToEnclosingType(IJavaElement element) {
    if (element == null)
        return null;
    if (!(element instanceof IType))
        element = element.getAncestor(IJavaElement.TYPE);
    return (IType) element;
}

---------------Library-------------------
method: org.eclipse.swt.widgets.Combo.setListVisible(Z)V2
public void setListVisible(boolean visible) {
    checkWidget();
    if (visible) {
        OS.gtk_combo_box_popup(handle);
    } else {
        OS.gtk_combo_box_popdown(handle);
    }
}
---------------Client-------------------
method: org.eclipse.swt.internal.image.PngDecodingDataStream.assertImageDataAtEnd()V1
void assertImageDataAtEnd() throws IOException {
    lzBlockReader.assertCompressedDataAtEnd();
}
method: org.eclipse.swt.internal.image.PngLzBlockReader.assertCompressedDataAtEnd()V1
void assertCompressedDataAtEnd() throws IOException {
    assertBlockAtEnd();
    while (!isLastBlock) {
        readNextBlockHeader();
        assertBlockAtEnd();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.configureToggleCommentAction()V1
private void configureToggleCommentAction() {
    IAction action = getAction("ToggleComment");
    if (action instanceof ToggleCommentAction) {
        ISourceViewer sourceViewer = getSourceViewer();
        SourceViewerConfiguration configuration = getSourceViewerConfiguration();
        ((ToggleCommentAction) action).configure(sourceViewer, configuration);
    }
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.editor.AntEditor.doSetSelection(org.eclipse.jface.viewers.ISelection;)V2
@Override
protected void doSetSelection(ISelection selection) {
    super.doSetSelection(selection);
    synchronizeOutlinePage(true);
}
method: org.eclipse.ui.texteditor.AbstractTextEditor.doSetSelection(org.eclipse.jface.viewers.ISelection;)V2
protected void doSetSelection(ISelection selection) {
    if (selection instanceof ITextSelection) {
        ITextSelection textSelection = (ITextSelection) selection;
        selectAndReveal(textSelection.getOffset(), textSelection.getLength());
    }
}

---------------Library-------------------
method: org.eclipse.swt.browser.HelperAppLauncherDialog.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (helperAppLauncherDialog != null) {
        helperAppLauncherDialog.dispose();
        helperAppLauncherDialog = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.actions.SurroundWithTemplateMenuAction.getMenu(org.eclipse.swt.widgets.Control;)org.eclipse.swt.widgets.Menu;2
public Menu getMenu(Control parent) {
    setMenu(new  Menu(parent));
    fillMenu(fMenu);
    initMenu();
    return fMenu;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.GenerateHashCodeEqualsOperation.getReturnFalse()org.eclipse.jdt.core.dom.ReturnStatement;1
private ReturnStatement getReturnFalse() {
    ReturnStatement falseReturn = fAst.newReturnStatement();
    falseReturn.setExpression(fAst.newBooleanLiteral(false));
    return falseReturn;
}
method: org.eclipse.jdt.core.dom.AST.newBooleanLiteral(Z)org.eclipse.jdt.core.dom.BooleanLiteral;2
public BooleanLiteral newBooleanLiteral(boolean value) {
    BooleanLiteral result = new  BooleanLiteral(this);
    result.setBooleanValue(value);
    return result;
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.TextEditorDefaultsPreferencePage$15.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent e) {
    boolean state = master.getSelection();
    for (int i = 0; i < slaves.length; i++) {
        slaves[i].setEnabled(state);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.CCPActionGroup.dispose()V1
@Override
public void dispose() {
    super.dispose();
    deregisterActionsAsSelectionChangeListeners();
}
method: org.eclipse.jdt.ui.actions.CCPActionGroup.deregisterActionsAsSelectionChangeListeners()V1
private void deregisterActionsAsSelectionChangeListeners() {
    ISelectionProvider provider = fSelectionProvider;
    for (int i = 0; i < fActions.length; i++) {
        provider.removeSelectionChangedListener(fActions[i]);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.console.ConsoleFactoryExtension.getLabel()java.lang.String;1
public String getLabel() {
    if (fLabel == null) {
        fLabel = fConfig.getAttribute("label");
    }
    return fLabel;
}
---------------Client-------------------
method: org.eclipse.debug.ui.memory.AbstractTableRendering$16.getLabel(java.lang.Object;)java.lang.String;2
@Override
public String getLabel(Object o) {
    return AbstractTableRendering.this.getLabel();
}
method: org.eclipse.debug.ui.memory.AbstractTableRendering.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fLabel == null) {
        fLabel = buildLabel(true);
    }
    return fLabel;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.illegalTypeForExplicitThis(org.eclipse.jdt.internal.compiler.ast.Receiver;org.eclipse.jdt.internal.compiler.lookup.TypeBinding;)V3
public void illegalTypeForExplicitThis(Receiver receiver, TypeBinding expectedType) {
    this.handle(IProblem.IllegalTypeForExplicitThis, new String[] { new  String(expectedType.readableName()) }, new String[] { new  String(expectedType.shortReadableName()) }, receiver.type.sourceStart, receiver.type.sourceEnd);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.noMoreAvailableSpaceForConstant(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;)V2
public void noMoreAvailableSpaceForConstant(TypeDeclaration typeDeclaration) {
    this.handle(IProblem.TooManyBytesForStringConstant, new String[] { new  String(typeDeclaration.binding.readableName()) }, new String[] { new  String(typeDeclaration.binding.shortReadableName()) }, ProblemSeverities.Abort | ProblemSeverities.Error | ProblemSeverities.Fatal, typeDeclaration.sourceStart, typeDeclaration.sourceEnd);
}
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(IAjava.lang.String;Ajava.lang.String;III)V7
private void handle(int problemId, String[] problemArguments, String[] messageArguments, int severity, int problemStartPosition, int problemEndPosition) {
    this.handle(problemId, problemArguments, 0, messageArguments, severity, problemStartPosition, problemEndPosition);
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TreeItem.getBackground()org.eclipse.swt.graphics.Color;1
public Color getBackground() {
    checkWidget();
    if (!parent.checkData(this))
        error(SWT.ERROR_WIDGET_DISPOSED);
    return _getBackground();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getExtraIndentAfterNewLine()java.lang.String;1
private String getExtraIndentAfterNewLine() {
    int formatterContinuationIndentationSize = getContinuationIndentationSize();
    int binaryAlignmentValue = getBinaryOperatorAlignmentStyle();
    int indentSize = formatterContinuationIndentationSize;
    if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_BY_ONE) {
        indentSize = 1;
    } else if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_ON_COLUMN) {
    }
    return CodeFormatterUtil.createIndentString(indentSize, fProject);
}
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getBinaryOperatorAlignmentStyle()I1
private int getBinaryOperatorAlignmentStyle() {
    String binaryAlignmentValue = getCoreFormatterOption(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_BINARY_EXPRESSION);
    return DefaultCodeFormatterConstants.getIndentStyle(binaryAlignmentValue);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.memory.RenderingViewPane.removeMemoryRendering(org.eclipse.debug.ui.memory.IMemoryRendering;)V2
@Override
public void removeMemoryRendering(IMemoryRendering rendering) {
    if (rendering == null) {
        return;
    }
    memoryBlockRenderingRemoved(rendering);
    if (fRenderingMgr != null) {
        fRenderingMgr.removeMemoryBlockRendering(rendering);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.ant.internal.launching.debug.model.AntDebugTarget.resume()V1
@Override
public void resume() throws DebugException {
    fSuspended = false;
    fController.resume();
    if (fThread.isSuspended()) {
        fThread.resumedByTarget();
    }
    fireResumeEvent(DebugEvent.CLIENT_REQUEST);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.dialogs.TableTextCellEditor.performSelectAll()V1
@Override
public void performSelectAll() {
    text.selectAll();
    checkSelection();
    checkDeleteable();
}
method: org.eclipse.jdt.internal.ui.dialogs.TableTextCellEditor.checkDeleteable()V1
protected void checkDeleteable() {
    boolean oldIsDeleteable = isDeleteable;
    isDeleteable = isDeleteEnabled();
    if (oldIsDeleteable != isDeleteable) {
        fireEnablementChanged(DELETE);
    }
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.search.UseReportConverter$Visitor.formatMessages(Ajava.lang.String;)java.lang.String;2
String formatMessages(String[] messages) {
    if (messages != null) {
        StringBuffer buffer = new  StringBuffer();
        for (int i = 0; i < messages.length; i++) {
            buffer.append(messages[i]);
            if (i < messages.length - 1) {
                buffer.append("\n");
            }
        }
        return buffer.toString();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.nls.NLSFragmentGenerator.join(java.lang.String;Ajava.lang.String;)java.lang.String;3
private String join(String delimiter, String[] parts) {
    return join(delimiter, parts, 0, parts.length);
}
method: org.eclipse.pde.internal.ui.nls.NLSFragmentGenerator.join(java.lang.String;Ajava.lang.String;II)java.lang.String;5
private String join(String delimiter, String[] parts, int offset, int n) {
    StringBuffer builder = new  StringBuffer();
    for (int i = offset; i < n; i++) {
        builder.append(parts[i]);
        if (i < parts.length - 1) {
            builder.append(delimiter);
        }
    }
    return builder.toString();
}

---------------Library-------------------
method: org.eclipse.ui.actions.TextActionHandler.updateActionsEnableState()V1
private void updateActionsEnableState() {
    textCutAction.updateEnabledState();
    textCopyAction.updateEnabledState();
    textPasteAction.updateEnabledState();
    textSelectAllAction.updateEnabledState();
    textDeleteAction.updateEnabledState();
}
---------------Client-------------------
method: org.eclipse.ui.internal.ide.dialogs.ProjectLinkedResourcePage.dispose()V1
public void dispose() {
    pathVariablesGroup.dispose();
    linkedResourceEditor.dispose();
    super.dispose();
}
method: org.eclipse.ui.internal.ide.dialogs.LinkedResourceEditor.dispose()V1
public void dispose() {
    fixedImg.dispose();
    brokenImg.dispose();
    absoluteImg.dispose();
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryEncodingPropertyPage$OSGIPreferenceStore.getDefaultString(java.lang.String;)java.lang.String;2
public String getDefaultString(String name) {
    if (defaults != null) {
        return defaults.get(name, null);
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.debug.ui.memory.AbstractMemoryRendering.getImage()org.eclipse.swt.graphics.Image;1
@Override
public Image getImage() {
    return decorateImage(null);
}
method: org.eclipse.debug.ui.memory.AbstractMemoryRendering.decorateImage(org.eclipse.swt.graphics.Image;)org.eclipse.swt.graphics.Image;2
protected Image decorateImage(Image image) {
    if (fLabelDecorator != null)
        return fLabelDecorator.decorateImage(image, this);
    return image;
}

---------------Library-------------------
method: org.eclipse.jface.text.contentassist.ContentAssistant.hide()V1
protected void hide() {
    if (fProposalPopup != null)
        fProposalPopup.hide();
    if (fContextInfoPopup != null)
        fContextInfoPopup.hide();
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.jface.dialogs.ErrorDialog.close()Z1
@Override
public boolean close() {
    if (clipboard != null) {
        clipboard.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.ui.actions.RenameAction.update(org.eclipse.jface.viewers.ISelection;)V2
@Override
public void update(ISelection selection) {
    fRenameJavaElement.update(selection);
    if (fRenameResource != null)
        fRenameResource.update(selection);
    setEnabled(computeEnabledState());
}
---------------Client-------------------
method: org.eclipse.ui.internal.forms.widgets.FormHeading.setFont(org.eclipse.swt.graphics.Font;)V2
public void setFont(Font font) {
    super.setFont(font);
    titleRegion.setFont(font);
}
method: org.eclipse.swt.widgets.Canvas.setFont(org.eclipse.swt.graphics.Font;)V2
@Override
public void setFont(Font font) {
    checkWidget();
    if (caret != null)
        caret.setFont(font);
    super.setFont(font);
}

---------------Library-------------------
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;3
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(3);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    return allOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;3
public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third) {
    return org.hamcrest.core.AnyOf.<T>anyOf(first, second, third);
}
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;3
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    return anyOf(matchers);
}

---------------Library-------------------
method: org.eclipse.swt.browser.HelperAppLauncherDialog_1_9.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (helperAppLauncherDialog != null) {
        helperAppLauncherDialog.dispose();
        helperAppLauncherDialog = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.CodeTemplatePreferencePage.performCancel()Z1
@Override
public boolean performCancel() {
    if (fCodeTemplateConfigurationBlock != null) {
        fCodeTemplateConfigurationBlock.performCancel();
    }
    return super.performCancel();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.e4.ui.css.core.impl.dom.RGBColorImpl.getCssText()java.lang.String;1
@Override
public String getCssText() {
    return "rgb(" + red.getCssText() + ", " + green.getCssText() + ", " + blue.getCssText() + ")";
}
---------------Client-------------------
method: org.apache.batik.css.engine.value.RGBColorValue.toString()java.lang.String;1
public String toString() {
    return getCssText();
}
method: org.apache.batik.css.engine.value.RGBColorValue.getCssText()java.lang.String;1
public String getCssText() {
    return "rgb(" + red.getCssText() + ", " + green.getCssText() + ", " + blue.getCssText() + ')';
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.actions.breakpoints.EnableBreakpointsAction.dispose()V1
public void dispose() {
    DebugPlugin.getDefault().getBreakpointManager().removeBreakpointListener(this);
    getView().getViewSite().getPage().removePartListener(this);
}
---------------Client-------------------
method: org.eclipse.ui.internal.PluginActionContributionItem.dispose()V1
@Override
public void dispose() {
    unhookListeners();
    disposeIdentifier();
}
method: org.eclipse.ui.internal.PluginActionContributionItem.unhookListeners()V1
private void unhookListeners() {
    PlatformUI.getWorkbench().getActivitySupport().getActivityManager().removeActivityManagerListener(this);
    IIdentifier id = getIdentifier();
    if (id != null) {
        id.removeIdentifierListener(this);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.launcher.NameValuePairDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (fTitle != null) {
        shell.setText(fTitle);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyclose()V1
public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;
    zzEndRead = zzStartRead;
    if (zzReader != null)
        zzReader.close();
}
---------------Client-------------------
method: org.apache.batik.css.parser.Parser.setLocale(java.util.Locale;)V2
public void setLocale(Locale locale) throws CSSException {
    localizableSupport.setLocale(locale);
}
method: org.apache.batik.i18n.LocalizableSupport.setLocale(java.util.Locale;)V2
public void setLocale(Locale l) {
    if (locale != l) {
        locale = l;
        resourceBundles.clear();
        lastResourceClass = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.views.ViewItem.setComplete()V1
void setComplete() {
    completed = true;
    checkDoneLabel.setImage(getCompleteImage());
    if (initialized) {
        checkDoneLabel.getParent().layout();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.dialogs.TableTextCellEditor.performSelectAll()V1
@Override
public void performSelectAll() {
    text.selectAll();
    checkSelection();
    checkDeleteable();
}
method: org.eclipse.jdt.internal.ui.dialogs.TableTextCellEditor.checkDeleteable()V1
protected void checkDeleteable() {
    boolean oldIsDeleteable = isDeleteable;
    isDeleteable = isDeleteEnabled();
    if (oldIsDeleteable != isDeleteable) {
        fireEnablementChanged(DELETE);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.intro.impl.util.Log.getDebugOption(java.lang.String;)Z1
private static boolean getDebugOption(String option) {
    return "true".equalsIgnoreCase(Platform.getDebugOption(PLUGIN_ID + option));
}
---------------Client-------------------
method: org.apache.batik.util.gui.CSSMediaPanel.showDialog(java.awt.Component;java.lang.String;)I2
public static int showDialog(Component parent, String title) {
    return showDialog(parent, title, "");
}
method: org.apache.batik.util.gui.CSSMediaPanel.showDialog(java.awt.Component;java.lang.String;java.lang.String;)I3
public static int showDialog(Component parent, String title, String media) {
    Dialog dialog = new  Dialog(parent, title, media);
    dialog.setModal(true);
    dialog.pack();
    dialog.setVisible(true);
    return dialog.getReturnCode();
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;java.lang.Throwable;)V3
public void debug(String msg, Throwable thrown) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.info(java.lang.Throwable;)V2
public void info(Throwable thrown) {
    info("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.info(java.lang.String;java.lang.Throwable;)V3
public void info(String msg, Throwable thrown) {
    if (_level <= LEVEL_INFO) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":INFO:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.structure.MoveInstanceMethodProcessor$MethodBodyRewriter.visit(java.util.List;)V2
public final void visit(final List<ASTNode> nodes) {
    Assert.isNotNull(nodes);
    ASTNode node = null;
    for (final Iterator<ASTNode> iterator = nodes.iterator(); iterator.hasNext(); ) {
        node = iterator.next();
        node.accept(this);
    }
}
---------------Client-------------------
method: org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(java.util.List;)V2
void rollbackSegmentInfos(List<SegmentInfo> infos) {
    this.clear();
    this.addAll(infos);
}
method: org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable;)V2
public void addAll(Iterable<SegmentInfo> sis) {
    for (final SegmentInfo si : sis) {
        this.add(si);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.isPluginLoaded()Z1
private boolean isPluginLoaded() {
    Bundle bundle = getBundle();
    return bundle != null && bundle.getState() == Bundle.ACTIVE;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgUtils.hasAncestorOfType(org.eclipse.jdt.core.IJavaElement;I)Z2
public static boolean hasAncestorOfType(IJavaElement element, int type) {
    return element.getAncestor(type) != null;
}
method: org.eclipse.jdt.internal.core.JavaElement.getAncestor(I)org.eclipse.jdt.core.IJavaElement;2
public IJavaElement getAncestor(int ancestorType) {
    IJavaElement element = this;
    while (element != null) {
        if (element.getElementType() == ancestorType)
            return element;
        element = element.getParent();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.ui.internal.progress.StatusAdapterHelper.putStatusAdapter(org.eclipse.ui.internal.progress.JobInfo;org.eclipse.ui.statushandlers.StatusAdapter;)V3
public void putStatusAdapter(JobInfo info, StatusAdapter statusAdapter) {
    if (map == null) {
        map = new  HashMap();
    }
    map.put(info, statusAdapter);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.core.expressions.ExpressionInfo.merge(org.eclipse.core.expressions.ExpressionInfo;)V2
public void merge(ExpressionInfo other) {
    mergeDefaultVariableAccess(other);
    mergeSystemPropertyAccess(other);
    mergeAccessedVariableNames(other);
    mergeAccessedPropertyNames(other);
    mergeMisbehavingExpressionTypes(other);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.complete.CompletionParser.consumeEnterAnonymousClassBody(Z)V2
protected void consumeEnterAnonymousClassBody(boolean qualified) {
    popElement(K_SELECTOR_QUALIFIER);
    popElement(K_SELECTOR_INVOCATION_TYPE);
    super.consumeEnterAnonymousClassBody(qualified);
}
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.consumeEnterAnonymousClassBody(Z)V2
protected void consumeEnterAnonymousClassBody(boolean qualified) {
    super.consumeEnterAnonymousClassBody(qualified);
    popElement(K_SELECTOR);
    pushOnElementStack(K_TYPE_DELIMITER);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.model.CVSModelElement.getRunnableContext()org.eclipse.jface.operation.IRunnableContext;1
public IRunnableContext getRunnableContext() {
    if (runnableContext == null) {
        return PlatformUI.getWorkbench().getProgressService();
    }
    return runnableContext;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.AbstractOpenWizardAction.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell == null) {
        return JavaPlugin.getActiveWorkbenchShell();
    }
    return fShell;
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.ui.internal.HeapStatus.setMark()V1
private void setMark() {
    updateStats();
    mark = usedMem;
    hasChanged = true;
    redraw();
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.PDEFormEditor.updateUndo(org.eclipse.jface.action.IAction;org.eclipse.jface.action.IAction;)V3
void updateUndo(IAction undoAction, IAction redoAction) {
    IModelUndoManager undoManager = fInputContextManager.getUndoManager();
    if (undoManager != null)
        undoManager.setActions(undoAction, redoAction);
}
method: org.eclipse.pde.internal.ui.editor.ModelUndoManager.setActions(org.eclipse.jface.action.IAction;org.eclipse.jface.action.IAction;)V3
public void setActions(IAction undoAction, IAction redoAction) {
    this.undoAction = undoAction;
    this.redoAction = redoAction;
    updateActions();
}

---------------Library-------------------
method: org.eclipse.ui.internal.forms.widgets.FormTextModel.dispose()V1
public void dispose() {
    paragraphs = null;
    selectedSegmentIndex = -1;
    savedSelectedLinkIndex = -1;
    selectableSegments = null;
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;)V3
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey) {
    setMatchingCharacterPainterPreferenceKeys(enableKey, colorKey, null, null);
}
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;java.lang.String;java.lang.String;)V5
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey, String highlightCharacterAtCaretLocationKey, String enclosingPeerCharactersKey) {
    fMatchingCharacterPainterEnableKey = enableKey;
    fMatchingCharacterPainterColorKey = colorKey;
    fMatchingCharacterPainterEnclosingPeerCharactersKey = enclosingPeerCharactersKey;
    fMatchingCharacterPainterHighlightCharacterAtCaretLocationKey = highlightCharacterAtCaretLocationKey;
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage.getTitleText(org.eclipse.jface.viewers.ISelection;)java.lang.String;2
public String getTitleText(ISelection selection) {
    if (selection == null) {
        selection = currentSelection;
    }
    return registry.getLabelProvider().getText(selection);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.NewLibraryPluginCreationPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
public IWizardPage getNextPage() {
    updateData();
    return super.getNextPage();
}
method: org.eclipse.jface.wizard.WizardPage.getNextPage()org.eclipse.jface.wizard.IWizardPage;1
@Override
public IWizardPage getNextPage() {
    if (wizard == null) {
        return null;
    }
    return wizard.getNextPage(this);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.sdk.SimpleLicenseManager.reject(org.eclipse.equinox.p2.metadata.ILicense;)Z2
public boolean reject(ILicense license) {
    accepted.remove(license.getUUID());
    updatePreferences();
    return true;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring$UsedNamesCollector.visit(org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;)Z2
@Override
public boolean visit(AnnotationTypeDeclaration node) {
    return visitType(node);
}
method: org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring$UsedNamesCollector.visitType(org.eclipse.jdt.core.dom.AbstractTypeDeclaration;)Z2
private boolean visitType(AbstractTypeDeclaration node) {
    result.add(node.getName().getIdentifier());
    return false;
}

---------------Library-------------------
method: org.apache.jasper.xmlparser.TreeNode.addAttribute(java.lang.String;java.lang.String;)V3
public void addAttribute(String name, String value) {
    if (attributes == null)
        attributes = new  HashMap<String, String>();
    attributes.put(name, value);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.target.TargetDefinitionContentPage$20.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
@Override
public void keyPressed(KeyEvent e) {
    if (e.character == SWT.DEL && e.stateMask == 0) {
        handleRemove();
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.actions.RefreshAction$1.keyReleased(org.eclipse.swt.events.KeyEvent;)V2
public void keyReleased(KeyEvent e) {
    handleKeyReleased(e);
}
method: org.eclipse.equinox.internal.p2.ui.actions.RefreshAction.handleKeyReleased(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyReleased(KeyEvent event) {
    if (event.keyCode == SWT.F5 && event.stateMask == 0) {
        refresh();
    }
}

---------------Library-------------------
method: org.eclipse.jface.viewers.deferred.BackgroundContentProvider.refresh()V1
public void refresh() {
    if (updator.isDisposed()) {
        return;
    }
    model.requestUpdate(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.ShowFastViewContribution$2.widgetDisposed(org.eclipse.swt.events.DisposeEvent;)V2
@Override
public void widgetDisposed(DisposeEvent e) {
    ref.removePropertyListener(propertyListener);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.removePropertyListener(org.eclipse.ui.IPropertyListener;)V2
@Override
public void removePropertyListener(IPropertyListener listener) {
    if (isDisposed()) {
        return;
    }
    propChangeListeners.remove(listener);
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.internal.MarkerView.initToolBar(org.eclipse.jface.action.IToolBarManager;)V2
protected void initToolBar(IToolBarManager tbm) {
    tbm.add(deleteAction);
    tbm.add(getFilterAction());
    tbm.update(false);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingPresenter.inputDocumentChanged(org.eclipse.jface.text.IDocument;org.eclipse.jface.text.IDocument;)V3
public void inputDocumentChanged(IDocument oldInput, IDocument newInput) {
    manageDocument(newInput);
}
method: org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingPresenter.manageDocument(org.eclipse.jface.text.IDocument;)V2
private void manageDocument(IDocument document) {
    if (document != null) {
        document.addPositionCategory(getPositionCategory());
        document.addPositionUpdater(fPositionUpdater);
        document.addDocumentListener(this);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.refactoring.nls.search.NLSSearchResultRequestor.beginReporting()V1
@Override
public void beginReporting() {
    loadProperties();
    fUsedPropertyNames = new  HashSet<String>(fProperties.size());
}
---------------Client-------------------
method: org.eclipse.jetty.server.ssl.SslSelectChannelConnector.setIncludeCipherSuites(Ajava.lang.String;)V2
@Deprecated
public void setIncludeCipherSuites(String[] cipherSuites) {
    _sslContextFactory.setIncludeCipherSuites(cipherSuites);
}
method: org.eclipse.jetty.util.ssl.SslContextFactory.setIncludeCipherSuites(Ajava.lang.String;)V2
public void setIncludeCipherSuites(String... cipherSuites) {
    checkNotStarted();
    _includeCipherSuites = new  LinkedHashSet<String>(Arrays.asList(cipherSuites));
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.feature.PluginSection.handleSelectAll()V1
private void handleSelectAll() {
    IStructuredContentProvider provider = (IStructuredContentProvider) fPluginViewer.getContentProvider();
    Object[] elements = provider.getElements(fPluginViewer.getInput());
    StructuredSelection ssel = new  StructuredSelection(elements);
    fPluginViewer.setSelection(ssel);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage$2.menuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
public void menuAboutToShow(IMenuManager m) {
    contextMenuAboutToShow(m);
}
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage.contextMenuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
protected void contextMenuAboutToShow(IMenuManager menu) {
    JavaPlugin.createStandardGroups(menu);
    IStructuredSelection selection = (IStructuredSelection) getSelection();
    fActionGroups.setContext(new  ActionContext(selection));
    fActionGroups.fillContextMenu(menu);
}

---------------Library-------------------
method: org.eclipse.ui.internal.decorators.DecoratorManager.fireListeners(org.eclipse.jface.viewers.LabelProviderChangedEvent;)V2
void fireListeners(final LabelProviderChangedEvent event) {
    Object[] array = listeners.getListeners();
    for (int i = 0; i < array.length; i++) {
        final ILabelProviderListener l = (ILabelProviderListener) array[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.labelProviderChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
protected void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postSelectionChangedListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.TreeModelContentProvider.getViewerTreePath(org.eclipse.debug.internal.ui.viewers.model.provisional.IModelDelta;)org.eclipse.jface.viewers.TreePath;2
TreePath getViewerTreePath(IModelDelta node) {
    ArrayList<Object> list = new  ArrayList<Object>();
    IModelDelta parentDelta = node.getParentDelta();
    while (parentDelta != null) {
        list.add(0, node.getElement());
        node = parentDelta;
        parentDelta = node.getParentDelta();
    }
    return new  TreePath(list.toArray());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.LabelResult.getTreePath()org.eclipse.jface.viewers.TreePath;1
@Override
public TreePath getTreePath() {
    return getNode().getTreePath();
}
method: org.eclipse.debug.internal.ui.viewers.ModelNode.getTreePath()org.eclipse.jface.viewers.TreePath;1
public synchronized TreePath getTreePath() {
    List<Object> path = new  ArrayList<Object>();
    ModelNode node = this;
    while (node != null) {
        path.add(0, node.getElement());
        node = node.getParentNode();
    }
    return new  TreePath(path.toArray());
}

---------------Library-------------------
method: org.eclipse.text.undo.DocumentUndoManager$UndoableTextChange.set(II)V3
protected void set(int start, int end) {
    fStart = start;
    fEnd = end;
    fText = null;
    fPreservedText = null;
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;)V3
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey) {
    setMatchingCharacterPainterPreferenceKeys(enableKey, colorKey, null, null);
}
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;java.lang.String;java.lang.String;)V5
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey, String highlightCharacterAtCaretLocationKey, String enclosingPeerCharactersKey) {
    fMatchingCharacterPainterEnableKey = enableKey;
    fMatchingCharacterPainterColorKey = colorKey;
    fMatchingCharacterPainterEnclosingPeerCharactersKey = enclosingPeerCharactersKey;
    fMatchingCharacterPainterHighlightCharacterAtCaretLocationKey = highlightCharacterAtCaretLocationKey;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.feature.PatchSpecPage.createTopGroup(org.eclipse.swt.widgets.Composite;)V2
protected void createTopGroup(Composite container) {
    Group patchGroup = new  Group(container, SWT.NULL);
    patchGroup.setLayout(new  GridLayout(2, false));
    GridData gd = new  GridData(GridData.FILL_HORIZONTAL);
    gd.verticalIndent = 10;
    patchGroup.setLayoutData(gd);
    patchGroup.setText(PDEUIMessages.NewFeatureWizard_SpecPage_patchProperties);
    Label label = new  Label(patchGroup, SWT.NULL);
    label.setText(PDEUIMessages.NewFeaturePatch_SpecPage_id);
    fPatchIdText = new  Text(patchGroup, SWT.BORDER);
    fPatchIdText.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
    label = new  Label(patchGroup, SWT.NULL);
    label.setText(PDEUIMessages.NewFeaturePatch_SpecPage_name);
    fPatchNameText = new  Text(patchGroup, SWT.BORDER);
    fPatchNameText.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
    label = new  Label(patchGroup, SWT.NULL);
    label.setText(PDEUIMessages.NewFeaturePatch_SpecPage_provider);
    fPatchProviderCombo = new  Combo(patchGroup, SWT.BORDER | SWT.DROP_DOWN);
    fPatchProviderCombo.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
    BundleProviderHistoryUtil.loadHistory(fPatchProviderCombo, getDialogSettings());
    createInstallHandlerText(patchGroup);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.feature.FeatureSpecPage.createContents(org.eclipse.swt.widgets.Composite;)V2
protected void createContents(Composite container) {
    Group group = new  Group(container, SWT.NULL);
    group.setLayout(new  GridLayout(2, false));
    GridData gd = new  GridData(GridData.FILL_HORIZONTAL);
    gd.verticalIndent = 10;
    group.setLayoutData(gd);
    group.setText(PDEUIMessages.BaseFeatureSpecPage_featurePropertiesGroup_title);
    Label label = new  Label(group, SWT.NULL);
    label.setText(PDEUIMessages.NewFeatureWizard_SpecPage_id);
    fFeatureIdText = new  Text(group, SWT.BORDER);
    fFeatureIdText.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
    createCommonInput(group);
    label = new  Label(group, SWT.NULL);
    label.setText(PDEUIMessages.NewFeatureWizard_SpecPage_provider);
    fFeatureProviderCombo = new  Combo(group, SWT.BORDER | SWT.DROP_DOWN);
    fFeatureProviderCombo.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
    BundleProviderHistoryUtil.loadHistory(fFeatureProviderCombo, getDialogSettings());
    createInstallHandlerText(group);
}
method: org.eclipse.pde.internal.ui.wizards.feature.AbstractFeatureSpecPage.createInstallHandlerText(org.eclipse.swt.widgets.Composite;)V2
protected void createInstallHandlerText(Composite parent) {
    Label libraryLabel = new  Label(parent, SWT.NULL);
    libraryLabel.setText(PDEUIMessages.NewFeatureWizard_SpecPage_library);
    fLibraryText = new  Text(parent, SWT.SINGLE | SWT.BORDER);
    fLibraryText.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
}

---------------Library-------------------
method: org.apache.batik.css.engine.value.LengthManager.createFloatValue(SF)org.apache.batik.css.engine.value.Value;3
public Value createFloatValue(short type, float floatValue) throws DOMException {
    switch(type) {
        case CSSPrimitiveValue.CSS_PERCENTAGE:
        case CSSPrimitiveValue.CSS_EMS:
        case CSSPrimitiveValue.CSS_EXS:
        case CSSPrimitiveValue.CSS_PX:
        case CSSPrimitiveValue.CSS_CM:
        case CSSPrimitiveValue.CSS_MM:
        case CSSPrimitiveValue.CSS_IN:
        case CSSPrimitiveValue.CSS_PT:
        case CSSPrimitiveValue.CSS_PC:
        case CSSPrimitiveValue.CSS_NUMBER:
            return new  FloatValue(type, floatValue);
    }
    throw createInvalidFloatTypeDOMException(type);
}
---------------Client-------------------
method: org.eclipse.jdt.core.dom.AST.createInstance(I)org.eclipse.jdt.core.dom.ASTNode;2
public ASTNode createInstance(int nodeType) {
    Class nodeClass = ASTNode.nodeClassForType(nodeType);
    return createInstance(nodeClass);
}
method: org.eclipse.jdt.core.dom.ASTNode.nodeClassForType(I)java.lang.Class;1
public static Class nodeClassForType(int nodeType) {
    switch(nodeType) {
        case ANNOTATION_TYPE_DECLARATION:
            return AnnotationTypeDeclaration.class;
        case ANNOTATION_TYPE_MEMBER_DECLARATION:
            return AnnotationTypeMemberDeclaration.class;
        case ANONYMOUS_CLASS_DECLARATION:
            return AnonymousClassDeclaration.class;
        case ARRAY_ACCESS:
            return ArrayAccess.class;
        case ARRAY_CREATION:
            return ArrayCreation.class;
        case ARRAY_INITIALIZER:
            return ArrayInitializer.class;
        case ARRAY_TYPE:
            return ArrayType.class;
        case ASSERT_STATEMENT:
            return AssertStatement.class;
        case ASSIGNMENT:
            return Assignment.class;
        case BLOCK:
            return Block.class;
        case BLOCK_COMMENT:
            return BlockComment.class;
        case BOOLEAN_LITERAL:
            return BooleanLiteral.class;
        case BREAK_STATEMENT:
            return BreakStatement.class;
        case CAST_EXPRESSION:
            return CastExpression.class;
        case CATCH_CLAUSE:
            return CatchClause.class;
        case CHARACTER_LITERAL:
            return CharacterLiteral.class;
        case CLASS_INSTANCE_CREATION:
            return ClassInstanceCreation.class;
        case COMPILATION_UNIT:
            return CompilationUnit.class;
        case CONDITIONAL_EXPRESSION:
            return ConditionalExpression.class;
        case CONSTRUCTOR_INVOCATION:
            return ConstructorInvocation.class;
        case CONTINUE_STATEMENT:
            return ContinueStatement.class;
        case CREATION_REFERENCE:
            return CreationReference.class;
        case DIMENSION:
            return Dimension.class;
        case DO_STATEMENT:
            return DoStatement.class;
        case EMPTY_STATEMENT:
            return EmptyStatement.class;
        case ENHANCED_FOR_STATEMENT:
            return EnhancedForStatement.class;
        case ENUM_CONSTANT_DECLARATION:
            return EnumConstantDeclaration.class;
        case ENUM_DECLARATION:
            return EnumDeclaration.class;
        case EXPRESSION_METHOD_REFERENCE:
            return ExpressionMethodReference.class;
        case EXPRESSION_STATEMENT:
            return ExpressionStatement.class;
        case FIELD_ACCESS:
            return FieldAccess.class;
        case FIELD_DECLARATION:
            return FieldDeclaration.class;
        case FOR_STATEMENT:
            return ForStatement.class;
        case IF_STATEMENT:
            return IfStatement.class;
        case IMPORT_DECLARATION:
            return ImportDeclaration.class;
        case INFIX_EXPRESSION:
            return InfixExpression.class;
        case INITIALIZER:
            return Initializer.class;
        case INSTANCEOF_EXPRESSION:
            return InstanceofExpression.class;
        case INTERSECTION_TYPE:
            return IntersectionType.class;
        case JAVADOC:
            return Javadoc.class;
        case LABELED_STATEMENT:
            return LabeledStatement.class;
        case LAMBDA_EXPRESSION:
            return LambdaExpression.class;
        case LINE_COMMENT:
            return LineComment.class;
        case MARKER_ANNOTATION:
            return MarkerAnnotation.class;
        case MEMBER_REF:
            return MemberRef.class;
        case MEMBER_VALUE_PAIR:
            return MemberValuePair.class;
        case METHOD_DECLARATION:
            return MethodDeclaration.class;
        case METHOD_INVOCATION:
            return MethodInvocation.class;
        case METHOD_REF:
            return MethodRef.class;
        case METHOD_REF_PARAMETER:
            return MethodRefParameter.class;
        case MODIFIER:
            return Modifier.class;
        case NAME_QUALIFIED_TYPE:
            return NameQualifiedType.class;
        case NORMAL_ANNOTATION:
            return NormalAnnotation.class;
        case NULL_LITERAL:
            return NullLiteral.class;
        case NUMBER_LITERAL:
            return NumberLiteral.class;
        case PACKAGE_DECLARATION:
            return PackageDeclaration.class;
        case PARAMETERIZED_TYPE:
            return ParameterizedType.class;
        case PARENTHESIZED_EXPRESSION:
            return ParenthesizedExpression.class;
        case POSTFIX_EXPRESSION:
            return PostfixExpression.class;
        case PREFIX_EXPRESSION:
            return PrefixExpression.class;
        case PRIMITIVE_TYPE:
            return PrimitiveType.class;
        case QUALIFIED_NAME:
            return QualifiedName.class;
        case QUALIFIED_TYPE:
            return QualifiedType.class;
        case RETURN_STATEMENT:
            return ReturnStatement.class;
        case SIMPLE_NAME:
            return SimpleName.class;
        case SIMPLE_TYPE:
            return SimpleType.class;
        case SINGLE_MEMBER_ANNOTATION:
            return SingleMemberAnnotation.class;
        case SINGLE_VARIABLE_DECLARATION:
            return SingleVariableDeclaration.class;
        case STRING_LITERAL:
            return StringLiteral.class;
        case SUPER_CONSTRUCTOR_INVOCATION:
            return SuperConstructorInvocation.class;
        case SUPER_FIELD_ACCESS:
            return SuperFieldAccess.class;
        case SUPER_METHOD_INVOCATION:
            return SuperMethodInvocation.class;
        case SUPER_METHOD_REFERENCE:
            return SuperMethodReference.class;
        case SWITCH_CASE:
            return SwitchCase.class;
        case SWITCH_STATEMENT:
            return SwitchStatement.class;
        case SYNCHRONIZED_STATEMENT:
            return SynchronizedStatement.class;
        case TAG_ELEMENT:
            return TagElement.class;
        case TEXT_ELEMENT:
            return TextElement.class;
        case THIS_EXPRESSION:
            return ThisExpression.class;
        case THROW_STATEMENT:
            return ThrowStatement.class;
        case TRY_STATEMENT:
            return TryStatement.class;
        case TYPE_DECLARATION:
            return TypeDeclaration.class;
        case TYPE_DECLARATION_STATEMENT:
            return TypeDeclarationStatement.class;
        case TYPE_METHOD_REFERENCE:
            return TypeMethodReference.class;
        case TYPE_LITERAL:
            return TypeLiteral.class;
        case TYPE_PARAMETER:
            return TypeParameter.class;
        case UNION_TYPE:
            return UnionType.class;
        case VARIABLE_DECLARATION_EXPRESSION:
            return VariableDeclarationExpression.class;
        case VARIABLE_DECLARATION_FRAGMENT:
            return VariableDeclarationFragment.class;
        case VARIABLE_DECLARATION_STATEMENT:
            return VariableDeclarationStatement.class;
        case WHILE_STATEMENT:
            return WhileStatement.class;
        case WILDCARD_TYPE:
            return WildcardType.class;
    }
    throw new  IllegalArgumentException();
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.SWTFactory.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;3
public static Button createRadioButton(Composite parent, String label, int hspan) {
    Button button = new  Button(parent, SWT.RADIO);
    button.setFont(parent.getFont());
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData(GridData.BEGINNING);
    gd.horizontalSpan = hspan;
    button.setLayoutData(gd);
    setButtonDimensionHint(button);
    return button;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.SWTFactory.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;)org.eclipse.swt.widgets.Button;2
public static Button createRadioButton(Composite parent, String label) {
    return createRadioButton(parent, label, 1);
}
method: org.eclipse.pde.internal.ui.SWTFactory.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;3
public static Button createRadioButton(Composite parent, String label, int hspan) {
    Button button = new  Button(parent, SWT.RADIO);
    button.setFont(parent.getFont());
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData();
    gd.horizontalSpan = hspan;
    button.setLayoutData(gd);
    SWTFactory.setButtonDimensionHint(button);
    return button;
}

---------------Library-------------------
method: org.eclipse.ui.internal.forms.widgets.FormsResources.getBusyCursor()org.eclipse.swt.graphics.Cursor;0
public static Cursor getBusyCursor() {
    if (busyCursor == null)
        busyCursor = new  Cursor(Display.getCurrent(), SWT.CURSOR_WAIT);
    return busyCursor;
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.provisional.ApiPlugin.getApiBaselineManager()org.eclipse.pde.api.tools.internal.provisional.IApiBaselineManager;1
public IApiBaselineManager getApiBaselineManager() {
    return ApiBaselineManager.getManager();
}
method: org.eclipse.pde.api.tools.internal.ApiBaselineManager.getManager()org.eclipse.pde.api.tools.internal.ApiBaselineManager;0
public static synchronized ApiBaselineManager getManager() {
    if (fInstance == null) {
        fInstance = new  ApiBaselineManager(ApiPlugin.isRunningInFramework());
    }
    return fInstance;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.SmartBackspaceManager$BackspaceListener.beginChange()V1
private void beginChange() {
    ITextViewer viewer = fViewer;
    if (viewer instanceof TextViewer) {
        TextViewer v = (TextViewer) viewer;
        v.getRewriteTarget().beginCompoundChange();
    }
}
---------------Client-------------------
method: org.eclipse.ui.forms.DetailsPart.refresh()V1
public void refresh() {
    IDetailsPage page = getCurrentPage();
    if (page != null)
        page.refresh();
}
method: org.eclipse.ui.forms.DetailsPart.getCurrentPage()org.eclipse.ui.forms.IDetailsPage;1
public IDetailsPage getCurrentPage() {
    Control control = pageBook.getCurrentPage();
    if (control != null) {
        Object data = control.getData();
        if (data instanceof IDetailsPage)
            return (IDetailsPage) data;
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.template.java.VarResolver.getVisibleVariables(java.lang.String;org.eclipse.jdt.internal.corext.template.java.JavaContext;)Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;3
@Override
protected Variable[] getVisibleVariables(String type, JavaContext context) {
    Variable[] localVariables = context.getLocalVariables(type);
    Variable[] fields = context.getFields(type);
    Variable[] result = new Variable[localVariables.length + fields.length];
    System.arraycopy(localVariables, 0, result, 0, localVariables.length);
    System.arraycopy(fields, 0, result, localVariables.length, fields.length);
    return result;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.dom.fragments.AssociativeInfixExpressionFragment.getSubFragmentsMatching(org.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;)Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;2
public IASTFragment[] getSubFragmentsMatching(IASTFragment toMatch) {
    return union(getSubFragmentsWithMyNodeMatching(toMatch), getSubFragmentsWithAnotherNodeMatching(toMatch));
}
method: org.eclipse.jdt.internal.corext.dom.fragments.AssociativeInfixExpressionFragment.union(Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;)Aorg.eclipse.jdt.internal.corext.dom.fragments.IASTFragment;2
private static IASTFragment[] union(IASTFragment[] a1, IASTFragment[] a2) {
    IASTFragment[] union = new IASTFragment[a1.length + a2.length];
    System.arraycopy(a1, 0, union, 0, a1.length);
    System.arraycopy(a2, 0, union, a1.length, a2.length);
    return union;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.mappings.ChangeSetLabelProvider.internalGetChangeSet(java.lang.Object;)org.eclipse.team.internal.core.subscribers.DiffChangeSet;2
private DiffChangeSet internalGetChangeSet(Object elementOrPath) {
    if (elementOrPath instanceof TreePath) {
        TreePath tp = (TreePath) elementOrPath;
        Object o = tp.getFirstSegment();
        if (o instanceof DiffChangeSet) {
            return (DiffChangeSet) o;
        }
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceModelLabelProvider.getResource(java.lang.Object;)org.eclipse.core.resources.IResource;2
private IResource getResource(Object elementOrPath) {
    Object element = internalGetElement(elementOrPath);
    if (element instanceof IResource) {
        return (IResource) element;
    }
    return null;
}
method: org.eclipse.team.internal.ui.mapping.ResourceModelLabelProvider.internalGetElement(java.lang.Object;)java.lang.Object;2
private Object internalGetElement(Object elementOrPath) {
    if (elementOrPath instanceof TreePath) {
        TreePath tp = (TreePath) elementOrPath;
        return tp.getLastSegment();
    }
    return elementOrPath;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(org.eclipse.pde.internal.ua.core.icheatsheet.comp.ICompCSObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
private void firePropertyChanged(ICompCSObject object, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        IModelChangeProvider provider = fModel;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.feature.FeatureObject.firePropertyChanged(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChanged(String property, Object oldValue, Object newValue) {
    firePropertyChanged(this, property, oldValue, newValue);
}
method: org.eclipse.pde.internal.core.feature.FeatureObject.firePropertyChanged(org.eclipse.pde.internal.core.ifeature.IFeatureObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
protected void firePropertyChanged(IFeatureObject object, String property, Object oldValue, Object newValue) {
    if (model.isEditable()) {
        IModelChangeProvider provider = model;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}

---------------Library-------------------
method: org.eclipse.jface.viewers.deferred.BackgroundContentProvider.flush(Ajava.lang.Object;org.eclipse.jface.viewers.deferred.LazySortedCollection;)V3
private void flush(Object[] toFlush, LazySortedCollection collection) {
    for (int i = 0; i < toFlush.length; i++) {
        Object item = toFlush[i];
        if (collection.contains(item)) {
            updator.clear(item);
        }
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.core.subscribers.CheckedInChangeSet.remove(Aorg.eclipse.core.resources.IResource;)V2
public void remove(IResource[] resources) {
    for (int i = 0; i < resources.length; i++) {
        IResource resource = resources[i];
        remove(resource);
    }
}
method: org.eclipse.team.internal.core.subscribers.CheckedInChangeSet.remove(org.eclipse.core.resources.IResource;)V2
public void remove(IResource resource) {
    if (contains(resource)) {
        set.remove(resource);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.junit.ui.GotoReferencedTestAction.getShell()org.eclipse.swt.widgets.Shell;1
private Shell getShell() {
    if (fWorkbench != null)
        return fWorkbench.getShell();
    return JUnitPlugin.getActiveWorkbenchShell();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarPackageActionDelegate.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell != null)
        return fShell;
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.osgi.internal.framework.EquinoxContainer.systemStop(org.osgi.framework.BundleContext;)V2
void systemStop(BundleContext bc) {
    ServiceTracker<SignedContentFactory, SignedContentFactory> current;
    synchronized (this.monitor) {
        current = signedContentFactory;
    }
    if (current != null) {
        current.close();
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.security.storage.PasswordProviderSelector.added(Aorg.eclipse.core.runtime.IExtension;)V2
public void added(IExtension[] extensions) {
    clearCaches();
}
method: org.eclipse.equinox.internal.security.storage.PasswordProviderSelector.clearCaches()V1
public void clearCaches() {
    synchronized (modules) {
        modules.clear();
        SecurePreferencesMapper.clearPasswordCache();
    }
}

---------------Library-------------------
method: org.eclipse.ltk.internal.core.refactoring.UndoManager2.getUnwrappedOperation(org.eclipse.core.commands.operations.IUndoableOperation;)org.eclipse.ltk.internal.core.refactoring.UndoableOperation2ChangeAdapter;2
private UndoableOperation2ChangeAdapter getUnwrappedOperation(IUndoableOperation operation) {
    IUndoableOperation result = operation;
    if (result instanceof TriggeredOperations) {
        result = ((TriggeredOperations) result).getTriggeringOperation();
    }
    if (result instanceof UndoableOperation2ChangeAdapter) {
        return (UndoableOperation2ChangeAdapter) result;
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceModelLabelProvider.getResource(java.lang.Object;)org.eclipse.core.resources.IResource;2
private IResource getResource(Object elementOrPath) {
    Object element = internalGetElement(elementOrPath);
    if (element instanceof IResource) {
        return (IResource) element;
    }
    return null;
}
method: org.eclipse.team.internal.ui.mapping.ResourceModelLabelProvider.internalGetElement(java.lang.Object;)java.lang.Object;2
private Object internalGetElement(Object elementOrPath) {
    if (elementOrPath instanceof TreePath) {
        TreePath tp = (TreePath) elementOrPath;
        return tp.getLastSegment();
    }
    return elementOrPath;
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.editor.actions.OpenAntDeclarationHander.execute(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;2
@Override
public Object execute(ExecutionEvent event) throws ExecutionException {
    IEditorPart part = HandlerUtil.getActiveEditor(event);
    if (part instanceof AntEditor) {
        ((AntEditor) part).openReferenceElement();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.ltk.ui.refactoring.RefactoringWizardPage.getRefactoring()org.eclipse.ltk.core.refactoring.Refactoring;1
protected Refactoring getRefactoring() {
    RefactoringWizard wizard = getRefactoringWizard();
    if (wizard == null)
        return null;
    return wizard.getRefactoring();
}
method: org.eclipse.ltk.ui.refactoring.RefactoringWizardPage.getRefactoringWizard()org.eclipse.ltk.ui.refactoring.RefactoringWizard;1
protected RefactoringWizard getRefactoringWizard() {
    IWizard wizard = getWizard();
    if (wizard instanceof RefactoringWizard)
        return (RefactoringWizard) wizard;
    return null;
}

---------------Library-------------------
method: org.eclipse.search2.internal.ui.SearchHistorySelectionDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
protected void createButtonsForButtonBar(Composite parent) {
    createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OPEN_LABEL, true);
    createButton(parent, IDialogConstants.OPEN_ID, SearchMessages.SearchHistorySelectionDialog_open_in_new_button, false);
    createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.SuperInterfaceSelectionDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    createButton(parent, ADD_ID, NewWizardMessages.SuperInterfaceSelectionDialog_addButton_label, true);
    super.createButtonsForButtonBar(parent);
}
method: org.eclipse.ui.dialogs.SelectionDialog.createButtonsForButtonBar(org.eclipse.swt.widgets.Composite;)V2
@Override
protected void createButtonsForButtonBar(Composite parent) {
    createButton(parent, IDialogConstants.OK_ID, IDialogConstants.OK_LABEL, true);
    createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.VariablePathDialogField.getShell()org.eclipse.swt.widgets.Shell;1
private Shell getShell() {
    if (fBrowseVariableButton != null) {
        return fBrowseVariableButton.getShell();
    }
    return JavaPlugin.getActiveWorkbenchShell();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarPackageActionDelegate.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell != null)
        return fShell;
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.UserValidationDialog.close()Z1
public boolean close() {
    if (keyLockImage != null) {
        keyLockImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.set.ComputedSet$1.getDelegate()org.eclipse.core.databinding.observable.set.SetDiff;1
private SetDiff getDelegate() {
    if (delegate == null)
        delegate = Diffs.computeSetDiff(oldSet, getSet());
    return delegate;
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.Diffs$2.getAdditions()java.util.Set;1
public Set getAdditions() {
    return getLazyDiff().getAdditions();
}
method: org.eclipse.core.databinding.observable.Diffs$2.getLazyDiff()org.eclipse.core.databinding.observable.set.SetDiff;1
private SetDiff getLazyDiff() {
    if (lazyDiff == null) {
        lazyDiff = computeSetDiff(oldSet, newSet);
    }
    return lazyDiff;
}

---------------Library-------------------
method: org.eclipse.ui.dialogs.SaveAsDialog.close()Z1
public boolean close() {
    if (dlgTitleImage != null) {
        dlgTitleImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_gc_set_ts_origin(JII)V3
public static final void gdk_gc_set_ts_origin(long gc, int x, int y) {
    lock.lock();
    try {
        _gdk_gc_set_ts_origin(gc, x, y);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractTextEditor.updateSelectionDependentActions()V1
protected void updateSelectionDependentActions() {
    if (fSelectionActions != null) {
        Iterator e = fSelectionActions.iterator();
        while (e.hasNext()) updateAction((String) e.next());
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.builders.XMLErrorReporter.getWritableString(java.lang.String;)java.lang.String;2
private String getWritableString(String source) {
    StringBuffer buf = new  StringBuffer();
    for (int i = 0; i < source.length(); i++) {
        char c = source.charAt(i);
        switch(c) {
            case '&':
                buf.append("&amp;");
                break;
            case '<':
                buf.append("&lt;");
                break;
            case '>':
                buf.append("&gt;");
                break;
            case '\'':
                buf.append("&apos;");
                break;
            case '\"':
                buf.append("&quot;");
                break;
            default:
                buf.append(c);
                break;
        }
    }
    return buf.toString();
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.feature.FeatureObject.getWritableString(java.lang.String;)java.lang.String;2
protected String getWritableString(String source) {
    return PDEXMLHelper.getWritableString(source);
}
method: org.eclipse.pde.internal.core.util.PDEXMLHelper.getWritableString(java.lang.String;)java.lang.String;1
public static String getWritableString(String source) {
    if (source == null)
        return "";
    StringBuffer buf = new  StringBuffer();
    for (int i = 0; i < source.length(); i++) {
        char c = source.charAt(i);
        switch(c) {
            case '&':
                buf.append("&amp;");
                break;
            case '<':
                buf.append("&lt;");
                break;
            case '>':
                buf.append("&gt;");
                break;
            case '\'':
                buf.append("&apos;");
                break;
            case '\"':
                buf.append("&quot;");
                break;
            default:
                buf.append(c);
                break;
        }
    }
    return buf.toString();
}

---------------Library-------------------
method: org.eclipse.jface.resource.FontDescriptor.copy(Aorg.eclipse.swt.graphics.FontData;)Aorg.eclipse.swt.graphics.FontData;1
public static FontData[] copy(FontData[] original) {
    FontData[] result = new FontData[original.length];
    for (int i = 0; i < original.length; i++) {
        FontData next = original[i];
        result[i] = copy(next);
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.ui.internal.console.IOConsolePage.dispose()V1
@Override
public void dispose() {
    if (fScrollLockAction != null) {
        fScrollLockAction.dispose();
        fScrollLockAction = null;
    }
    getConsole().removePropertyChangeListener(fPropertyChangeListener);
    super.dispose();
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.AvailableIUsPage$3.widgetDisposed(org.eclipse.swt.events.DisposeEvent;)V2
@Override
public void widgetDisposed(DisposeEvent e) {
    removeProvisioningListeners();
}
method: org.eclipse.equinox.internal.p2.ui.dialogs.AvailableIUsPage.removeProvisioningListeners()V1
void removeProvisioningListeners() {
    if (profileListener != null) {
        ProvUI.getProvisioningEventBus(getProvisioningUI().getSession()).removeListener(profileListener);
        profileListener = null;
    }
}

---------------Library-------------------
method: org.eclipse.jface.layout.RowLayoutFactory.margins(II)org.eclipse.jface.layout.RowLayoutFactory;3
public RowLayoutFactory margins(int width, int height) {
    layout.marginWidth = width;
    layout.marginHeight = height;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.ui.editor.ctxhelp.CtxHelpEditor.contributeToToolbar(org.eclipse.jface.action.IToolBarManager;)V2
public void contributeToToolbar(IToolBarManager manager) {
    if (WorkspaceModelManager.isPluginProject(getCommonProject()) && getAggregateModel().isEditable()) {
        manager.add(new  ControlContribution("Register") {

            protected Control createControl(Composite parent) {
                ImageHyperlink fImageHyperlinkRegisterTOC = new  ImageHyperlink(parent, SWT.NONE);
                fImageHyperlinkRegisterTOC.setText(CtxHelpMessages.CtxHelpEditor_text);
                fImageHyperlinkRegisterTOC.setUnderlined(true);
                fImageHyperlinkRegisterTOC.setForeground(getToolkit().getHyperlinkGroup().getForeground());
                fImageHyperlinkRegisterTOC.addHyperlinkListener(new  IHyperlinkListener() {

                    public void linkActivated(HyperlinkEvent e) {
                        handleRegisterCtxHelpFile();
                    }

                    public void linkEntered(HyperlinkEvent e) {
                        ((ImageHyperlink) e.getSource()).setForeground(getToolkit().getHyperlinkGroup().getActiveForeground());
                        getEditorSite().getActionBars().getStatusLineManager().setMessage(CtxHelpMessages.CtxHelpEditor_text);
                    }

                    public void linkExited(HyperlinkEvent e) {
                        ((ImageHyperlink) e.getSource()).setForeground(getToolkit().getHyperlinkGroup().getForeground());
                        getEditorSite().getActionBars().getStatusLineManager().setMessage(null);
                    }
                });
                return fImageHyperlinkRegisterTOC;
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.CSAbstractEditor.contributeToToolbar(org.eclipse.jface.action.IToolBarManager;)V2
public void contributeToToolbar(IToolBarManager manager) {
    if (WorkspaceModelManager.isPluginProject(getCommonProject()) && getAggregateModel().isEditable())
        manager.add(createUIControlConRegisterCS());
}
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.CSAbstractEditor.createUIControlConRegisterCS()org.eclipse.jface.action.ControlContribution;1
private ControlContribution createUIControlConRegisterCS() {
    return new  ControlContribution("Register") {

        protected Control createControl(Composite parent) {
            createUIImageHyperlinkRegisterCS(parent);
            createUIListenerImageHyperlinkRegisterCS();
            return fImageHyperlinkRegisterCS;
        }
    };
}

---------------Library-------------------
method: org.eclipse.jface.text.AbstractInformationControl.handleDispose()V1
protected void handleDispose() {
    if (fStatusLabelFont != null) {
        fStatusLabelFont.dispose();
        fStatusLabelFont = null;
    }
    if (fStatusLabelForeground != null) {
        fStatusLabelForeground.dispose();
        fStatusLabelForeground = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.Button.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    if (groupHandle != 0)
        OS.g_object_unref(groupHandle);
    groupHandle = 0;
    if (imageList != null)
        imageList.dispose();
    imageList = null;
    image = null;
    text = null;
}
---------------Client-------------------
method: org.eclipse.swt.widgets.TabFolder.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    if (imageList != null)
        imageList.dispose();
    imageList = null;
}
method: org.eclipse.swt.widgets.Composite.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    if (imHandle != 0)
        OS.g_object_unref(imHandle);
    imHandle = 0;
    layout = null;
    tabList = null;
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.AccessibilityPreferencePage$2.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent e) {
    boolean state = master.getSelection();
    for (int i = 0; i < slaves.length; i++) {
        slaves[i].setEnabled(state);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.CCPActionGroup.dispose()V1
@Override
public void dispose() {
    super.dispose();
    deregisterActionsAsSelectionChangeListeners();
}
method: org.eclipse.jdt.ui.actions.CCPActionGroup.deregisterActionsAsSelectionChangeListeners()V1
private void deregisterActionsAsSelectionChangeListeners() {
    ISelectionProvider provider = fSelectionProvider;
    for (int i = 0; i < fActions.length; i++) {
        provider.removeSelectionChangedListener(fActions[i]);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.SelectResourcesBlock.ungrayCheckHierarchy(java.lang.Object;)V2
private void ungrayCheckHierarchy(Object treeElement) {
    if (!determineShouldBeAtLeastGrayChecked(treeElement))
        checkedStateStore.remove(treeElement);
    Object parent = treeContentProvider.getParent(treeElement);
    if (parent != null)
        ungrayCheckHierarchy(parent);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.addDateTag(org.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;org.eclipse.team.internal.ccvs.core.CVSTag;)V3
public void addDateTag(ICVSRepositoryLocation location, CVSTag tag) {
    if (tag == null)
        return;
    RepositoryRoot root = getRepositoryRootFor(location);
    root.addDateTag(tag);
    broadcastRepositoryChange(root);
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot.addDateTag(org.eclipse.team.internal.ccvs.core.CVSTag;)V2
public void addDateTag(CVSTag tag) {
    if (!dateTags.contains(tag)) {
        dateTags.add(tag);
    }
}

---------------Library-------------------
method: org.eclipse.swt.browser.PromptService2Factory.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_context_get_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_style_context_get_color(long context, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_style_context_get_color(context, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.feature.RequiresSection.handleSelectAll()V1
private void handleSelectAll() {
    IStructuredContentProvider provider = (IStructuredContentProvider) fPluginViewer.getContentProvider();
    Object[] elements = provider.getElements(fPluginViewer.getInput());
    StructuredSelection ssel = new  StructuredSelection(elements);
    fPluginViewer.setSelection(ssel);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage$2.menuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
public void menuAboutToShow(IMenuManager m) {
    contextMenuAboutToShow(m);
}
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage.contextMenuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
protected void contextMenuAboutToShow(IMenuManager menu) {
    JavaPlugin.createStandardGroups(menu);
    IStructuredSelection selection = (IStructuredSelection) getSelection();
    fActionGroups.setContext(new  ActionContext(selection));
    fActionGroups.fillContextMenu(menu);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.builder.Reference.typeReference(org.eclipse.pde.api.tools.internal.provisional.model.IApiMember;java.lang.String;java.lang.String;II)org.eclipse.pde.api.tools.internal.builder.Reference;5
public static Reference typeReference(IApiMember origin, String typeName, String signature, int kind, int flags) {
    Reference ref = new  Reference();
    ref.fSourceMember = origin;
    ref.fTypeName = typeName;
    ref.fKind = kind;
    ref.fType = IReference.T_TYPE_REFERENCE;
    ref.fSignature = signature;
    ref.fFlags = flags;
    return ref;
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.builder.Reference.fieldReference(org.eclipse.pde.api.tools.internal.provisional.model.IApiMember;java.lang.String;java.lang.String;I)org.eclipse.pde.api.tools.internal.builder.Reference;4
public static Reference fieldReference(IApiMember origin, String typeName, String fieldName, int kind) {
    return fieldReference(origin, typeName, fieldName, kind, 0);
}
method: org.eclipse.pde.api.tools.internal.builder.Reference.fieldReference(org.eclipse.pde.api.tools.internal.provisional.model.IApiMember;java.lang.String;java.lang.String;II)org.eclipse.pde.api.tools.internal.builder.Reference;5
public static Reference fieldReference(IApiMember origin, String typeName, String fieldName, int kind, int flags) {
    Reference ref = new  Reference();
    ref.fSourceMember = origin;
    ref.fTypeName = typeName;
    ref.fMemberName = fieldName;
    ref.fKind = kind;
    ref.fType = IReference.T_FIELD_REFERENCE;
    ref.fFlags = flags;
    return ref;
}

---------------Library-------------------
method: org.eclipse.emf.ecore.change.impl.FeatureChangeImpl.applyAndReverse(org.eclipse.emf.common.util.EList;)V2
protected void applyAndReverse(EList<Object> toList) {
    for (ListChange listChange : getListChanges()) {
        listChange.applyAndReverse(toList);
    }
}
---------------Client-------------------
method: org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(java.util.List;)V2
void rollbackSegmentInfos(List<SegmentInfo> infos) {
    this.clear();
    this.addAll(infos);
}
method: org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable;)V2
public void addAll(Iterable<SegmentInfo> sis) {
    for (final SegmentInfo si : sis) {
        this.add(si);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceModelActionProvider.fillActionBars(org.eclipse.ui.IActionBars;)V2
public void fillActionBars(IActionBars actionBars) {
    super.fillActionBars(actionBars);
    if (refactorActions != null)
        refactorActions.fillActionBars(actionBars);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.ui.internal.registry.PerspectiveDescriptor.getPluginId()java.lang.String;1
@Override
public String getPluginId() {
    return configElement == null ? pluginId : configElement.getNamespaceIdentifier();
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    return fInput.getContentBaseAddress();
}
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentInput.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    if (fMemoryBlockBaseAddress == null) {
        try {
            updateContentBaseAddress();
        } catch (DebugException e) {
            fMemoryBlockBaseAddress = new  BigInteger("0");
        }
    }
    return fMemoryBlockBaseAddress;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_modify_base(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_widget_modify_base(long widget, int state, GdkColor color) {
    lock.lock();
    try {
        _gtk_widget_modify_base(widget, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.pde.core.plugin.TargetPlatform.getDefaultLocation()java.lang.String;0
public static String getDefaultLocation() {
    Location location = Platform.getInstallLocation();
    if (location != null) {
        URL url = Platform.getInstallLocation().getURL();
        IPath path = new  Path(url.getFile()).removeTrailingSeparator();
        return path.toOSString();
    }
    return "";
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.mappings.ModelUpdateOperation.createMergeContext()org.eclipse.team.core.mapping.provider.SynchronizationContext;1
protected SynchronizationContext createMergeContext() {
    return WorkspaceSubscriberContext.createContext(getScopeManager(), getMergeType());
}
method: org.eclipse.team.internal.ccvs.ui.mappings.WorkspaceSubscriberContext.createContext(org.eclipse.team.core.mapping.ISynchronizationScopeManager;I)org.eclipse.team.internal.ccvs.ui.mappings.WorkspaceSubscriberContext;2
public static WorkspaceSubscriberContext createContext(ISynchronizationScopeManager manager, int type) {
    CVSWorkspaceSubscriber subscriber = CVSProviderPlugin.getPlugin().getCVSWorkspaceSubscriber();
    WorkspaceSubscriberContext mergeContext = new  WorkspaceSubscriberContext(subscriber, manager, type);
    mergeContext.initialize();
    return mergeContext;
}

---------------Library-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsMainTab.initializeFrom(org.eclipse.debug.core.ILaunchConfiguration;)V2
@Override
public void initializeFrom(ILaunchConfiguration configuration) {
    fInitializing = true;
    updateLocation(configuration);
    updateWorkingDirectory(configuration);
    updateArgument(configuration);
    fInitializing = false;
    setDirty(false);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.feature.PortabilitySection.refresh()V1
public void refresh() {
    setValue(IEnvironment.P_OS);
    setValue(IEnvironment.P_WS);
    setValue(IEnvironment.P_ARCH);
    setValue(IEnvironment.P_NL);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.ui.internal.views.log.ImportLogAction.dispose()V1
public void dispose() {
    if (toolbarMenu != null) {
        toolbarMenu.dispose();
        toolbarMenu = null;
    }
    if (popupMenu != null) {
        popupMenu.dispose();
        popupMenu = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.part.MultiPageEditorPart.firePageChanged(org.eclipse.jface.dialogs.PageChangedEvent;)V2
private void firePageChanged(final PageChangedEvent event) {
    Object[] listeners = pageChangeListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final IPageChangedListener l = (IPageChangedListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.pageChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.preferences.ApiUseScanPreferencePage$1.keyReleased(org.eclipse.swt.events.KeyEvent;)V2
@Override
public void keyReleased(KeyEvent e) {
    if (e.stateMask == SWT.NONE && e.keyCode == SWT.DEL) {
        removeLocation();
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea$7.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void keyPressed(KeyEvent event) {
    handleKeyPressed(event);
}
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea.handleKeyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        deleteDateTag();
    }
}

---------------Library-------------------
method: org.eclipse.jsch.internal.ui.authenticator.KeyboardInteractiveDialog.close()Z1
public boolean close() {
    if (keyLockImage != null) {
        keyLockImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.quickdiff.ReferenceProviderDescriptor.getId()java.lang.String;1
public String getId() {
    if (fId == null) {
        fId = fConfiguration.getAttribute(ID_ATTRIBUTE);
        Assert.isNotNull(fId);
    }
    return fId;
}
---------------Client-------------------
method: org.eclipse.ui.internal.Perspective.getPerspectiveExtensionActionSets()java.util.ArrayList;1
protected ArrayList getPerspectiveExtensionActionSets() {
    return page.getPerspectiveExtensionActionSets(descriptor.getOriginalId());
}
method: org.eclipse.ui.internal.registry.PerspectiveDescriptor.getOriginalId()java.lang.String;1
public String getOriginalId() {
    if (originalId == null) {
        originalId = getId();
    }
    return originalId;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.hierarchy.HierarchyBuilder.worked(org.eclipse.core.runtime.IProgressMonitor;I)V3
protected void worked(IProgressMonitor monitor, int work) {
    if (monitor != null) {
        if (monitor.isCanceled()) {
            throw new  OperationCanceledException();
        } else {
            monitor.worked(work);
        }
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;)V1
public static void updateMonitor(IProgressMonitor monitor) throws OperationCanceledException {
    updateMonitor(monitor, 0);
}
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;I)V2
public static void updateMonitor(IProgressMonitor monitor, int work) throws OperationCanceledException {
    if (monitor == null) {
        return;
    }
    if (monitor.isCanceled()) {
        throw new  OperationCanceledException();
    }
    monitor.worked(work);
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.site.SiteArchive.restoreProperty(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void restoreProperty(String name, Object oldValue, Object newValue) throws CoreException {
    if (name.equals(P_PATH)) {
        setPath(newValue != null ? newValue.toString() : null);
    } else if (name.equals(P_URL)) {
        setURL(newValue != null ? newValue.toString() : null);
    } else
        super.restoreProperty(name, oldValue, newValue);
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.site.VersionableObject.restoreProperty(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void restoreProperty(String name, Object oldValue, Object newValue) throws CoreException {
    if (name.equals(P_VERSION)) {
        setVersion(newValue != null ? newValue.toString() : null);
    } else
        super.restoreProperty(name, oldValue, newValue);
}
method: org.eclipse.pde.internal.core.site.IdentifiableObject.restoreProperty(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void restoreProperty(String name, Object oldValue, Object newValue) throws CoreException {
    if (name.equals(P_ID)) {
        setId(newValue != null ? newValue.toString() : null);
    } else
        super.restoreProperty(name, oldValue, newValue);
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractDocumentProvider.fireElementContentReplaced(java.lang.Object;)V2
protected void fireElementContentReplaced(Object element) {
    Iterator e = new  ArrayList(fElementStateListeners).iterator();
    while (e.hasNext()) {
        IElementStateListener l = (IElementStateListener) e.next();
        l.elementContentReplaced(element);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.CommitCommentArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    super.firePropertyChangeChange(property, oldValue, newValue);
}
method: org.eclipse.team.internal.ui.dialogs.DialogArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    PropertyChangeEvent event = new  PropertyChangeEvent(this, property, oldValue, newValue);
    for (Iterator iter = listeners.iterator(); iter.hasNext(); ) {
        IPropertyChangeListener listener = (IPropertyChangeListener) iter.next();
        listener.propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.refactoring.ExtractInterfaceWizard$ExtractInterfaceInputPage.dispose()V1
@Override
public void dispose() {
    fInstanceofCheckbox = null;
    fGenerateCommentsCheckbox = null;
    fReplaceAllCheckbox = null;
    fTableViewer = null;
    super.dispose();
}
---------------Client-------------------
method: org.eclipse.swt.widgets.TableItem.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    font = null;
    cellFont = null;
}
method: org.eclipse.swt.widgets.Item.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    text = null;
    image = null;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.wizards.ProjectSelectionPage.createControl(org.eclipse.swt.widgets.Composite;)V2
public void createControl(Composite parent) {
    Composite composite = SWTUtils.createHVFillComposite(parent, SWTUtils.MARGINS_DIALOG, 2);
    createProjectList(composite);
    createShareButton(composite);
    updateEnablements();
    setControl(composite);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.addTags(org.eclipse.team.internal.ccvs.core.ICVSResource;Aorg.eclipse.team.internal.ccvs.core.CVSTag;)V3
public void addTags(ICVSResource resource, CVSTag[] tags) throws CVSException {
    RepositoryRoot root = getRepositoryRootFor(resource);
    String remotePath = RepositoryRoot.getRemotePathFor(resource);
    root.addTags(remotePath, tags);
    broadcastRepositoryChange(root);
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.getRepositoryRootFor(org.eclipse.team.internal.ccvs.core.ICVSResource;)org.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot;2
private RepositoryRoot getRepositoryRootFor(ICVSResource resource) throws CVSException {
    ICVSRepositoryLocation location = internalGetRepositoryLocationFor(resource);
    if (location == null)
        return null;
    return getRepositoryRootFor(location);
}

---------------Library-------------------
method: org.eclipse.jface.viewers.CheckboxTreeViewer.fireCheckStateChanged(org.eclipse.jface.viewers.CheckStateChangedEvent;)V2
protected void fireCheckStateChanged(final CheckStateChangedEvent event) {
    Object[] array = checkStateListeners.getListeners();
    for (int i = 0; i < array.length; i++) {
        final ICheckStateListener l = (ICheckStateListener) array[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.checkStateChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getExtraIndentAfterNewLine()java.lang.String;1
private String getExtraIndentAfterNewLine() {
    int formatterContinuationIndentationSize = getContinuationIndentationSize();
    int binaryAlignmentValue = getBinaryOperatorAlignmentStyle();
    int indentSize = formatterContinuationIndentationSize;
    if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_BY_ONE) {
        indentSize = 1;
    } else if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_ON_COLUMN) {
    }
    return CodeFormatterUtil.createIndentString(indentSize, fProject);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.text.java.LazyJavaCompletionProposal.computeSortString()java.lang.String;1
protected String computeSortString() {
    return getDisplayString();
}
method: org.eclipse.jdt.internal.ui.text.java.LazyJavaCompletionProposal.getDisplayString()java.lang.String;1
@Override
public String getDisplayString() {
    if (!fDisplayStringComputed)
        setStyledDisplayString(computeDisplayString());
    return super.getDisplayString();
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.initializeTimeStamps()V1
public void initializeTimeStamps() {
    IFile file = fCurrJProject.getProject().getFile(".classpath");
    fFileTimeStamp = file.getModificationStamp();
    fUserSettingsTimeStamp = getEncodedSettings();
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.product.SplashLocationSection.refresh()V1
public void refresh() {
    ISplashInfo info = getSplashInfo();
    fPluginEntry.setValue(info.getLocation(), true);
    super.refresh();
}
method: org.eclipse.pde.internal.ui.parts.FormEntry.setValue(java.lang.String;Z)V3
public void setValue(String value, boolean blockNotification) {
    fIgnoreModify = blockNotification;
    setValue(value);
    fIgnoreModify = false;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_window_scroll(JII)V3
public static final void gdk_window_scroll(long window, int dx, int dy) {
    lock.lock();
    try {
        _gdk_window_scroll(window, dx, dy);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.swt.browser.FilePicker.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (filePicker != null) {
        filePicker.dispose();
        filePicker = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.TemplateWizardHelper.getFlag(org.eclipse.pde.internal.ui.wizards.WizardElement;java.lang.String;Z)Z3
public static boolean getFlag(WizardElement element, String name, boolean defaultValue) {
    IConfigurationElement config = element.getConfigurationElement();
    String value = config.getAttribute(name);
    if (value == null)
        return defaultValue;
    return value.equalsIgnoreCase("true");
}
---------------Client-------------------
method: org.eclipse.core.internal.runtime.InternalPlatform.getBooleanOption(java.lang.String;Z)Z3
public boolean getBooleanOption(String option, boolean defaultValue) {
    String value = getOption(option);
    if (value == null)
        return defaultValue;
    return value.equalsIgnoreCase("true");
}
method: org.eclipse.core.internal.runtime.InternalPlatform.getOption(java.lang.String;)java.lang.String;2
public String getOption(String option) {
    DebugOptions options = getDebugOptions();
    if (options != null)
        return options.getOption(option);
    return null;
}

---------------Library-------------------
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;5
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(5);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    return allOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;5
public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third, org.hamcrest.Matcher<? super T> fourth, org.hamcrest.Matcher<? super T> fifth) {
    return org.hamcrest.core.AnyOf.<T>anyOf(first, second, third, fourth, fifth);
}
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;5
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    return anyOf(matchers);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionDialog.close()Z1
public boolean close() {
    if (appBusyCursor != null)
        appBusyCursor.dispose();
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.net.Activator.getDebugOption(java.lang.String;)java.lang.String;2
String getDebugOption(String option) {
    if (debugTracker == null)
        return null;
    DebugOptions options = (DebugOptions) debugTracker.getService();
    if (options != null)
        return options.getOption(option);
    return null;
}
---------------Client-------------------
method: org.eclipse.pde.internal.runtime.PDERuntimePlugin.getState()org.eclipse.osgi.service.resolver.State;1
public State getState() {
    return getPlatformAdmin().getState(false);
}
method: org.eclipse.pde.internal.runtime.PDERuntimePlugin.getPlatformAdmin()org.eclipse.osgi.service.resolver.PlatformAdmin;1
public PlatformAdmin getPlatformAdmin() {
    if (platformAdminTracker == null) {
        return null;
    }
    return (PlatformAdmin) platformAdminTracker.getService();
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.schema.Schema.fireModelObjectChanged(java.lang.Object;java.lang.String;java.lang.Object;java.lang.Object;)V5
public void fireModelObjectChanged(Object object, String property, Object oldValue, Object newValue) {
    fireModelChanged(new  ModelChangedEvent(this, object, property, oldValue, newValue));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.TypedSource.sortByType(Aorg.eclipse.jdt.internal.corext.refactoring.TypedSource;)V1
public static void sortByType(TypedSource[] typedSources) {
    Arrays.sort(typedSources, createTypeComparator());
}
method: org.eclipse.jdt.internal.corext.refactoring.TypedSource.createTypeComparator()java.util.Comparator;0
public static Comparator<TypedSource> createTypeComparator() {
    return new  Comparator<TypedSource>() {

        public int compare(TypedSource arg0, TypedSource arg1) {
            return arg0.getType() - arg1.getType();
        }
    };
}

---------------Library-------------------
method: org.eclipse.ui.internal.views.markers.MarkerContentGenerator.initializePreferenceListener()V1
private void initializePreferenceListener() {
    if (filterPreferenceListener == null) {
        filterPreferenceListener = new  IPropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent event) {
                if (event.getProperty().equals(getMementoPreferenceName())) {
                    rebuildFilters();
                }
            }
        };
        IDEWorkbenchPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(filterPreferenceListener);
    }
}
---------------Client-------------------
method: org.eclipse.pde.ui.launcher.OSGiLaunchShortcut.initializeConfiguration(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;)V2
protected void initializeConfiguration(ILaunchConfigurationWorkingCopy configuration) {
    OSGiFrameworkManager manager = PDELaunchingPlugin.getDefault().getOSGiFrameworkManager();
    manager.getDefaultInitializer().initialize(configuration);
}
method: org.eclipse.pde.internal.launching.PDELaunchingPlugin.getOSGiFrameworkManager()org.eclipse.pde.internal.launching.launcher.OSGiFrameworkManager;1
public OSGiFrameworkManager getOSGiFrameworkManager() {
    if (fOSGiFrameworkManager == null)
        fOSGiFrameworkManager = new  OSGiFrameworkManager();
    return fOSGiFrameworkManager;
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.core.text.DSModel.getRoot()org.eclipse.pde.core.IWritable;1
protected IWritable getRoot() {
    return (IWritable) getDSComponent();
}
method: org.eclipse.pde.internal.ds.core.text.DSModel.getDSComponent()org.eclipse.pde.internal.ds.core.IDSComponent;1
public IDSComponent getDSComponent() {
    if (fComponent == null) {
        fComponent = getFactory().createComponent();
    }
    return fComponent;
}

---------------Library-------------------
method: org.eclipse.jface.wizard.WizardDialog.firePageChanging(org.eclipse.jface.dialogs.PageChangingEvent;)V2
protected void firePageChanging(final PageChangingEvent event) {
    Object[] listeners = pageChangingListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final IPageChangingListener l = (IPageChangingListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.handlePageChanging(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.core.Cache.put(java.lang.String;java.lang.Object;)V3
public synchronized void put(String name, Object value) {
    if (properties == null) {
        properties = new  HashMap();
    }
    properties.put(name, value);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.emf.ecore.resource.impl.ResourceFactoryRegistryImpl.getFactory(org.eclipse.emf.common.util.URI;)org.eclipse.emf.ecore.resource.Resource$Factory;2
public Resource.Factory getFactory(URI uri) {
    return convert(getFactory(uri, protocolToFactoryMap, extensionToFactoryMap, contentTypeIdentifierToFactoryMap, ContentHandler.UNSPECIFIED_CONTENT_TYPE, true));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.search.matching.PatternLocator.newDeclarationMatch(org.eclipse.jdt.internal.compiler.ast.ASTNode;org.eclipse.jdt.core.IJavaElement;org.eclipse.jdt.internal.compiler.lookup.Binding;IILorg.eclipse.jdt.internal.core.search.matching.MatchLocator;)org.eclipse.jdt.core.search.SearchMatch;7
public SearchMatch newDeclarationMatch(ASTNode reference, IJavaElement element, Binding elementBinding, int accuracy, int length, MatchLocator locator) {
    return locator.newDeclarationMatch(element, elementBinding, accuracy, reference.sourceStart, length);
}
method: org.eclipse.jdt.internal.core.search.matching.MatchLocator.newDeclarationMatch(org.eclipse.jdt.core.IJavaElement;org.eclipse.jdt.internal.compiler.lookup.Binding;III)org.eclipse.jdt.core.search.SearchMatch;6
public SearchMatch newDeclarationMatch(IJavaElement element, Binding binding, int accuracy, int offset, int length) {
    SearchParticipant participant = getParticipant();
    IResource resource = this.currentPossibleMatch.resource;
    return newDeclarationMatch(element, binding, accuracy, offset, length, participant, resource);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.CodeAssistAdvancedConfigurationBlock.getImage(org.eclipse.jface.resource.ImageDescriptor;)org.eclipse.swt.graphics.Image;2
private Image getImage(ImageDescriptor imgDesc) {
    if (imgDesc == null)
        return null;
    Image img = fImages.get(imgDesc);
    if (img == null) {
        img = imgDesc.createImage(false);
        fImages.put(imgDesc, img);
    }
    return img;
}
---------------Client-------------------
method: org.eclipse.e4.ui.workbench.swt.internal.copy.ViewContentProvider.getElements(java.lang.Object;)Ajava.lang.Object;2
@Override
public Object[] getElements(Object element) {
    return getChildren(element);
}
method: org.eclipse.e4.ui.workbench.swt.internal.copy.ViewContentProvider.getChildren(java.lang.Object;)Ajava.lang.Object;2
@Override
public Object[] getChildren(Object element) {
    Object[] children = (Object[]) childMap.get(element);
    if (children == null) {
        children = createChildren(element);
        childMap.put(element, children);
    }
    return children;
}

---------------Library-------------------
method: org.apache.lucene.search.function.IntFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache;java.lang.String;org.apache.lucene.index.IndexReader;)org.apache.lucene.search.function.DocValues;4
@Override
public DocValues getCachedFieldValues(FieldCache cache, String field, IndexReader reader) throws IOException {
    final int[] arr = cache.getInts(reader, field, parser);
    return new  DocValues() {

        @Override
        public float floatVal(int doc) {
            return arr[doc];
        }

        @Override
        public int intVal(int doc) {
            return arr[doc];
        }

        @Override
        public String toString(int doc) {
            return description() + '=' + intVal(doc);
        }

        @Override
        Object getInnerArray() {
            return arr;
        }
    };
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb$1.createDropDown(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
@Override
protected Control createDropDown(Composite dropDownParent, IBreadcrumbDropDownSite site, TreePath path) {
    return createDropDownControl(dropDownParent, site, path);
}
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb.createDropDownControl(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
public Control createDropDownControl(Composite parent, final IBreadcrumbDropDownSite site, TreePath paramPath) {
    TreeViewerDropDown dropDownTreeViewer = new  TreeViewerDropDown() {

        SubTreeModelViewer fDropDownViewer;

        @Override
        protected TreeViewer createTreeViewer(Composite composite, int style, final TreePath path) {
            fDropDownViewer = new  SubTreeModelViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.VIRTUAL | SWT.POP_UP, fTreeViewer.getPresentationContext());
            Object launchViewInput = fTreeViewer.getInput();
            fDropDownViewer.setInput(launchViewInput, path.getParentPath());
            ViewerFilter[] filters = fTreeViewer.getFilters();
            fDropDownViewer.setFilters(filters);
            ModelDelta stateDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
            fTreeViewer.saveElementState(TreePath.EMPTY, stateDelta, IModelDelta.EXPAND | IModelDelta.SELECT);
            if (!fView.getBreadcrumbDropDownAutoExpand()) {
                final ModelDelta prunedDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
                stateDelta.accept(new  IModelDeltaVisitor() {

                    ModelDelta copy = prunedDelta;

                    @Override
                    public boolean visit(IModelDelta delta, int depth) {
                        TreePath deltaPath = getViewerTreePath(delta);
                        if (deltaPath.getSegmentCount() == 0) {
                            copy.setChildCount(delta.getChildCount());
                        } else if (deltaPath.getSegmentCount() != 0 && path.startsWith(deltaPath, null)) {
                            copy = copy.addNode(delta.getElement(), delta.getIndex(), delta.getFlags(), delta.getChildCount());
                        }
                        if (deltaPath.equals(path)) {
                            copy.setFlags(IModelDelta.SELECT | IModelDelta.REVEAL);
                            return false;
                        }
                        return true;
                    }

                    private TreePath getViewerTreePath(IModelDelta node) {
                        ArrayList<Object> list = new  ArrayList<Object>();
                        IModelDelta parentDelta = node.getParentDelta();
                        while (parentDelta != null) {
                            list.add(0, node.getElement());
                            node = parentDelta;
                            parentDelta = node.getParentDelta();
                        }
                        return new  TreePath(list.toArray());
                    }
                });
                stateDelta = prunedDelta;
            }
            fDropDownViewer.updateViewer(stateDelta);
            fDropDownViewer.addLabelUpdateListener(new  ILabelUpdateListener() {

                @Override
                public void labelUpdateComplete(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesBegin() {
                }

                @Override
                public void labelUpdateStarted(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesComplete() {
                    new  UIJob(fViewer.getControl().getDisplay(), "resize breadcrub dropdown") {

                        {
                            setSystem(true);
                        }

                        @Override
                        public IStatus runInUIThread(IProgressMonitor monitor) {
                            site.updateSize();
                            return Status.OK_STATUS;
                        }
                    }.schedule();
                }
            });
            return fDropDownViewer;
        }

        @Override
        protected void openElement(ISelection selection) {
            if (fTreeViewer.getControl().isDisposed()) {
                return;
            }
            if (selection != null && (selection instanceof ITreeSelection) && !selection.isEmpty()) {
                TreeModelContentProvider contentProvider = (TreeModelContentProvider) fTreeViewer.getContentProvider();
                TreePath path = TreePath.EMPTY;
                int count = fTreeViewer.getChildCount(path);
                count = contentProvider.viewToModelCount(path, count);
                ModelDelta rootDelta = new  ModelDelta(fTreeViewer.getInput(), -1, IModelDelta.NO_CHANGE, count);
                TreePath rootPath = fDropDownViewer.getRootPath();
                ModelDelta delta = rootDelta;
                for (int i = 0; i < rootPath.getSegmentCount(); i++) {
                    Object element = rootPath.getSegment(i);
                    int index = fTreeViewer.findElementIndex(path, element);
                    index = contentProvider.viewToModelIndex(path, index);
                    path = path.createChildPath(element);
                    count = fTreeViewer.getChildCount(path);
                    count = contentProvider.viewToModelCount(path, count);
                    delta = delta.addNode(rootPath.getSegment(i), index, IModelDelta.NO_CHANGE, count);
                }
                fDropDownViewer.saveElementState(TreePath.EMPTY, delta, IModelDelta.EXPAND | IModelDelta.SELECT);
                rootDelta.accept(new  IModelDeltaVisitor() {

                    @Override
                    public boolean visit(IModelDelta paramDelta, int depth) {
                        if ((paramDelta.getFlags() & IModelDelta.SELECT) != 0) {
                            ((ModelDelta) paramDelta).setFlags(paramDelta.getFlags() | IModelDelta.FORCE);
                        }
                        return true;
                    }
                });
                if (fView.getBreadcrumbDropDownAutoExpand()) {
                    fTreeViewer.collapseToLevel(rootPath, AbstractTreeViewer.ALL_LEVELS);
                }
                fTreeViewer.updateViewer(rootDelta);
                fViewer.setSelection(StructuredSelection.EMPTY);
                site.close();
            }
            super.openElement(selection);
        }
    };
    return dropDownTreeViewer.createDropDown(parent, site, paramPath);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.InstructionPointerManager$PageListener.pageClosed(org.eclipse.ui.IWorkbenchPage;)V2
@Override
public void pageClosed(IWorkbenchPage page) {
    page.removePartListener(getPartListener());
    page.getWorkbenchWindow().removePageListener(getPageListener());
}
---------------Client-------------------
method: org.eclipse.ui.views.markers.internal.TableView.setComparator(org.eclipse.ui.views.markers.internal.TableComparator;)V2
void setComparator(TableComparator comparator) {
    viewer.setComparator(comparator);
    updateForNewComparator(comparator);
}
method: org.eclipse.ui.views.markers.internal.TableView.updateForNewComparator(org.eclipse.ui.views.markers.internal.TableComparator;)V2
void updateForNewComparator(TableComparator comparator) {
    comparator.saveState(getDialogSettings());
    viewer.refresh();
    setSortIndicators();
}

---------------Library-------------------
method: org.eclipse.jface.viewers.StructuredViewer.addDragSupport(IAorg.eclipse.swt.dnd.Transfer;org.eclipse.swt.dnd.DragSourceListener;)V4
public void addDragSupport(int operations, Transfer[] transferTypes, DragSourceListener listener) {
    Control myControl = getControl();
    final DragSource dragSource = new  DragSource(myControl, operations);
    dragSource.setTransfer(transferTypes);
    dragSource.addDragListener(listener);
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.set.ComputedSet.addChangeListener(org.eclipse.core.databinding.observable.IChangeListener;)V2
public synchronized void addChangeListener(IChangeListener listener) {
    super.addChangeListener(listener);
    computeSetForListeners();
}
method: org.eclipse.core.databinding.observable.set.ComputedSet.computeSetForListeners()V1
private void computeSetForListeners() {
    getRealm().exec(new  Runnable() {

        public void run() {
            if (dependencies == null) {
                getSet();
            }
        }
    });
}

---------------Library-------------------
method: org.eclipse.jetty.http.HttpFields.addDateField(java.lang.String;J)V3
public void addDateField(String name, long date) {
    String d = formatDate(date);
    Buffer n = HttpHeaders.CACHE.lookup(name);
    Buffer v = new  ByteArrayBuffer(d);
    add(n, v);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.putDateField(java.lang.String;J)V3
public void putDateField(String name, long date) {
    Buffer n = HttpHeaders.CACHE.lookup(name);
    putDateField(n, date);
}
method: org.eclipse.jetty.http.HttpFields.putDateField(org.eclipse.jetty.io.Buffer;J)V3
public void putDateField(Buffer name, long date) {
    String d = formatDate(date);
    Buffer v = new  ByteArrayBuffer(d);
    put(name, v);
}

---------------Library-------------------
method: org.eclipse.jface.text.contentassist.ContentAssistant.showContextInformation()java.lang.String;1
public String showContextInformation() {
    promoteKeyListener();
    if (fContextInfoPopup != null)
        return fContextInfoPopup.showContextProposals(false);
    return null;
}
---------------Client-------------------
method: org.eclipse.ui.internal.intro.impl.model.IntroPageTitle.getTitle()java.lang.String;1
public String getTitle() {
    return getText();
}
method: org.eclipse.ui.internal.intro.impl.model.IntroText.getText()java.lang.String;1
public String getText() {
    IntroModelRoot root = getModelRoot();
    if (root != null)
        return root.resolveVariables(text);
    return text;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.PreselectedIUInstallWizard.createRemediationPage()org.eclipse.equinox.internal.p2.ui.dialogs.RemediationPage;1
@Override
protected RemediationPage createRemediationPage() {
    remediationPage = new  RemediationPage(ui, this, root, operation);
    return remediationPage;
}
---------------Client-------------------
method: org.eclipse.jface.layout.RowDataFactory.create()org.eclipse.swt.layout.RowData;1
public RowData create() {
    return copyData(data);
}
method: org.eclipse.jface.layout.RowDataFactory.copyData(org.eclipse.swt.layout.RowData;)org.eclipse.swt.layout.RowData;1
public static RowData copyData(RowData data) {
    RowData newData = new  RowData(data.width, data.height);
    newData.exclude = data.exclude;
    return newData;
}

---------------Library-------------------
method: org.eclipse.ui.preferences.WizardPropertyPage$PropertyPageWizardContainer.run(ZZLorg.eclipse.jface.operation.IRunnableWithProgress;)V4
@Override
public void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
    ProgressMonitorDialog dialog = new  ProgressMonitorDialog(getShell());
    dialog.run(fork, cancelable, runnable);
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.actions.ProgressDialogRunnableContext.run(org.eclipse.jface.operation.IRunnableWithProgress;)V2
public void run(IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
    getRunnableContext().run(true, true, wrapRunnable(runnable));
}
method: org.eclipse.team.internal.ui.actions.ProgressDialogRunnableContext.wrapRunnable(org.eclipse.jface.operation.IRunnableWithProgress;)org.eclipse.jface.operation.IRunnableWithProgress;2
private IRunnableWithProgress wrapRunnable(final IRunnableWithProgress runnable) {
    return new  IRunnableWithProgress() {

        public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
                if (schedulingRule == null && !postponeBuild) {
                    runnable.run(monitor);
                } else {
                    final Exception[] exception = new Exception[] { null };
                    ResourcesPlugin.getWorkspace().run(new  IWorkspaceRunnable() {

                        public void run(IProgressMonitor pm) throws CoreException {
                            try {
                                runnable.run(pm);
                            } catch (InvocationTargetException e) {
                                exception[0] = e;
                            } catch (InterruptedException e) {
                                exception[0] = e;
                            }
                        }
                    }, schedulingRule, 0, monitor);
                    if (exception[0] != null) {
                        if (exception[0] instanceof InvocationTargetException) {
                            throw (InvocationTargetException) exception[0];
                        } else if (exception[0] instanceof InterruptedException) {
                            throw (InterruptedException) exception[0];
                        }
                    }
                }
            } catch (CoreException e) {
                throw new  InvocationTargetException(e);
            }
        }
    };
}

---------------Library-------------------
method: org.eclipse.swt.widgets.List.computeSize(IIZ)org.eclipse.swt.graphics.Point;4
@Override
public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    if (wHint != SWT.DEFAULT && wHint < 0)
        wHint = 0;
    if (hHint != SWT.DEFAULT && hHint < 0)
        hHint = 0;
    OS.gtk_widget_realize(handle);
    Point size = computeNativeSize(handle, wHint, hHint, changed);
    if (size.x == 0 && wHint == SWT.DEFAULT)
        size.x = DEFAULT_WIDTH;
    if (OS.GTK3 && size.y == 0 && hHint == SWT.DEFAULT) {
        size.y = getItemCount() * getItemHeight();
    }
    if (size.y == 0 && hHint == SWT.DEFAULT)
        size.y = DEFAULT_HEIGHT;
    Rectangle trim = computeTrim(0, 0, size.x, size.y);
    size.x = trim.width;
    size.y = trim.height;
    return size;
}
---------------Client-------------------
method: org.eclipse.swt.custom.TableTree.computeSize(IIZ)org.eclipse.swt.graphics.Point;4
@Override
public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    return table.computeSize(wHint, hHint, changed);
}
method: org.eclipse.swt.widgets.Table.computeSize(IIZ)org.eclipse.swt.graphics.Point;4
@Override
public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    if (wHint != SWT.DEFAULT && wHint < 0)
        wHint = 0;
    if (hHint != SWT.DEFAULT && hHint < 0)
        hHint = 0;
    Point size = computeNativeSize(handle, wHint, hHint, changed);
    if (size.x == 0 && wHint == SWT.DEFAULT)
        size.x = DEFAULT_WIDTH;
    if (OS.GTK3 && size.y == 0 && hHint == SWT.DEFAULT) {
        size.y = getItemCount() * getItemHeight();
    }
    if (size.y == 0 && hHint == SWT.DEFAULT)
        size.y = DEFAULT_HEIGHT;
    Rectangle trim = computeTrim(0, 0, size.x, size.y);
    size.x = trim.width;
    size.y = trim.height;
    return size;
}

---------------Library-------------------
method: org.eclipse.team.internal.core.RepositoryProviderManager.providerMapped(org.eclipse.team.core.RepositoryProvider;)V2
public void providerMapped(RepositoryProvider provider) {
    Object[] allListeners = listeners.getListeners();
    for (int i = 0; i < allListeners.length; i++) {
        IRepositoryProviderListener listener = (IRepositoryProviderListener) allListeners[i];
        listener.providerMapped(provider);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.partPropertyChanged(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void partPropertyChanged(PropertyChangeEvent event) {
    firePartPropertyChange(event);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.firePartPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void firePartPropertyChange(PropertyChangeEvent event) {
    Object[] l = partChangeListeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        ((IPropertyChangeListener) l[i]).propertyChange(event);
    }
}

---------------Library-------------------
method: org.apache.lucene.index.IndexWriter.addDocument(org.apache.lucene.document.Document;org.apache.lucene.analysis.Analyzer;)V3
public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {
    ensureOpen();
    boolean doFlush = false;
    boolean success = false;
    try {
        try {
            doFlush = docWriter.updateDocument(doc, analyzer, null);
            success = true;
        } finally {
            if (!success && infoStream != null)
                message("hit exception adding document");
        }
        if (doFlush)
            flush(true, false);
    } catch (OutOfMemoryError oom) {
        handleOOM(oom, "addDocument");
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexWriter.addDocuments(java.util.Collection;org.apache.lucene.analysis.Analyzer;)V3
public void addDocuments(Collection<Document> docs, Analyzer analyzer) throws CorruptIndexException, IOException {
    updateDocuments(null, docs, analyzer);
}
method: org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term;java.util.Collection;org.apache.lucene.analysis.Analyzer;)V4
public void updateDocuments(Term delTerm, Collection<Document> docs, Analyzer analyzer) throws CorruptIndexException, IOException {
    ensureOpen();
    try {
        boolean success = false;
        boolean doFlush = false;
        try {
            doFlush = docWriter.updateDocuments(docs, analyzer, delTerm);
            success = true;
        } finally {
            if (!success && infoStream != null) {
                message("hit exception updating document");
            }
        }
        if (doFlush) {
            flush(true, false);
        }
    } catch (OutOfMemoryError oom) {
        handleOOM(oom, "updateDocuments");
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.Utils.getCompareAdapter(java.lang.Object;)org.eclipse.team.ui.mapping.ISynchronizationCompareAdapter;1
public static ISynchronizationCompareAdapter getCompareAdapter(Object element) {
    ModelProvider provider = getModelProvider(element);
    if (provider != null) {
        Object o = provider.getAdapter(ISynchronizationCompareAdapter.class);
        if (o instanceof ISynchronizationCompareAdapter) {
            return (ISynchronizationCompareAdapter) o;
        }
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.ListUtil$TableLabelProvider.getColumnImage(java.lang.Object;I)org.eclipse.swt.graphics.Image;3
public Image getColumnImage(Object o, int index) {
    return getImage(o);
}
method: org.eclipse.pde.internal.ui.elements.ElementLabelProvider.getImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
public Image getImage(Object element) {
    if (element instanceof IPDEElement) {
        return ((IPDEElement) element).getImage();
    }
    return super.getImage(element);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.use.ApiUseScanTab.setGroupEnablement(org.eclipse.swt.widgets.Group;Z)V3
void setGroupEnablement(Group group, boolean enabled) {
    Control[] children = group.getChildren();
    for (int i = 0; i < children.length; i++) {
        children[i].setEnabled(enabled);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.BranchPromptDialog$3.handleEvent(org.eclipse.swt.widgets.Event;)V2
public void handleEvent(Event event) {
    versionTag = versionText.getText();
    updateEnablements();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doUpdateUI()V1
protected void doUpdateUI() {
    fBuildPathDialogField.refresh();
    fClassPathList.refresh();
    doStatusLineUpdate();
}
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doStatusLineUpdate()V1
private void doStatusLineUpdate() {
    if (Display.getCurrent() != null) {
        IStatus res = findMostSevereStatus();
        fContext.statusChanged(res);
    }
}

---------------Library-------------------
method: org.eclipse.jface.text.source.projection.ProjectionViewer.addProjectionListener(org.eclipse.jface.text.source.projection.IProjectionListener;)V2
public void addProjectionListener(IProjectionListener listener) {
    Assert.isNotNull(listener);
    if (fProjectionListeners == null)
        fProjectionListeners = new  ArrayList();
    if (!fProjectionListeners.contains(listener))
        fProjectionListeners.add(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.progress.WorkbenchSiteProgressService.warnOfContentChange()V1
@Override
public void warnOfContentChange() {
    MPart part = site.getModel();
    if (!part.getTags().contains(CSSConstants.CSS_CONTENT_CHANGE_CLASS)) {
        part.getTags().add(CSSConstants.CSS_CONTENT_CHANGE_CLASS);
    }
}
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.getTags()java.util.List;1
public List<String> getTags() {
    if (tags == null) {
        tags = new  EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION_ELEMENT__TAGS);
    }
    return tags;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoriesView$1$1.run()V1
public void run() {
    refreshViewer();
    getViewer().setSelection(new  StructuredSelection(root));
}
---------------Client-------------------
method: org.eclipse.help.ui.internal.search.LocalHelpPage$3.checkStateChanged(org.eclipse.jface.viewers.CheckStateChangedEvent;)V2
public void checkStateChanged(CheckStateChangedEvent event) {
    handleCheckStateChange(event, contentTree, contentTreeContentProvider);
}
method: org.eclipse.help.ui.internal.search.LocalHelpPage.handleCheckStateChange(org.eclipse.jface.viewers.CheckStateChangedEvent;org.eclipse.jface.viewers.CheckboxTreeViewer;org.eclipse.jface.viewers.ITreeContentProvider;)V4
void handleCheckStateChange(final CheckStateChangedEvent event, final CheckboxTreeViewer tree, final ITreeContentProvider contentProvider) {
    BusyIndicator.showWhile(getShell().getDisplay(), new  Runnable() {

        public void run() {
            Object element = event.getElement();
            boolean state = event.getChecked();
            tree.setGrayed(element, false);
            if (isExpandable(element, contentProvider))
                setSubtreeChecked(element, state, state, tree, contentProvider);
            updateParentState(element, state, tree, contentProvider);
        }
    });
}

---------------Library-------------------
method: org.eclipse.core.internal.watson.ElementTree.getParent()org.eclipse.core.internal.watson.ElementTree;1
public ElementTree getParent() {
    DeltaDataTree parentTree = tree.getParent();
    if (parentTree == null) {
        return null;
    }
    return (ElementTree) parentTree.getData(tree.rootKey());
}
---------------Client-------------------
method: org.eclipse.core.resources.refresh.RefreshProvider.createPollingMonitor(org.eclipse.core.resources.IResource;)org.eclipse.core.resources.refresh.IRefreshMonitor;2
protected IRefreshMonitor createPollingMonitor(IResource resource) {
    return super.createPollingMonitor(resource);
}
method: org.eclipse.core.internal.refresh.InternalRefreshProvider.createPollingMonitor(org.eclipse.core.resources.IResource;)org.eclipse.core.resources.refresh.IRefreshMonitor;2
protected IRefreshMonitor createPollingMonitor(IResource resource) {
    PollingMonitor monitor = ((Workspace) resource.getWorkspace()).getRefreshManager().monitors.pollMonitor;
    monitor.monitor(resource);
    return monitor;
}

---------------Library-------------------
method: org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(org.eclipse.jdt.core.IJavaElement;J)java.lang.String;2
public static String getElementLabel(IJavaElement element, long flags) {
    StringBuffer result = new  StringBuffer();
    getElementLabel(element, flags, result);
    return Strings.markJavaElementLabelLTR(result.toString());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.model.InternalVirtualTreeModelViewer.toString()java.lang.String;1
@Override
public String toString() {
    return getTree().toString();
}
method: org.eclipse.debug.internal.ui.viewers.model.provisional.VirtualItem.toString()java.lang.String;1
@Override
public String toString() {
    StringBuffer buffer = new  StringBuffer();
    toStringItem(buffer, IInternalDebugCoreConstants.EMPTY_STRING);
    return buffer.toString();
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.LocalResourceTypedElement.isDirty()Z1
public boolean isDirty() {
    return fDirty || (sharedDocumentAdapter != null && sharedDocumentAdapter.hasBufferedContents());
}
---------------Client-------------------
method: org.eclipse.help.internal.browser.BrowserManager.isAlwaysUseExternal()Z1
public boolean isAlwaysUseExternal() {
    if (!isEmbeddedBrowserPresent()) {
        return true;
    }
    return alwaysUseExternal;
}
method: org.eclipse.help.internal.browser.BrowserManager.isEmbeddedBrowserPresent()Z1
public boolean isEmbeddedBrowserPresent() {
    if (!initialized) {
        init();
    }
    return internalBrowserDesc != null;
}

---------------Library-------------------
method: org.eclipse.ui.views.bookmarkexplorer.BookmarkNavigator.handleSelectionChanged(org.eclipse.jface.viewers.IStructuredSelection;)V2
void handleSelectionChanged(IStructuredSelection selection) {
    openAction.selectionChanged(selection);
    removeAction.selectionChanged(selection);
    editAction.selectionChanged(selection);
    selectAllAction.selectionChanged(selection);
    showInNavigatorAction.selectionChanged(selection);
}
---------------Client-------------------
method: org.eclipse.ui.views.markers.internal.DialogProblemFilter.updateEnabledState(Z)V2
protected void updateEnabledState(boolean enabled) {
    super.updateEnabledState(enabled);
    descriptionGroup.updateEnablement(enabled);
    severityGroup.updateEnablement(enabled);
}
method: org.eclipse.ui.views.markers.internal.DialogProblemFilter$DescriptionGroup.updateEnablement(Z)V2
public void updateEnablement(boolean enabled) {
    descriptionLabel.setEnabled(enabled);
    combo.setEnabled(enabled);
    description.setEnabled(enabled);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.CommentTemplateEditDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (title != null)
        shell.setText(title);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.subscriber.CreatePatchAction.runOperation()V1
public void runOperation() {
    final SyncInfoSet set = getSyncInfoSet();
    GenerateDiffFileWizard.run(getConfiguration().getSite().getPart(), set.getResources(), false);
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.actions.CopyToClipboardAction.run()V1
public void run() {
    copyResources(getSelectedResources(), getTextualClipboardContents());
}
method: org.eclipse.team.internal.ui.synchronize.actions.CopyToClipboardAction.getSelectedResources()java.util.List;1
protected List getSelectedResources() {
    return Arrays.asList(Utils.getResources(getStructuredSelection().toArray()));
}

---------------Library-------------------
method: org.eclipse.jface.text.TextViewer.addViewportListener(org.eclipse.jface.text.IViewportListener;)V2
public void addViewportListener(IViewportListener listener) {
    if (fViewportListeners == null) {
        fViewportListeners = new  ArrayList();
        initializeViewportUpdate();
    }
    if (!fViewportListeners.contains(listener))
        fViewportListeners.add(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.progress.WorkbenchSiteProgressService.warnOfContentChange()V1
@Override
public void warnOfContentChange() {
    MPart part = site.getModel();
    if (!part.getTags().contains(CSSConstants.CSS_CONTENT_CHANGE_CLASS)) {
        part.getTags().add(CSSConstants.CSS_CONTENT_CHANGE_CLASS);
    }
}
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.getTags()java.util.List;1
public List<String> getTags() {
    if (tags == null) {
        tags = new  EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION_ELEMENT__TAGS);
    }
    return tags;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.query.CategoryElementWrapper.getElements(org.eclipse.equinox.p2.query.Collector;)java.util.Collection;2
public Collection<?> getElements(Collector<?> collector) {
    if (collector.isEmpty())
        return super.getElements(collector);
    Collection<?> results = super.getElements(collector);
    cleanList();
    return results;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.UserLibraryClasspathContainerInitializer.getDescription(org.eclipse.core.runtime.IPath;org.eclipse.jdt.core.IJavaProject;)java.lang.String;3
public String getDescription(IPath containerPath, IJavaProject project) {
    if (isUserLibraryContainer(containerPath)) {
        return containerPath.segment(1);
    }
    return super.getDescription(containerPath, project);
}
method: org.eclipse.jdt.core.ClasspathContainerInitializer.getDescription(org.eclipse.core.runtime.IPath;org.eclipse.jdt.core.IJavaProject;)java.lang.String;3
public String getDescription(IPath containerPath, IJavaProject project) {
    return containerPath.makeRelative().toString();
}

---------------Library-------------------
method: org.eclipse.ecf.core.identity.IDFactory.createID(java.lang.String;Ajava.lang.Object;)org.eclipse.ecf.core.identity.ID;3
public ID createID(String namespaceName, Object[] args) throws IDCreateException {
    Namespace n = getNamespaceByName(namespaceName);
    if (n == null)
        throw new  IDCreateException("Namespace " + namespaceName + " not found");
    return createID(n, args);
}
---------------Client-------------------
method: org.eclipse.ecf.core.ContainerFactory.createContainer(java.lang.String;Ajava.lang.Object;)org.eclipse.ecf.core.IContainer;3
public IContainer createContainer(String containerTypeDescriptionName, Object[] parameters) throws ContainerCreateException {
    return createContainer(getDescriptionByNameWithException(containerTypeDescriptionName), parameters);
}
method: org.eclipse.ecf.core.ContainerFactory.getDescriptionByNameWithException(java.lang.String;)org.eclipse.ecf.core.ContainerTypeDescription;2
private ContainerTypeDescription getDescriptionByNameWithException(String containerTypeDescriptionName) throws ContainerCreateException {
    ContainerTypeDescription typeDescription = getDescriptionByName(containerTypeDescriptionName);
    if (typeDescription == null)
        throw new  ContainerCreateException("Container type description with name=" + containerTypeDescriptionName + " not found.  This may indicate that the desired provider is not available or not startable within runtime.");
    return typeDescription;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.JavaElementDelta.opened(org.eclipse.jdt.core.IJavaElement;)V2
public void opened(IJavaElement element) {
    JavaElementDelta delta = new  JavaElementDelta(element);
    delta.changed(F_OPENED);
    insertDeltaTree(element, delta);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.addLongField(org.eclipse.jetty.io.Buffer;J)V3
public void addLongField(Buffer name, long value) {
    Buffer v = BufferUtil.toBuffer(value);
    add(name, v);
}
method: org.eclipse.jetty.io.BufferUtil.toBuffer(J)org.eclipse.jetty.io.Buffer;1
public static Buffer toBuffer(long value) {
    ByteArrayBuffer buf = new  ByteArrayBuffer(32);
    putDecLong(buf, value);
    return buf;
}

---------------Library-------------------
method: org.eclipse.jface.internal.text.link.contentassist.ContentAssistant2.hide()V1
protected void hide() {
    if (fProposalPopup != null)
        fProposalPopup.hide();
    if (fContextInfoPopup != null)
        fContextInfoPopup.hide();
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.InternalVirtualTreeModelViewer.getTreePathFromItem(org.eclipse.debug.internal.ui.viewers.model.provisional.VirtualItem;)org.eclipse.jface.viewers.TreePath;2
private TreePath getTreePathFromItem(VirtualItem item) {
    List<Object> segments = new  LinkedList<Object>();
    while (item.getParent() != null) {
        segments.add(0, item.getData());
        item = item.getParent();
    }
    return new  TreePath(segments.toArray());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.LabelResult.getTreePath()org.eclipse.jface.viewers.TreePath;1
@Override
public TreePath getTreePath() {
    return getNode().getTreePath();
}
method: org.eclipse.debug.internal.ui.viewers.ModelNode.getTreePath()org.eclipse.jface.viewers.TreePath;1
public synchronized TreePath getTreePath() {
    List<Object> path = new  ArrayList<Object>();
    ModelNode node = this;
    while (node != null) {
        path.add(0, node.getElement());
        node = node.getParentNode();
    }
    return new  TreePath(path.toArray());
}

---------------Library-------------------
method: org.eclipse.ui.internal.ActionSetManager.firePropertyChange(org.eclipse.ui.internal.registry.IActionSetDescriptor;I)V3
private void firePropertyChange(IActionSetDescriptor descriptor, int id) {
    Object[] l = listeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        IPropertyListener listener = (IPropertyListener) l[i];
        listener.propertyChanged(descriptor, id);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.fireVisibilityChange()V1
void fireVisibilityChange() {
    fireInternalPropertyChange(INTERNAL_PROPERTY_VISIBLE);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.fireInternalPropertyChange(I)V2
protected void fireInternalPropertyChange(int id) {
    Object listeners[] = internalPropChangeListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((IPropertyListener) listeners[i]).propertyChanged(this, id);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.CVSMergeSubscriber.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(IResourceChangeEvent event) {
    try {
        IResourceDelta delta = event.getDelta();
        if (delta != null) {
            delta.accept(new  IResourceDeltaVisitor() {

                public boolean visit(IResourceDelta delta) throws CoreException {
                    IResource resource = delta.getResource();
                    if (resource.getType() == IResource.PROJECT) {
                        IProject project = (IProject) resource;
                        if (!project.isAccessible()) {
                            return false;
                        }
                        if ((delta.getFlags() & IResourceDelta.OPEN) != 0) {
                            return false;
                        }
                        if (RepositoryProvider.getProvider(project, CVSProviderPlugin.getTypeId()) == null) {
                            return false;
                        }
                    }
                    if (roots.contains(resource)) {
                        if (delta.getKind() == IResourceDelta.REMOVED || delta.getKind() == IResourceDelta.MOVED_TO) {
                            cancel();
                        }
                        return false;
                    }
                    return true;
                }
            });
        }
    } catch (CoreException e) {
        CVSProviderPlugin.log(e.getStatus());
    }
}
---------------Client-------------------
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(IResourceChangeEvent event) {
    IResourceDelta delta = event.getDelta();
    if (delta != null)
        handleDelta(delta);
}
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.handleDelta(org.eclipse.core.resources.IResourceDelta;)V2
private void handleDelta(IResourceDelta d) {
    try {
        d.accept(new  IResourceDeltaVisitor() {

            public boolean visit(IResourceDelta delta) throws CoreException {
                switch(delta.getKind()) {
                    case IResourceDelta.ADDED:
                        return false;
                    case IResourceDelta.REMOVED:
                        IResource res = delta.getResource();
                        if (res instanceof IFile) {
                            Match[] matches = fResult.getMatches(res);
                            fResult.removeMatches(matches);
                        }
                        break;
                    case IResourceDelta.CHANGED:
                        break;
                }
                return true;
            }
        });
    } catch (CoreException e) {
        SearchPlugin.log(e);
    }
}

---------------Library-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsMainTab.updateArgument(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateArgument(ILaunchConfiguration configuration) {
    String arguments = IExternalToolConstants.EMPTY_STRING;
    try {
        arguments = configuration.getAttribute(IExternalToolConstants.ATTR_TOOL_ARGUMENTS, IExternalToolConstants.EMPTY_STRING);
    } catch (CoreException ce) {
        ExternalToolsPlugin.getDefault().log(ExternalToolsLaunchConfigurationMessages.ExternalToolsMainTab_Error_reading_configuration_7, ce);
    }
    argumentField.setText(arguments);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_dark_gc(JIAJ)V3
public static final void gtk_style_get_dark_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_dark_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.NewEnumCreationWizard.addPages()V1
@Override
public void addPages() {
    super.addPages();
    if (fPage == null) {
        fPage = new  NewEnumWizardPage();
        fPage.init(getSelection());
    }
    addPage(fPage);
}
---------------Client-------------------
method: org.eclipse.ui.internal.decorators.DecoratorManager.update(java.lang.String;)V2
@Override
public void update(String decoratorId) {
    IBaseLabelProvider provider = getBaseLabelProvider(decoratorId);
    if (provider != null) {
        scheduler.clearResults();
        fireListeners(new  LabelProviderChangedEvent(provider));
    }
}
method: org.eclipse.ui.internal.decorators.DecorationScheduler.clearResults()V1
void clearResults() {
    if (clearJob == null) {
        clearJob = getClearJob();
    }
    clearJob.schedule();
}

---------------Library-------------------
method: org.eclipse.ui.console.IOConsole.streamClosed(org.eclipse.ui.console.IOConsoleOutputStream;)V2
void streamClosed(IOConsoleOutputStream stream) {
    synchronized (openStreams) {
        openStreams.remove(stream);
        checkFinished();
    }
}
---------------Client-------------------
method: org.eclipse.search2.internal.ui.InternalSearchUI.addQueryListener(org.eclipse.search.ui.IQueryListener;)V2
public void addQueryListener(IQueryListener l) {
    getSearchManager().addQueryListener(l);
}
method: org.eclipse.search2.internal.ui.QueryManager.addQueryListener(org.eclipse.search.ui.IQueryListener;)V2
public void addQueryListener(IQueryListener l) {
    synchronized (fListeners) {
        fListeners.add(l);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.views.markers.MarkerContentGenerator.getSelectedResources()Aorg.eclipse.core.resources.IResource;1
IResource[] getSelectedResources() {
    IResource[] selected = selectedResources;
    IResource[] resources = new IResource[selected.length];
    System.arraycopy(selected, 0, resources, 0, selected.length);
    return resources;
}
---------------Client-------------------
method: org.eclipse.jface.text.ConfigurableLineTracker.getLegalLineDelimiters()Ajava.lang.String;1
public String[] getLegalLineDelimiters() {
    return TextUtilities.copy(fDelimiters);
}
method: org.eclipse.jface.text.TextUtilities.copy(Ajava.lang.String;)Ajava.lang.String;1
public static String[] copy(String[] array) {
    if (array != null) {
        String[] copy = new String[array.length];
        System.arraycopy(array, 0, copy, 0, array.length);
        return copy;
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.swt.widgets.Caret.releaseParent()V1
@Override
void releaseParent() {
    super.releaseParent();
    if (this == parent.getCaret())
        parent.setCaret(null);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.runner.FailedComparison.sendMessages(org.eclipse.jdt.internal.junit.runner.MessageSender;)V2
void sendMessages(MessageSender sender) {
    sender.sendMessage(MessageIds.EXPECTED_START);
    sender.sendMessage(getExpected());
    sender.sendMessage(MessageIds.EXPECTED_END);
    sender.sendMessage(MessageIds.ACTUAL_START);
    sender.sendMessage(getActual());
    sender.sendMessage(MessageIds.ACTUAL_END);
}
method: org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.sendMessage(java.lang.String;)V2
public void sendMessage(String msg) {
    if (fWriter == null)
        return;
    fWriter.println(msg);
}

---------------Library-------------------
method: org.eclipse.osgi.internal.permadmin.SecurityAdmin.getEncodedPermissionInfos(Aorg.osgi.service.permissionadmin.PermissionInfo;)Ajava.lang.String;1
private static String[] getEncodedPermissionInfos(PermissionInfo[] permissions) {
    if (permissions == null)
        return null;
    String[] encoded = new String[permissions.length];
    for (int i = 0; i < encoded.length; i++) encoded[i] = permissions[i].getEncoded();
    return encoded;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.PDESection.isEditable()Z1
public boolean isEditable() {
    IBaseModel model = getPage().getPDEEditor().getAggregateModel();
    return model == null ? false : model.isEditable();
}
---------------Client-------------------
method: org.eclipse.osgi.container.Module.isTriggerSet()Z1
private boolean isTriggerSet() {
    ModuleLoader loader = getCurrentLoader();
    return loader == null ? false : loader.isTriggerSet();
}
method: org.eclipse.osgi.container.Module.getCurrentLoader()org.eclipse.osgi.container.ModuleLoader;1
private ModuleLoader getCurrentLoader() {
    ModuleRevision current = getCurrentRevision();
    if (current == null) {
        return null;
    }
    ModuleWiring wiring = current.getWiring();
    if (wiring == null) {
        return null;
    }
    try {
        return wiring.getModuleLoader();
    } catch (UnsupportedOperationException e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.emf.ecore.util.EcoreValidator.validateEPackage_UniqueClassifierNames(org.eclipse.emf.ecore.EPackage;org.eclipse.emf.common.util.DiagnosticChain;java.util.Map;)Z4
public boolean validateEPackage_UniqueClassifierNames(EPackage ePackage, DiagnosticChain diagnostics, Map<Object, Object> context) {
    boolean result = true;
    Map<String, List<EClassifier>> keys = new  HashMap<String, List<EClassifier>>();
    for (EClassifier eClassifier : ePackage.getEClassifiers()) {
        String name = eClassifier.getName();
        if (name != null) {
            String key = name.replace("_", "").toLowerCase();
            List<EClassifier> eClassifiers = keys.get(key);
            if (eClassifiers == null) {
                eClassifiers = new  ArrayList<EClassifier>();
                keys.put(key, eClassifiers);
            }
            eClassifiers.add(eClassifier);
            if (eClassifiers.size() > 1) {
                if (diagnostics == null) {
                    return false;
                } else {
                    result = false;
                }
            }
        }
    }
    if (!result) {
        for (Map.Entry<String, List<EClassifier>> entry : keys.entrySet()) {
            List<EClassifier> eClassifiers = entry.getValue();
            if (eClassifiers.size() > 1) {
                List<String> names = new  UniqueEList<String>();
                List<Object> objects = new  ArrayList<Object>();
                objects.add(ePackage);
                for (EClassifier eClassifier : eClassifiers) {
                    names.add(eClassifier.getName());
                    objects.add(eClassifier);
                }
                objects.add(EcorePackage.Literals.EPACKAGE__ECLASSIFIERS);
                if (names.size() == objects.size() - 2) {
                    diagnostics.add(createDiagnostic(Diagnostic.WARNING, DIAGNOSTIC_SOURCE, UNIQUE_CLASSIFIER_NAMES, "_UI_EPackageDissimilarClassifierNames_diagnostic", names.toArray(new Object[names.size()]), objects.toArray(new Object[objects.size()]), context));
                } else {
                    diagnostics.add(createDiagnostic(Diagnostic.ERROR, DIAGNOSTIC_SOURCE, UNIQUE_CLASSIFIER_NAMES, "_UI_EPackageUniqueClassifierNames_diagnostic", new Object[] { names.get(0) }, objects.toArray(new Object[objects.size()]), context));
                }
            }
        }
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.emf.ecore.util.EcoreValidator.validateEEnum_UniqueEnumeratorNames(org.eclipse.emf.ecore.EEnum;org.eclipse.emf.common.util.DiagnosticChain;java.util.Map;)Z4
public boolean validateEEnum_UniqueEnumeratorNames(EEnum eEnum, DiagnosticChain diagnostics, Map<Object, Object> context) {
    boolean result = true;
    EList<EEnumLiteral> eLiterals = eEnum.getELiterals();
    Map<String, List<EEnumLiteral>> keys = new  HashMap<String, List<EEnumLiteral>>();
    for (EEnumLiteral eEnumLiteral : eLiterals) {
        String name = eEnumLiteral.getName();
        if (name != null) {
            String key = name.replace("_", "").toUpperCase();
            List<EEnumLiteral> eEnumLiterals = keys.get(key);
            if (eEnumLiterals == null) {
                eEnumLiterals = new  ArrayList<EEnumLiteral>();
                keys.put(key, eEnumLiterals);
            }
            eEnumLiterals.add(eEnumLiteral);
            if (eEnumLiterals.size() > 1) {
                if (diagnostics == null) {
                    return false;
                } else {
                    result = false;
                }
            }
        }
    }
    if (!result) {
        for (Map.Entry<String, List<EEnumLiteral>> entry : keys.entrySet()) {
            List<EEnumLiteral> eEnumLiterals = entry.getValue();
            if (eEnumLiterals.size() > 1) {
                List<String> names = new  UniqueEList<String>();
                List<Object> objects = new  ArrayList<Object>();
                objects.add(eEnum);
                for (EEnumLiteral eEnumLiteral : eEnumLiterals) {
                    names.add(eEnumLiteral.getName());
                    objects.add(eEnumLiteral);
                }
                objects.add(EcorePackage.Literals.EENUM__ELITERALS);
                if (names.size() == objects.size() - 2) {
                    diagnostics.add(createDiagnostic(Diagnostic.WARNING, DIAGNOSTIC_SOURCE, UNIQUE_ENUMERATOR_NAMES, "_UI_EEnumDissimilarEnumeratorNames_diagnostic", names.toArray(new Object[names.size()]), objects.toArray(new Object[objects.size()]), context));
                } else {
                    diagnostics.add(createDiagnostic(Diagnostic.ERROR, DIAGNOSTIC_SOURCE, UNIQUE_ENUMERATOR_NAMES, "_UI_EEnumUniqueEnumeratorNames_diagnostic", new Object[] { names.get(0) }, objects.toArray(new Object[objects.size()]), context));
                }
            }
        }
    }
    return result;
}
method: org.eclipse.emf.ecore.impl.ENamedElementImpl.getName()java.lang.String;1
public String getName() {
    return getNameGen();
}

---------------Library-------------------
method: org.eclipse.jface.wizard.WizardDialog.firePageChanged(org.eclipse.jface.dialogs.PageChangedEvent;)V2
protected void firePageChanged(final PageChangedEvent event) {
    Object[] listeners = pageChangedListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final IPageChangedListener l = (IPageChangedListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.pageChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.CharsetDeltaJob.removeFromQueue()org.eclipse.core.internal.resources.CharsetDeltaJob$ICharsetListenerFilter;1
private ICharsetListenerFilter removeFromQueue() {
    synchronized (work) {
        return work.remove();
    }
}
---------------Client-------------------
method: org.eclipse.osgi.internal.module.GenericConstraint.getNameSpace()java.lang.String;1
public String getNameSpace() {
    return ((GenericSpecification) getVersionConstraint()).getType();
}
method: org.eclipse.osgi.internal.resolver.GenericSpecificationImpl.getType()java.lang.String;1
public String getType() {
    synchronized (this.monitor) {
        return type;
    }
}

---------------Library-------------------
method: org.eclipse.equinox.internal.security.auth.ext.loader.ExtLoginModuleLoader.readEntry(org.eclipse.core.runtime.IConfigurationElement;)javax.security.auth.spi.LoginModule;1
private static LoginModule readEntry(IConfigurationElement element) {
    if (!ELEM_MODULE.equals(element.getName())) {
        String supplier = element.getContributor().getName();
        String message = NLS.bind(SecAuthMessages.unexpectedConfigElement, element.getName(), supplier);
        AuthPlugin.getDefault().logError(message, null);
        return null;
    }
    try {
        LoginModule module = (LoginModule) element.createExecutableExtension(ATTR_MODULE_CLASS);
        return module;
    } catch (CoreException e) {
        String supplier = element.getContributor().getName();
        String message = NLS.bind(SecAuthMessages.instantiationFailed, element.getAttribute(ATTR_MODULE_CLASS), supplier);
        AuthPlugin.getDefault().logError(message, e);
        return null;
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.security.auth.ConfigurationFactory.readProvider(org.eclipse.core.runtime.IConfigurationElement;)javax.security.auth.login.Configuration;2
private Configuration readProvider(IConfigurationElement element) {
    if (!ELEM_PROVIDER.equals(element.getName())) {
        reportError(SecAuthMessages.unexpectedConfigElement, element.getName(), element, null);
        return null;
    }
    try {
        return (Configuration) element.createExecutableExtension(ATTR_PROVIDER_CLASS);
    } catch (CoreException e) {
        reportError(SecAuthMessages.instantiationFailed, element.getAttribute(ATTR_PROVIDER_CLASS), element, e);
        return null;
    }
}
method: org.eclipse.equinox.internal.security.auth.ConfigurationFactory.reportError(java.lang.String;java.lang.String;org.eclipse.core.runtime.IConfigurationElement;java.lang.Throwable;)V5
private void reportError(String template, String arg, IConfigurationElement element, Throwable e) {
    String supplier = element.getContributor().getName();
    String message = NLS.bind(template, arg, supplier);
    AuthPlugin.getDefault().logError(message, e);
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_fg_gc(JIAJ)V3
public static final void gtk_style_get_fg_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_fg_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.memory.SwitchMemoryBlockAction.getDebugContext()org.eclipse.core.runtime.IAdaptable;1
private IAdaptable getDebugContext() {
    if (fView != null) {
        return DebugUITools.getPartDebugContext(fView.getSite());
    } else {
        return DebugUITools.getDebugContext();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.ui.GotoReferencedTestAction.getShell()org.eclipse.swt.widgets.Shell;1
private Shell getShell() {
    if (fWorkbench != null)
        return fWorkbench.getShell();
    return JUnitPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.junit.ui.JUnitPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow workBenchWindow = getActiveWorkbenchWindow();
    if (workBenchWindow == null)
        return null;
    return workBenchWindow.getShell();
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.dialogs.DialogArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    PropertyChangeEvent event = new  PropertyChangeEvent(this, property, oldValue, newValue);
    for (Iterator iter = listeners.iterator(); iter.hasNext(); ) {
        IPropertyChangeListener listener = (IPropertyChangeListener) iter.next();
        listener.propertyChange(event);
    }
}
---------------Client-------------------
method: org.eclipse.ui.editors.text.FileDocumentProvider.handleElementDeleted(org.eclipse.ui.IFileEditorInput;)V2
protected void handleElementDeleted(IFileEditorInput fileEditorInput) {
    fireElementDeleted(fileEditorInput);
}
method: org.eclipse.ui.texteditor.AbstractDocumentProvider.fireElementDeleted(java.lang.Object;)V2
protected void fireElementDeleted(Object element) {
    Iterator e = new  ArrayList(fElementStateListeners).iterator();
    while (e.hasNext()) {
        IElementStateListener l = (IElementStateListener) e.next();
        l.elementDeleted(element);
    }
}

---------------Library-------------------
method: org.eclipse.jface.viewers.CheckboxTableViewer.fireCheckStateChanged(org.eclipse.jface.viewers.CheckStateChangedEvent;)V2
private void fireCheckStateChanged(final CheckStateChangedEvent event) {
    Object[] array = checkStateListeners.getListeners();
    for (int i = 0; i < array.length; i++) {
        final ICheckStateListener l = (ICheckStateListener) array[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.checkStateChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.plugin.PluginObjectNode.firePropertyChanged(org.eclipse.pde.internal.core.text.IDocumentRange;java.lang.String;java.lang.Object;java.lang.Object;)V5
protected void firePropertyChanged(IDocumentRange node, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        fModel.fireModelObjectChanged(node, property, oldValue, newValue);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.feature.FeatureObject.firePropertyChanged(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChanged(String property, Object oldValue, Object newValue) {
    firePropertyChanged(this, property, oldValue, newValue);
}
method: org.eclipse.pde.internal.core.feature.FeatureObject.firePropertyChanged(org.eclipse.pde.internal.core.ifeature.IFeatureObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
protected void firePropertyChanged(IFeatureObject object, String property, Object oldValue, Object newValue) {
    if (model.isEditable()) {
        IModelChangeProvider provider = model;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}

---------------Library-------------------
method: org.eclipse.ui.editors.text.FileBufferOperationHandler.doRun(Aorg.eclipse.core.resources.IFile;org.eclipse.core.runtime.IPath;org.eclipse.core.filebuffers.manipulation.IFileBufferOperation;)V4
protected final void doRun(final IFile[] files, final IPath location, final IFileBufferOperation fileBufferOperation) {
    Job job = new  Job(fileBufferOperation.getOperationName()) {

        protected IStatus run(IProgressMonitor monitor) {
            IStatus status;
            try {
                int ticks = 100;
                monitor.beginTask(fFileBufferOperation.getOperationName(), ticks);
                try {
                    IPath[] locations;
                    if (files != null) {
                        ticks -= 30;
                        locations = generateLocations(files, new  SubProgressMonitor(monitor, 30));
                    } else
                        locations = new IPath[] { location };
                    if (locations != null && locations.length > 0) {
                        FileBufferOperationRunner runner = new  FileBufferOperationRunner(FileBuffers.getTextFileBufferManager(), getShell());
                        runner.execute(locations, fileBufferOperation, new  SubProgressMonitor(monitor, ticks));
                    }
                    status = Status.OK_STATUS;
                } finally {
                    monitor.done();
                }
            } catch (OperationCanceledException e) {
                status = new  Status(IStatus.CANCEL, EditorsUI.PLUGIN_ID, IStatus.OK, "", null);
            } catch (CoreException e) {
                status = new  Status(IStatus.ERROR, EditorsUI.PLUGIN_ID, IStatus.OK, "", e);
            }
            return status;
        }
    };
    job.setUser(true);
    job.schedule();
}
---------------Client-------------------
method: org.eclipse.ui.internal.wizards.datatransfer.WizardFileSystemResourceImportPage1.updateSelections(java.util.Map;)V2
protected void updateSelections(Map map) {
    super.updateSelections(map);
}
method: org.eclipse.ui.dialogs.WizardResourceImportPage.updateSelections(java.util.Map;)V2
protected void updateSelections(final Map map) {
    Runnable runnable = new  Runnable() {

        public void run() {
            selectionGroup.updateSelections(map);
        }
    };
    BusyIndicator.showWhile(getShell().getDisplay(), runnable);
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.ScrolledFormText.setForeground(org.eclipse.swt.graphics.Color;)V2
public void setForeground(Color fg) {
    super.setForeground(fg);
    if (content != null)
        content.setForeground(fg);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jface.viewers.StructuredViewer.fireDoubleClick(org.eclipse.jface.viewers.DoubleClickEvent;)V2
protected void fireDoubleClick(final DoubleClickEvent event) {
    Object[] listeners = doubleClickListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final IDoubleClickListener l = (IDoubleClickListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.doubleClick(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.feature.URLSection.handleSelectAll()V1
private void handleSelectAll() {
    IStructuredContentProvider provider = (IStructuredContentProvider) fUrlViewer.getContentProvider();
    Object[] elements = provider.getElements(fUrlViewer.getInput());
    StructuredSelection ssel = new  StructuredSelection(elements);
    fUrlViewer.setSelection(ssel);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage$2.menuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
public void menuAboutToShow(IMenuManager m) {
    contextMenuAboutToShow(m);
}
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage.contextMenuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
protected void contextMenuAboutToShow(IMenuManager menu) {
    JavaPlugin.createStandardGroups(menu);
    IStructuredSelection selection = (IStructuredSelection) getSelection();
    fActionGroups.setContext(new  ActionContext(selection));
    fActionGroups.fillContextMenu(menu);
}

---------------Library-------------------
method: org.eclipse.jdt.apt.core.internal.util.Visitors$AnnotatedNodeVisitor.visit(org.eclipse.jdt.core.dom.SingleVariableDeclaration;)Z2
public boolean visit(SingleVariableDeclaration node) {
    final List<IExtendedModifier> extMods = node.modifiers();
    List<Annotation> annos = null;
    for (IExtendedModifier extMod : extMods) {
        if (extMod.isAnnotation()) {
            if (annos == null) {
                annos = new  ArrayList<Annotation>(2);
                _result.put(node, annos);
            }
            annos.add((Annotation) extMod);
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.jdt.apt.core.internal.util.Visitors$AnnotatedNodeVisitor.visit(org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;)Z2
public boolean visit(org.eclipse.jdt.core.dom.AnnotationTypeDeclaration node) {
    visitBodyDeclaration(node);
    return true;
}
method: org.eclipse.jdt.apt.core.internal.util.Visitors$AnnotatedNodeVisitor.visitBodyDeclaration(org.eclipse.jdt.core.dom.BodyDeclaration;)V2
private void visitBodyDeclaration(final BodyDeclaration node) {
    final List<IExtendedModifier> extMods = node.modifiers();
    List<Annotation> annos = null;
    for (IExtendedModifier extMod : extMods) {
        if (extMod.isAnnotation()) {
            if (annos == null) {
                annos = new  ArrayList<Annotation>(2);
                _result.put(node, annos);
            }
            annos.add((Annotation) extMod);
        }
    }
}

---------------Library-------------------
method: org.eclipse.jdt.core.refactoring.descriptors.MoveDescriptor.setMoveMembers(Aorg.eclipse.jdt.core.IMember;)V2
public void setMoveMembers(final IMember[] members) {
    Assert.isNotNull(members);
    Assert.isTrue(fMovePolicy == null, "Clients must only call one of the 'setMoveXXX' methods.");
    fMembers = members;
    fMovePolicy = POLICY_MOVE_MEMBERS;
}
---------------Client-------------------
method: org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.setProcessor(org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor;)V2
public void setProcessor(RefactoringProcessor processor) {
    processor.setRefactoring(this);
    fProcessor = processor;
}
method: org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor.setRefactoring(org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring;)V2
void setRefactoring(ProcessorBasedRefactoring refactoring) {
    Assert.isTrue(fRefactoring == null, "The refactoring can only be set once");
    Assert.isNotNull(refactoring);
    fRefactoring = refactoring;
}

---------------Library-------------------
method: org.eclipse.jface.text.source.projection.ProjectionViewer.internalInvalidateTextPresentation(II)V3
private void internalInvalidateTextPresentation(int offset, int length) {
    if (fCommandQueue != null) {
        fCommandQueue.add(new  ProjectionCommand(offset, length));
    } else {
        invalidateTextPresentation(offset, length);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.JavaModelOperation.deleteResource(org.eclipse.core.resources.IResource;I)V3
protected void deleteResource(IResource resource, int flags) throws JavaModelException {
    try {
        resource.delete(flags, getSubProgressMonitor(1));
        setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE);
    } catch (CoreException e) {
        throw new  JavaModelException(e);
    }
}
method: org.eclipse.jdt.internal.core.JavaModelOperation.getSubProgressMonitor(I)org.eclipse.core.runtime.IProgressMonitor;2
protected IProgressMonitor getSubProgressMonitor(int workAmount) {
    IProgressMonitor sub = null;
    if (this.progressMonitor != null) {
        sub = new  SubProgressMonitor(this.progressMonitor, workAmount, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
    }
    return sub;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.JavaDetailFormattersPreferencePage.performCancel()Z1
@Override
public boolean performCancel() {
    if (fCodeViewer != null) {
        fCodeViewer.dispose();
    }
    return super.performCancel();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.imports.PluginImportWizardFirstPage$8.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent e) {
    IPath chosen = chooseDropLocation();
    if (chosen != null)
        importDirectory.setText(chosen.toOSString());
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageOne$NameGroup.postSetFocus()V1
public void postSetFocus() {
    fNameField.postSetFocusOnDialogField(getShell().getDisplay());
}
method: org.eclipse.jface.wizard.WizardPage.getShell()org.eclipse.swt.widgets.Shell;1
@Override
public Shell getShell() {
    IWizardContainer container = getContainer();
    if (container == null) {
        return null;
    }
    return container.getShell();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_window_move(JII)V3
public static final void gtk_window_move(long handle, int x, int y) {
    lock.lock();
    try {
        _gtk_window_move(handle, x, y);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.core.subscribers.ActiveChangeSet.add(Aorg.eclipse.core.resources.IResource;)V2
public void add(IResource[] resources) throws CoreException {
    List toAdd = new  ArrayList();
    for (int i = 0; i < resources.length; i++) {
        IResource resource = resources[i];
        IDiff diff = getManager().getDiff(resource);
        if (diff != null) {
            toAdd.add(diff);
        }
    }
    if (!toAdd.isEmpty()) {
        add((IDiff[]) toAdd.toArray(new IDiff[toAdd.size()]));
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceRemovals(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceRemovals(ISyncInfoTreeChangeEvent event) {
    IResource[] resources = event.getRemovedResources();
    removeFromViewer(resources);
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.removeFromViewer(Aorg.eclipse.core.resources.IResource;)V2
protected void removeFromViewer(IResource[] resources) {
    List elements = new  ArrayList();
    for (int i = 0; i < resources.length; i++) {
        IResource resource = resources[i];
        ISynchronizeModelElement element = getModelObject(resource);
        if (element != null) {
            elements.add(element);
        }
    }
    if (!elements.isEmpty()) {
        removeFromViewer((ISynchronizeModelElement[]) elements.toArray(new ISynchronizeModelElement[elements.size()]));
    }
}

---------------Library-------------------
method: org.eclipse.e4.ui.bindings.internal.Util.compare(java.lang.Comparable;java.lang.Comparable;)I2
@SuppressWarnings("unchecked")
public static final <T> int compare(final Comparable<T> left, final Comparable<T> right) {
    if (left == null && right == null) {
        return 0;
    } else if (left == null) {
        return -1;
    } else if (right == null) {
        return 1;
    } else {
        return left.compareTo((T) right);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equals(org.eclipse.core.runtime.IPath;org.eclipse.core.runtime.IPath;)Z3
protected boolean equals(IPath path1, IPath path2) {
    return equalsOrNull(path1, path2);
}
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equalsOrNull(java.lang.Object;java.lang.Object;)Z3
private boolean equalsOrNull(Object o1, Object o2) {
    if (o1 == null) {
        return o2 == null;
    }
    if (o2 == null) {
        return false;
    }
    return o1.equals(o2);
}

---------------Library-------------------
method: org.eclipse.ltk.internal.ui.refactoring.history.RefactoringHistoryControl$RefactoringHistoryTreeViewer.setSubTreeGrayed(java.lang.Object;Z)V3
private void setSubTreeGrayed(final Object element, final boolean grayed) {
    setElementGrayed(element, grayed);
    final Object[] children = getChildren(element);
    for (int index = 0; index < children.length; index++) {
        setSubTreeGrayed(children[index], grayed);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.text.bundle.RequiredExecutionEnvironmentHeader.addExecutionEnvironments(Aorg.eclipse.pde.internal.core.text.bundle.ExecutionEnvironment;)V2
public void addExecutionEnvironments(ExecutionEnvironment[] envs) {
    addManifestElements(envs);
}
method: org.eclipse.pde.internal.core.text.bundle.CompositeManifestHeader.addManifestElements(Aorg.eclipse.pde.internal.core.text.bundle.PDEManifestElement;)V2
protected void addManifestElements(PDEManifestElement[] elements) {
    for (int i = 0; i < elements.length; i++) addManifestElement(elements[i], false);
    update(false);
    fireStructureChanged(elements, IModelChangedEvent.INSERT);
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.AbstractModel.fireModelObjectChanged(java.lang.Object;java.lang.String;java.lang.Object;java.lang.Object;)V5
public void fireModelObjectChanged(Object object, String property, Object oldValue, Object newValue) {
    fireModelChanged(new  ModelChangedEvent(this, object, property, oldValue, newValue));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.TypedSource.sortByType(Aorg.eclipse.jdt.internal.corext.refactoring.TypedSource;)V1
public static void sortByType(TypedSource[] typedSources) {
    Arrays.sort(typedSources, createTypeComparator());
}
method: org.eclipse.jdt.internal.corext.refactoring.TypedSource.createTypeComparator()java.util.Comparator;0
public static Comparator<TypedSource> createTypeComparator() {
    return new  Comparator<TypedSource>() {

        public int compare(TypedSource arg0, TypedSource arg1) {
            return arg0.getType() - arg1.getType();
        }
    };
}

---------------Library-------------------
method: org.eclipse.ui.forms.MasterDetailsBlock.createDetailsPart(org.eclipse.ui.forms.IManagedForm;org.eclipse.swt.widgets.Composite;)V3
private void createDetailsPart(final IManagedForm mform, Composite parent) {
    detailsPart = new  DetailsPart(mform, parent, SWT.NULL);
    mform.addPart(detailsPart);
    registerPages(detailsPart);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.refactoring.binary.BinaryRefactoringHistoryWizard$1.createPackageFragment(org.eclipse.core.filesystem.IFileStore;java.lang.String;org.eclipse.core.runtime.IProgressMonitor;)V4
@Override
protected final void createPackageFragment(final IFileStore store, final String name, final IProgressMonitor pm) throws CoreException {
    fFragment = sourceFolder.createPackageFragment(name, true, pm);
}
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.createPackageFragment(java.lang.String;ZLorg.eclipse.core.runtime.IProgressMonitor;)org.eclipse.jdt.core.IPackageFragment;4
public IPackageFragment createPackageFragment(String pkgName, boolean force, IProgressMonitor monitor) throws JavaModelException {
    CreatePackageFragmentOperation op = new  CreatePackageFragmentOperation(this, pkgName, force);
    op.runOperation(monitor);
    return getPackageFragment(op.pkgName);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.sdk.SimpleLicenseManager.accept(org.eclipse.equinox.p2.metadata.ILicense;)Z2
public boolean accept(ILicense license) {
    accepted.add(license.getUUID());
    updatePreferences();
    return true;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring$UsedNamesCollector.visit(org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;)Z2
@Override
public boolean visit(AnnotationTypeDeclaration node) {
    return visitType(node);
}
method: org.eclipse.jdt.internal.corext.refactoring.code.ExtractMethodRefactoring$UsedNamesCollector.visitType(org.eclipse.jdt.core.dom.AbstractTypeDeclaration;)Z2
private boolean visitType(AbstractTypeDeclaration node) {
    result.add(node.getName().getIdentifier());
    return false;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.SourceType.getTypes()Aorg.eclipse.jdt.core.IType;1
public IType[] getTypes() throws JavaModelException {
    ArrayList list = getChildrenOfType(TYPE);
    IType[] array = new IType[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.CheckoutAsMainPage.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;4
protected Button createRadioButton(Composite parent, String label, int span) {
    Button radio = super.createRadioButton(parent, label, span);
    radio.addSelectionListener(new  SelectionAdapter() {

        public void widgetSelected(SelectionEvent e) {
            updateEnablements();
        }
    });
    return radio;
}
---------------Client-------------------
method: org.eclipse.osgi.internal.resolver.StateObjectFactoryImpl.readState(java.io.DataInputStream;)org.eclipse.osgi.service.resolver.State;2
public State readState(DataInputStream stream) throws IOException {
    return internalReadStateDeprecated(internalCreateState(), stream, -1);
}
method: org.eclipse.osgi.internal.resolver.StateObjectFactoryImpl.internalCreateState()org.eclipse.osgi.internal.resolver.StateImpl;1
private StateImpl internalCreateState() {
    StateImpl state = new  UserState();
    state.setFactory(this);
    return state;
}

---------------Library-------------------
method: org.eclipse.ui.part.PageSite.registerContextMenu(java.lang.String;org.eclipse.jface.action.MenuManager;org.eclipse.jface.viewers.ISelectionProvider;)V4
@Override
public void registerContextMenu(String menuID, MenuManager menuMgr, ISelectionProvider selProvider) {
    if (menuExtenders == null) {
        menuExtenders = new  ArrayList(1);
    }
    PartSite.registerContextMenu(menuID, menuMgr, selProvider, false, parentSite.getPart(), e4Context, menuExtenders);
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageEditorSite.registerContextMenu(org.eclipse.jface.action.MenuManager;org.eclipse.jface.viewers.ISelectionProvider;Z)V4
@Override
public final void registerContextMenu(final MenuManager menuManager, final ISelectionProvider selectionProvider, final boolean includeEditorInput) {
    registerContextMenu(getId(), menuManager, selectionProvider, includeEditorInput);
}
method: org.eclipse.ui.part.MultiPageEditorSite.registerContextMenu(java.lang.String;org.eclipse.jface.action.MenuManager;org.eclipse.jface.viewers.ISelectionProvider;Z)V5
@Override
public final void registerContextMenu(final String menuId, final MenuManager menuManager, final ISelectionProvider selectionProvider, final boolean includeEditorInput) {
    if (menuExtenders == null) {
        menuExtenders = new  ArrayList(1);
    }
    PartSite.registerContextMenu(menuId, menuManager, selectionProvider, includeEditorInput, editor, context, menuExtenders);
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.patch.PatchedFileVariant$1.getContents()java.io.InputStream;1
public InputStream getContents() throws CoreException {
    FileDiffResult diffResult = patcher.getDiffResult(diff);
    return diffResult.getPatchedContents();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.nullInfoLessUnconditionalCopy()org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;1
public UnconditionalFlowInfo nullInfoLessUnconditionalCopy() {
    return unconditionalInitsWithoutSideEffect().nullInfoLessUnconditionalCopy();
}
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.unconditionalInitsWithoutSideEffect()org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo;1
public UnconditionalFlowInfo unconditionalInitsWithoutSideEffect() {
    return this.initsWhenTrue.unconditionalCopy().mergedWith(this.initsWhenFalse.unconditionalInits());
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.ResourceTree.isNameChange(org.eclipse.core.resources.IProject;org.eclipse.core.resources.IProjectDescription;)Z3
private boolean isNameChange(IProject project, IProjectDescription description) {
    return !project.getName().equals(description.getName());
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgPolicyFactory$NewNameProposer.isNewNameOk(org.eclipse.jdt.core.IPackageFragmentRoot;java.lang.String;)Z2
private static boolean isNewNameOk(IPackageFragmentRoot root, String newName) {
    return !root.getPackageFragment(newName).exists();
}
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.getPackageFragment(java.lang.String;)org.eclipse.jdt.core.IPackageFragment;2
public IPackageFragment getPackageFragment(String packageName) {
    String[] pkgName = Util.getTrimmedSimpleNames(packageName);
    return getPackageFragment(pkgName);
}

---------------Library-------------------
method: org.eclipse.jface.wizard.WizardDialog.setDisplayCursor(org.eclipse.swt.graphics.Cursor;)V2
private void setDisplayCursor(Cursor c) {
    Shell[] shells = getShell().getDisplay().getShells();
    for (int i = 0; i < shells.length; i++) {
        shells[i].setCursor(c);
    }
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.breakpoints.BreakpointsViewer.refresh()V1
@Override
public void refresh() {
    super.refresh();
    initializeCheckedState();
}
method: org.eclipse.debug.internal.ui.views.breakpoints.BreakpointsViewer.initializeCheckedState()V1
private void initializeCheckedState() {
    TreeItem[] items = getTree().getItems();
    for (int i = 0; i < items.length; i++) {
        updateCheckedState(items[i]);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.net.ProxyManager.fireChange(org.eclipse.core.net.proxy.IProxyChangeEvent;)V2
private void fireChange(final IProxyChangeEvent event) {
    Object[] l = listeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        final IProxyChangeListener listener = (IProxyChangeListener) l[i];
        SafeRunner.run(new  ISafeRunnable() {

            public void run() throws Exception {
                listener.proxyInfoChanged(event);
            }

            public void handleException(Throwable exception) {
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.actions.NewWizardsActionGroup.getNewWizardMenu()org.eclipse.ui.actions.NewWizardMenu;1
private NewWizardMenu getNewWizardMenu() {
    if (fNewWizardMenu == null) {
        fNewWizardMenu = new  NewWizardMenu(fSite.getWorkbenchWindow());
    }
    return fNewWizardMenu;
}
---------------Client-------------------
method: org.eclipse.emf.common.util.ECollections$2.listIterator()java.util.ListIterator;1
public ListIterator<Map.Entry<K, V>> listIterator() {
    return listView().listIterator();
}
method: org.eclipse.emf.common.util.ECollections$2.listView()java.util.List;1
protected List<Map.Entry<K, V>> listView() {
    if (listView == null) {
        listView = new  AbstractList<Map.Entry<K, V>>() {

            @Override
            public Map.Entry<K, V> get(int index) {
                return basicGet(index);
            }

            @Override
            public int size() {
                return map.size();
            }
        };
    }
    return listView;
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.PropertySheetPage.setRootEntry(org.eclipse.ui.views.properties.IPropertySheetEntry;)V2
public void setRootEntry(IPropertySheetEntry entry) {
    rootEntry = entry;
    if (viewer != null) {
        viewer.setRootEntry(rootEntry);
    }
}
---------------Client-------------------
method: org.eclipse.jface.text.quickassist.QuickAssistAssistant.setStatusLineVisible(Z)V2
public void setStatusLineVisible(boolean show) {
    fQuickAssistAssistantImpl.setStatusLineVisible(show);
}
method: org.eclipse.jface.text.contentassist.ContentAssistant.setStatusLineVisible(Z)V2
public void setStatusLineVisible(boolean show) {
    fIsStatusLineVisible = show;
    if (fProposalPopup != null)
        fProposalPopup.setStatusLineVisible(show);
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_entry_set_icon_from_stock(JIAB)V3
public static final void gtk_entry_set_icon_from_stock(long entry, int icon, byte[] stock) {
    lock.lock();
    try {
        _gtk_entry_set_icon_from_stock(entry, icon, stock);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.junit.launcher.JUnitLaunchConfigurationTab.updateKeepRunning(org.eclipse.debug.core.ILaunchConfiguration;)V2
private void updateKeepRunning(ILaunchConfiguration config) {
    boolean running = false;
    try {
        running = config.getAttribute(JUnitLaunchConfigurationConstants.ATTR_KEEPRUNNING, false);
    } catch (CoreException ce) {
    }
    fKeepRunning.setSelection(running);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.jetty.server.AsyncNCSARequestLog.doStart()V1
@Override
protected synchronized void doStart() throws Exception {
    super.doStart();
    _thread = new  WriterThread();
    _thread.start();
}
---------------Client-------------------
method: org.eclipse.jetty.server.ssl.SslSelectChannelConnector.setIncludeCipherSuites(Ajava.lang.String;)V2
@Deprecated
public void setIncludeCipherSuites(String[] cipherSuites) {
    _sslContextFactory.setIncludeCipherSuites(cipherSuites);
}
method: org.eclipse.jetty.util.ssl.SslContextFactory.setIncludeCipherSuites(Ajava.lang.String;)V2
public void setIncludeCipherSuites(String... cipherSuites) {
    checkNotStarted();
    _includeCipherSuites = new  LinkedHashSet<String>(Arrays.asList(cipherSuites));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.JavaElementDelta.sourceAttached(org.eclipse.jdt.core.IJavaElement;)V2
public void sourceAttached(IJavaElement element) {
    JavaElementDelta attachedDelta = new  JavaElementDelta(element);
    attachedDelta.changed(F_SOURCEATTACHED);
    insertDeltaTree(element, attachedDelta);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.addLongField(org.eclipse.jetty.io.Buffer;J)V3
public void addLongField(Buffer name, long value) {
    Buffer v = BufferUtil.toBuffer(value);
    add(name, v);
}
method: org.eclipse.jetty.io.BufferUtil.toBuffer(J)org.eclipse.jetty.io.Buffer;1
public static Buffer toBuffer(long value) {
    ByteArrayBuffer buf = new  ByteArrayBuffer(32);
    putDecLong(buf, value);
    return buf;
}

---------------Library-------------------
method: org.eclipse.jface.viewers.CellEditor.fireEnablementChanged(java.lang.String;)V2
protected void fireEnablementChanged(final String actionId) {
    Object[] array = propertyChangeListeners.getListeners();
    for (int i = 0; i < array.length; i++) {
        final IPropertyChangeListener l = (IPropertyChangeListener) array[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.propertyChange(new  PropertyChangeEvent(this, actionId, null, null));
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.debug.ui.WorkingDirectoryBlock.handleUseDefaultWorkingDirButtonSelected()V1
private void handleUseDefaultWorkingDirButtonSelected() {
    fWorkspaceButton.setEnabled(false);
    fOtherWorkingText.setEnabled(false);
    fVariablesButton.setEnabled(false);
    fFileSystemButton.setEnabled(false);
    fUseOtherDirButton.setSelection(false);
}
---------------Client-------------------
method: org.eclipse.ui.views.markers.internal.DialogProblemFilter.updateEnabledState(Z)V2
protected void updateEnabledState(boolean enabled) {
    super.updateEnabledState(enabled);
    descriptionGroup.updateEnablement(enabled);
    severityGroup.updateEnablement(enabled);
}
method: org.eclipse.ui.views.markers.internal.DialogProblemFilter$DescriptionGroup.updateEnablement(Z)V2
public void updateEnablement(boolean enabled) {
    descriptionLabel.setEnabled(enabled);
    combo.setEnabled(enabled);
    description.setEnabled(enabled);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.TreeModelLabelProvider.notifyUpdate(ILorg.eclipse.debug.internal.ui.viewers.model.provisional.ILabelUpdate;)V3
private void notifyUpdate(final int type, final ILabelUpdate update) {
    if (!fLabelListeners.isEmpty()) {
        Object[] listeners = fLabelListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            final ILabelUpdateListener listener = (ILabelUpdateListener) listeners[i];
            SafeRunner.run(new  ISafeRunnable() {

                @Override
                public void run() throws Exception {
                    switch(type) {
                        case TreeModelContentProvider.UPDATE_SEQUENCE_BEGINS:
                            listener.labelUpdatesBegin();
                            break;
                        case TreeModelContentProvider.UPDATE_SEQUENCE_COMPLETE:
                            listener.labelUpdatesComplete();
                            break;
                        case TreeModelContentProvider.UPDATE_BEGINS:
                            listener.labelUpdateStarted(update);
                            break;
                        case TreeModelContentProvider.UPDATE_COMPLETE:
                            listener.labelUpdateComplete(update);
                            break;
                        default:
                            break;
                    }
                }

                @Override
                public void handleException(Throwable exception) {
                    DebugUIPlugin.log(exception);
                }
            });
        }
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.history.CompareFileRevisionEditorInput$MyDiffNode.fireChange()V1
public void fireChange() {
    super.fireChange();
}
method: org.eclipse.team.internal.ui.mapping.AbstractCompareInput.fireChange()V1
protected void fireChange() {
    if (!listeners.isEmpty()) {
        Object[] allListeners = listeners.getListeners();
        for (int i = 0; i < allListeners.length; i++) {
            final ICompareInputChangeListener listener = (ICompareInputChangeListener) allListeners[i];
            SafeRunner.run(new  ISafeRunnable() {

                public void run() throws Exception {
                    listener.compareInputChanged(AbstractCompareInput.this);
                }

                public void handleException(Throwable exception) {
                }
            });
        }
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.browsing.JavaBrowsingPart.setViewerInput(java.lang.Object;)V2
private void setViewerInput(Object input) {
    fProcessSelectionEvents = false;
    fViewer.setInput(input);
    fProcessSelectionEvents = true;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.LibraryVisibilitySection.refresh()V1
public void refresh() {
    update(fCurrentLibrary);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_rc_style_set_fg(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_rc_style_set_fg(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_rc_style_set_fg(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.CreationReference;)Z2
@Override
public boolean visit(CreationReference node) {
    doVisitNode(node.getType());
    doVisitChildren(node.typeArguments());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.core.internal.net.proxy.win32.winhttp.ProxyProviderUtil.createProxy(java.lang.String;java.lang.String;I)org.eclipse.core.net.proxy.IProxyData;3
private static IProxyData createProxy(String scheme, String host, int port) {
    String type = resolveProxyType(scheme);
    ProxyData proxy = new  ProxyData(type);
    proxy.setHost(host);
    proxy.setPort(port);
    proxy.setSource("WINDOWS_IE");
    return proxy;
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.core.impl.engine.AbstractCSSEngine.parsePropertyValue(java.io.InputStream;)org.w3c.dom.css.CSSValue;2
@Override
public CSSValue parsePropertyValue(InputStream stream) throws IOException {
    InputSource source = new  InputSource();
    source.setByteStream(stream);
    return parsePropertyValue(source);
}
method: org.eclipse.e4.ui.css.core.impl.engine.AbstractCSSEngine.parsePropertyValue(org.w3c.css.sac.InputSource;)org.w3c.dom.css.CSSValue;2
@Override
public CSSValue parsePropertyValue(InputSource source) throws IOException {
    checkInputSource(source);
    CSSParser parser = makeCSSParser();
    return parser.parsePropertyValue(source);
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.Project.getActiveBuildConfig()org.eclipse.core.resources.IBuildConfiguration;1
public IBuildConfiguration getActiveBuildConfig() throws CoreException {
    ResourceInfo info = getResourceInfo(false, false);
    int flags = getFlags(info);
    checkAccessible(flags);
    return internalGetActiveBuildConfig();
}
---------------Client-------------------
method: org.eclipse.equinox.internal.security.storage.PasswordManagement.recoveryNode(org.eclipse.equinox.internal.security.storage.SecurePreferences;java.lang.String;)org.eclipse.equinox.internal.security.storage.SecurePreferences;2
private static SecurePreferences recoveryNode(SecurePreferences root, String moduleID) {
    return root.node(PASSWORD_RECOVERY_NODE).node(moduleID);
}
method: org.eclipse.equinox.internal.security.storage.SecurePreferences.node(java.lang.String;)org.eclipse.equinox.internal.security.storage.SecurePreferences;2
public SecurePreferences node(String pathName) {
    checkRemoved();
    validatePath(pathName);
    return navigateToNode(pathName, true);
}

---------------Library-------------------
method: org.eclipse.team.ui.synchronize.SynchronizePageActionGroup$VisibleRootsSelectionProvider.selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
private void selectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = selectionChangedListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsMainTab.updateWorkingDirectory(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateWorkingDirectory(ILaunchConfiguration configuration) {
    String workingDir = IExternalToolConstants.EMPTY_STRING;
    try {
        workingDir = configuration.getAttribute(IExternalToolConstants.ATTR_WORKING_DIRECTORY, IExternalToolConstants.EMPTY_STRING);
    } catch (CoreException ce) {
        ExternalToolsPlugin.getDefault().log(ExternalToolsLaunchConfigurationMessages.ExternalToolsMainTab_Error_reading_configuration_10, ce);
    }
    workDirectoryField.setText(workingDir);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.compare.CompareViewerPane$4.getName(org.eclipse.swt.accessibility.AccessibleEvent;)V2
public void getName(AccessibleEvent e) {
    if (e.childID != ACC.CHILDID_SELF) {
        ToolItem item = tb.getItem(e.childID);
        if (item != null) {
            String toolTip = item.getToolTipText();
            if (toolTip != null) {
                e.result = toolTip;
            }
        }
    }
}
---------------Client-------------------
method: org.eclipse.jface.viewers.deferred.BackgroundContentProvider.setLimit(I)V2
public void setLimit(int limit) {
    this.limit = limit;
    refresh();
}
method: org.eclipse.jface.viewers.deferred.BackgroundContentProvider.refresh()V1
public void refresh() {
    if (updator.isDisposed()) {
        return;
    }
    model.requestUpdate(listener);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.BinaryMethod.getRawParameterNames()Ajava.lang.String;1
public String[] getRawParameterNames() throws JavaModelException {
    IBinaryMethod info = (IBinaryMethod) getElementInfo();
    int paramCount = Signature.getParameterCount(new  String(info.getMethodDescriptor()));
    return getRawParameterNames(paramCount);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.jdom.DOMImport.getDetailedNode()org.eclipse.jdt.internal.core.jdom.DOMNode;1
protected DOMNode getDetailedNode() {
    return (DOMNode) getFactory().createImport(getContents());
}
method: org.eclipse.jdt.core.jdom.DOMFactory.createImport(java.lang.String;)org.eclipse.jdt.core.jdom.IDOMImport;2
public IDOMImport createImport(String sourceCode) {
    if (sourceCode == null) {
        return null;
    }
    return (new  DOMBuilder()).createImport(sourceCode.toCharArray());
}

---------------Library-------------------
method: org.eclipse.ui.part.PageSite.activate()V1
@Override
public void activate() {
    active = true;
    serviceLocator.activate();
    if (contextService != null) {
        contextService.activate();
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.console.PinConsoleAction.run()V1
@Override
public void run() {
    fView.setPinned(isChecked());
}
method: org.eclipse.ui.internal.console.ConsoleView.setPinned(Z)V2
@Override
public void setPinned(boolean pin) {
    fPinned = pin;
    if (fPinAction != null) {
        fPinAction.update();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.util.Changes.getModifiedFiles(Aorg.eclipse.ltk.core.refactoring.Change;)Aorg.eclipse.core.resources.IFile;1
public static IFile[] getModifiedFiles(Change[] changes) {
    List<IFile> result = new  ArrayList<IFile>();
    getModifiedFiles(result, changes);
    return result.toArray(new IFile[result.size()]);
}
---------------Client-------------------
method: org.eclipse.equinox.p2.engine.ProvisioningContext.getArtifactKeys(org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.equinox.p2.query.IQueryable;2
public IQueryable<IArtifactKey> getArtifactKeys(IProgressMonitor monitor) {
    return QueryUtil.compoundQueryable(getLoadedArtifactRepositories(monitor));
}
method: org.eclipse.equinox.p2.query.QueryUtil.compoundQueryable(java.util.Collection;)org.eclipse.equinox.p2.query.IQueryable;1
public static <T> IQueryable<T> compoundQueryable(Collection<? extends IQueryable<T>> queryables) {
    return new  CompoundQueryable<T>(queryables.toArray(new IQueryable[queryables.size()]));
}

---------------Library-------------------
method: org.eclipse.ui.forms.widgets.ScrolledFormText.setBackground(org.eclipse.swt.graphics.Color;)V2
public void setBackground(Color bg) {
    super.setBackground(bg);
    if (content != null)
        content.setBackground(bg);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.ui.internal.registry.RegistryReader.logMissingElement(org.eclipse.core.runtime.IConfigurationElement;java.lang.String;)V2
protected static void logMissingElement(IConfigurationElement element, String elementName) {
    logError(element, "Required sub element '" + elementName + "' not defined");
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setLocalImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;)V2
public static void setLocalImageDescriptors(IAction action, String iconName) {
    setImageDescriptors(action, "lcl16/", iconName);
}
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;java.lang.String;)V3
public static void setImageDescriptors(IAction action, String type, String relPath) {
    action.setImageDescriptor(create("e" + type, relPath));
}

---------------Library-------------------
method: org.eclipse.debug.internal.core.InputStreamMonitor.close()V1
public void close() {
    if (fThread != null) {
        Thread thread = fThread;
        fThread = null;
        thread.interrupt();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.apt.core.internal.AptPlugin.stop(org.osgi.framework.BundleContext;)V2
public void stop(BundleContext context) throws Exception {
    super.stop(context);
}
method: org.eclipse.core.runtime.Plugin.stop(org.osgi.framework.BundleContext;)V2
public void stop(BundleContext context) throws Exception {
    if (this.debugTracker != null) {
        this.debugTracker.close();
        this.debugTracker = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.navigator.extensions.RegistryReader.logMissingAttribute(org.eclipse.core.runtime.IConfigurationElement;java.lang.String;)V2
protected static void logMissingAttribute(IConfigurationElement element, String attributeName) {
    logError(element, "Required attribute '" + attributeName + "' not defined");
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setLocalImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;)V2
public static void setLocalImageDescriptors(IAction action, String iconName) {
    setImageDescriptors(action, "lcl16/", iconName);
}
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;java.lang.String;)V3
public static void setImageDescriptors(IAction action, String type, String relPath) {
    action.setImageDescriptor(create("e" + type, relPath));
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.set.ComputedSet.makeDirty()V1
private void makeDirty() {
    if (!dirty) {
        dirty = true;
        final Set oldSet = new  HashSet(cachedSet);
        makeStale();
        stopListening();
        fireSetChange(new  SetDiff() {

            SetDiff delegate;

            private SetDiff getDelegate() {
                if (delegate == null)
                    delegate = Diffs.computeSetDiff(oldSet, getSet());
                return delegate;
            }

            public Set getAdditions() {
                return getDelegate().getAdditions();
            }

            public Set getRemovals() {
                return getDelegate().getRemovals();
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.value.ComputedValue.makeDirty()V1
protected final void makeDirty() {
    if (!dirty) {
        dirty = true;
        stopListening();
        final Object oldValue = cachedValue;
        fireValueChange(new  ValueDiff() {

            public Object getOldValue() {
                return oldValue;
            }

            public Object getNewValue() {
                return getValue();
            }
        });
    }
}
method: org.eclipse.core.databinding.observable.value.AbstractObservableValue.fireValueChange(org.eclipse.core.databinding.observable.value.ValueDiff;)V2
protected void fireValueChange(ValueDiff diff) {
    super.fireChange();
    fireEvent(new  ValueChangeEvent(this, diff));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.cleanup.CleanUpTabPage.intent(org.eclipse.swt.widgets.Composite;)V2
protected void intent(Composite group) {
    Label l = new  Label(group, SWT.NONE);
    GridData gd = new  GridData();
    gd.widthHint = fPixelConverter.convertWidthInCharsToPixels(4);
    l.setLayoutData(gd);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.ui.wizards.cheatsheet.NewCategoryNameDialog.createUINameField(org.eclipse.swt.widgets.Composite;)V2
private void createUINameField(Composite parent) {
    createUINameLabel(parent);
    createUINameText(parent);
}
method: org.eclipse.pde.internal.ua.ui.wizards.cheatsheet.NewCategoryNameDialog.createUINameText(org.eclipse.swt.widgets.Composite;)V2
private void createUINameText(Composite parent) {
    int style = SWT.BORDER;
    fNameText = new  Text(parent, style);
    fNameText.setLayoutData(new  GridData(GridData.FILL_HORIZONTAL));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.getAdapter(java.lang.Class;)java.lang.Object;2
@Override
public Object getAdapter(Class adapter) {
    if (adapter == IJavaElement.class) {
        return getMember();
    } else if (adapter == IWorkbenchAdapter.class) {
        return new  MethodWrapperWorkbenchAdapter(this);
    } else {
        return null;
    }
}
---------------Client-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.getAdapter(java.lang.Class;)java.lang.Object;2
public Object getAdapter(Class adapter) {
    if (adapter == IShowInSource.class) {
        return getShowInSource();
    }
    if (adapter == IShowInTarget.class) {
        return getShowInTarget();
    }
    return null;
}
method: org.eclipse.ui.views.navigator.ResourceNavigator.getShowInTarget()org.eclipse.ui.part.IShowInTarget;1
protected IShowInTarget getShowInTarget() {
    return new  IShowInTarget() {

        public boolean show(ShowInContext context) {
            ArrayList toSelect = new  ArrayList();
            ISelection sel = context.getSelection();
            if (sel instanceof IStructuredSelection) {
                IStructuredSelection ssel = (IStructuredSelection) sel;
                for (Iterator i = ssel.iterator(); i.hasNext(); ) {
                    Object o = i.next();
                    if (o instanceof IResource) {
                        toSelect.add(o);
                    } else if (o instanceof IMarker) {
                        IResource r = ((IMarker) o).getResource();
                        if (r.getType() != IResource.ROOT) {
                            toSelect.add(r);
                        }
                    } else if (o instanceof IAdaptable) {
                        IAdaptable adaptable = (IAdaptable) o;
                        o = adaptable.getAdapter(IResource.class);
                        if (o instanceof IResource) {
                            toSelect.add(o);
                        } else {
                            o = adaptable.getAdapter(IMarker.class);
                            if (o instanceof IMarker) {
                                IResource r = ((IMarker) o).getResource();
                                if (r.getType() != IResource.ROOT) {
                                    toSelect.add(r);
                                }
                            }
                        }
                    }
                }
            }
            if (toSelect.isEmpty()) {
                Object input = context.getInput();
                if (input instanceof IAdaptable) {
                    IAdaptable adaptable = (IAdaptable) input;
                    Object o = adaptable.getAdapter(IResource.class);
                    if (o instanceof IResource) {
                        toSelect.add(o);
                    }
                }
            }
            if (!toSelect.isEmpty()) {
                selectReveal(new  StructuredSelection(toSelect));
                return true;
            }
            return false;
        }
    };
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.SWTFactory.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;I)org.eclipse.swt.widgets.Button;4
public static Button createPushButton(Composite parent, String label, Image image, int fill) {
    Button button = new  Button(parent, SWT.PUSH);
    button.setFont(parent.getFont());
    if (image != null) {
        button.setImage(image);
    }
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData(fill);
    button.setLayoutData(gd);
    SWTFactory.setButtonDimensionHint(button);
    return button;
}
---------------Client-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTab.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;)org.eclipse.swt.widgets.Button;4
protected Button createPushButton(Composite parent, String label, Image image) {
    return SWTFactory.createPushButton(parent, label, image);
}
method: org.eclipse.debug.internal.ui.SWTFactory.createPushButton(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Image;)org.eclipse.swt.widgets.Button;3
public static Button createPushButton(Composite parent, String label, Image image) {
    Button button = new  Button(parent, SWT.PUSH);
    button.setFont(parent.getFont());
    if (image != null) {
        button.setImage(image);
    }
    if (label != null) {
        button.setText(label);
    }
    GridData gd = new  GridData();
    button.setLayoutData(gd);
    setButtonDimensionHint(button);
    return button;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_fg(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_style_get_fg(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_style_get_fg(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.MultipleInputDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (title != null) {
        shell.setText(title);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionWizardPage$1.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent e) {
    useResourceTag = useResourceTagButton.getSelection();
    updateEnablement();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doUpdateUI()V1
protected void doUpdateUI() {
    fBuildPathDialogField.refresh();
    fClassPathList.refresh();
    doStatusLineUpdate();
}
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doStatusLineUpdate()V1
private void doStatusLineUpdate() {
    if (Display.getCurrent() != null) {
        IStatus res = findMostSevereStatus();
        fContext.statusChanged(res);
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TableItem.getBackground()org.eclipse.swt.graphics.Color;1
public Color getBackground() {
    checkWidget();
    if (!parent.checkData(this))
        error(SWT.ERROR_WIDGET_DISPOSED);
    return _getBackground();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getExtraIndentAfterNewLine()java.lang.String;1
private String getExtraIndentAfterNewLine() {
    int formatterContinuationIndentationSize = getContinuationIndentationSize();
    int binaryAlignmentValue = getBinaryOperatorAlignmentStyle();
    int indentSize = formatterContinuationIndentationSize;
    if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_BY_ONE) {
        indentSize = 1;
    } else if (binaryAlignmentValue == DefaultCodeFormatterConstants.INDENT_ON_COLUMN) {
    }
    return CodeFormatterUtil.createIndentString(indentSize, fProject);
}
method: org.eclipse.jdt.internal.ui.text.java.JavaStringAutoIndentStrategy.getBinaryOperatorAlignmentStyle()I1
private int getBinaryOperatorAlignmentStyle() {
    String binaryAlignmentValue = getCoreFormatterOption(DefaultCodeFormatterConstants.FORMATTER_ALIGNMENT_FOR_BINARY_EXPRESSION);
    return DefaultCodeFormatterConstants.getIndentStyle(binaryAlignmentValue);
}

---------------Library-------------------
method: org.eclipse.jface.preference.BooleanPropertyAction$1.propertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
@Override
public void propertyChange(PropertyChangeEvent event) {
    if (finalProprety.equals(event.getProperty())) {
        setChecked(Boolean.TRUE.equals(event.getNewValue()));
    }
}
---------------Client-------------------
method: org.eclipse.osgi.internal.log.EquinoxLogWriter.writeMessage(org.eclipse.osgi.framework.log.FrameworkLogEntry;)V2
private void writeMessage(FrameworkLogEntry entry) throws IOException {
    write(MESSAGE);
    writeSpace();
    writeln(entry.getMessage());
}
method: org.eclipse.osgi.internal.log.EquinoxLogWriter.write(java.lang.String;)V2
private void write(String message) throws IOException {
    if (message != null) {
        writer.write(message);
        if (consoleLog)
            System.out.print(message);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.dom.rewrite.NodeInfoStore.setPlaceholderData(org.eclipse.jdt.core.dom.ASTNode;org.eclipse.jdt.internal.core.dom.rewrite.NodeInfoStore$PlaceholderData;)V3
private void setPlaceholderData(ASTNode node, PlaceholderData data) {
    if (this.placeholderNodes == null) {
        this.placeholderNodes = new  IdentityHashMap();
    }
    this.placeholderNodes.put(node, data);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.ui.ide.dialogs.ResourceTreeAndListGroup.ungrayCheckHierarchy(java.lang.Object;)V2
private void ungrayCheckHierarchy(Object treeElement) {
    if (!determineShouldBeAtLeastGrayChecked(treeElement)) {
        checkedStateStore.remove(treeElement);
    }
    Object parent = treeContentProvider.getParent(treeElement);
    if (parent != null) {
        ungrayCheckHierarchy(parent);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.addDateTag(org.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;org.eclipse.team.internal.ccvs.core.CVSTag;)V3
public void addDateTag(ICVSRepositoryLocation location, CVSTag tag) {
    if (tag == null)
        return;
    RepositoryRoot root = getRepositoryRootFor(location);
    root.addDateTag(tag);
    broadcastRepositoryChange(root);
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot.addDateTag(org.eclipse.team.internal.ccvs.core.CVSTag;)V2
public void addDateTag(CVSTag tag) {
    if (!dateTags.contains(tag)) {
        dateTags.add(tag);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.util.Util.appendArrayTypeSignatureForAnchor(ACILjava.lang.StringBuffer;Z)I4
private static int appendArrayTypeSignatureForAnchor(char[] string, int start, StringBuffer buffer, boolean isVarArgs) {
    int length = string.length;
    if (start >= length - 1) {
        throw new  IllegalArgumentException();
    }
    char c = string[start];
    if (c != Signature.C_ARRAY) {
        throw new  IllegalArgumentException();
    }
    int index = start;
    c = string[++index];
    while (c == Signature.C_ARRAY) {
        if (index >= length - 1) {
            throw new  IllegalArgumentException();
        }
        c = string[++index];
    }
    int e = appendTypeSignatureForAnchor(string, index, buffer, false);
    for (int i = 1, dims = index - start; i < dims; i++) {
        buffer.append('[').append(']');
    }
    if (isVarArgs) {
        buffer.append('.').append('.').append('.');
    } else {
        buffer.append('[').append(']');
    }
    return e;
}
---------------Client-------------------
method: org.eclipse.equinox.p2.internal.repository.comparator.java.Signature.appendArrayTypeSignature(ACIZLjava.lang.StringBuffer;)I4
private static int appendArrayTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer) {
    return appendArrayTypeSignature(string, start, fullyQualifyTypeNames, buffer, false);
}
method: org.eclipse.equinox.p2.internal.repository.comparator.java.Signature.appendArrayTypeSignature(ACIZLjava.lang.StringBuffer;Z)I5
private static int appendArrayTypeSignature(char[] string, int start, boolean fullyQualifyTypeNames, StringBuffer buffer, boolean isVarArgs) {
    int length = string.length;
    if (start >= length - 1) {
        throw new  IllegalArgumentException();
    }
    char c = string[start];
    if (c != C_ARRAY) {
        throw new  IllegalArgumentException();
    }
    int index = start;
    c = string[++index];
    while (c == C_ARRAY) {
        if (index >= length - 1) {
            throw new  IllegalArgumentException();
        }
        c = string[++index];
    }
    int e = appendTypeSignature(string, index, fullyQualifyTypeNames, buffer);
    for (int i = 1, dims = index - start; i < dims; i++) {
        buffer.append('[').append(']');
    }
    if (isVarArgs) {
        buffer.append('.').append('.').append('.');
    } else {
        buffer.append('[').append(']');
    }
    return e;
}

---------------Library-------------------
method: org.eclipse.ui.internal.ObjectContributorManager.cacheResourceAdapterLookup(java.lang.Class;java.util.List;)V3
private void cacheResourceAdapterLookup(Class adapterClass, List results) {
    if (resourceAdapterLookup == null) {
        resourceAdapterLookup = new  HashMap();
    }
    resourceAdapterLookup.put(adapterClass, results);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;2
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(2);
    matchers.add(first);
    matchers.add(second);
    return allOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;2
public static <T> org.hamcrest.core.AnyOf<T> anyOf(org.hamcrest.Matcher<T> first, org.hamcrest.Matcher<? super T> second) {
    return org.hamcrest.core.AnyOf.<T>anyOf(first, second);
}
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;2
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    return anyOf(matchers);
}

---------------Library-------------------
method: org.eclipse.jface.layout.RowDataFactory.hint(II)org.eclipse.jface.layout.RowDataFactory;3
public RowDataFactory hint(int xHint, int yHint) {
    data.width = xHint;
    data.height = yHint;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.builders.ManifestErrorReporter.reportUnknownAttribute(org.w3c.dom.Element;java.lang.String;I)V4
protected void reportUnknownAttribute(Element element, String attName, int severity) {
    String message = NLS.bind(PDECoreMessages.Builders_Manifest_attribute, attName);
    report(message, getLine(element, attName), severity, PDEMarkerFactory.P_ILLEGAL_XML_NODE, element, attName, PDEMarkerFactory.CAT_OTHER);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.search.indexing.AbstractIndexer.addDefaultConstructorDeclaration(ACACII)V5
public void addDefaultConstructorDeclaration(char[] typeName, char[] packageName, int typeModifiers, int extraFlags) {
    addIndexEntry(CONSTRUCTOR_DECL, ConstructorPattern.createDefaultDeclarationIndexKey(CharOperation.lastSegment(typeName, '.'), packageName, typeModifiers, extraFlags));
}
method: org.eclipse.jdt.internal.core.search.matching.ConstructorPattern.createDefaultDeclarationIndexKey(ACACII)AC4
public static char[] createDefaultDeclarationIndexKey(char[] typeName, char[] packageName, int typeModifiers, int extraFlags) {
    return createDeclarationIndexKey(typeName, -1, null, null, null, 0, packageName, typeModifiers, extraFlags);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.JavaElementDelta.sourceDetached(org.eclipse.jdt.core.IJavaElement;)V2
public void sourceDetached(IJavaElement element) {
    JavaElementDelta detachedDelta = new  JavaElementDelta(element);
    detachedDelta.changed(F_SOURCEDETACHED);
    insertDeltaTree(element, detachedDelta);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.addLongField(org.eclipse.jetty.io.Buffer;J)V3
public void addLongField(Buffer name, long value) {
    Buffer v = BufferUtil.toBuffer(value);
    add(name, v);
}
method: org.eclipse.jetty.io.BufferUtil.toBuffer(J)org.eclipse.jetty.io.Buffer;1
public static Buffer toBuffer(long value) {
    ByteArrayBuffer buf = new  ByteArrayBuffer(32);
    putDecLong(buf, value);
    return buf;
}

---------------Library-------------------
method: org.eclipse.ltk.internal.ui.refactoring.history.EditRefactoringDetailsDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
protected void configureShell(final Shell shell) {
    super.configureShell(shell);
    if (fTitle != null)
        shell.setText(fTitle);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.target.TargetPlatformService.initializeEnvironmentInfo(org.eclipse.pde.internal.core.PDEPreferencesManager;org.eclipse.pde.core.target.ITargetDefinition;)V3
@SuppressWarnings("deprecation")
private void initializeEnvironmentInfo(PDEPreferencesManager preferences, ITargetDefinition target) {
    target.setOS(getValueOrNull(preferences.getString(ICoreConstants.OS)));
    target.setWS(getValueOrNull(preferences.getString(ICoreConstants.WS)));
    target.setNL(getValueOrNull(preferences.getString(ICoreConstants.NL)));
    target.setArch(getValueOrNull(preferences.getString(ICoreConstants.ARCH)));
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.CVSPerspective.createInitialLayout(org.eclipse.ui.IPageLayout;)V2
public void createInitialLayout(IPageLayout layout) {
    defineActions(layout);
    defineLayout(layout);
}
method: org.eclipse.team.internal.ccvs.ui.CVSPerspective.defineActions(org.eclipse.ui.IPageLayout;)V2
public void defineActions(IPageLayout layout) {
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.project");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.folder");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.file");
    layout.addShowViewShortcut(IPageLayout.ID_PROJECT_EXPLORER);
    layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);
    layout.addShowViewShortcut(IPageLayout.ID_TASK_LIST);
    layout.addShowViewShortcut(IHistoryView.VIEW_ID);
    layout.addShowViewShortcut(RepositoriesView.VIEW_ID);
    layout.addShowViewShortcut(ISynchronizeView.VIEW_ID);
    layout.addPerspectiveShortcut("org.eclipse.ui.resourcePerspective");
    layout.addPerspectiveShortcut("org.eclipse.team.ui.TeamSynchronizingPerspective");
}

---------------Library-------------------
method: org.eclipse.help.ui.internal.views.DynamicHelpPart.init(org.eclipse.help.ui.internal.views.ReusableHelpPart;java.lang.String;org.eclipse.ui.IMemento;)V4
public void init(ReusableHelpPart parent, String id, IMemento memento) {
    this.parent = parent;
    this.id = id;
    parent.hookFormText(searchResults);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.LibraryVisibilitySection.refresh()V1
public void refresh() {
    update(fCurrentLibrary);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.DependencyAnalysisSection.getPlugin()org.eclipse.pde.core.plugin.IPlugin;1
protected IPlugin getPlugin() {
    IBaseModel model = getPage().getModel();
    IPlugin plugin = null;
    if (model instanceof IPluginModel) {
        plugin = ((IPluginModel) model).getPlugin();
    }
    return plugin;
}
---------------Client-------------------
method: org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.getContainingContext(org.eclipse.e4.ui.model.application.ui.MUIElement;)org.eclipse.e4.core.contexts.IEclipseContext;2
@Override
public IEclipseContext getContainingContext(MUIElement element) {
    return ModelUtils.getContainingContext(element);
}
method: org.eclipse.e4.ui.model.internal.ModelUtils.getContainingContext(org.eclipse.e4.ui.model.application.MApplicationElement;)org.eclipse.e4.core.contexts.IEclipseContext;1
public static IEclipseContext getContainingContext(MApplicationElement element) {
    MApplicationElement curParent = getParent(element);
    while (curParent != null) {
        if (curParent instanceof MContext) {
            return ((MContext) curParent).getContext();
        }
        curParent = getParent(curParent);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.swt.browser.ExternalFactory.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.emf.ecore.change.impl.ResourceChangeImpl.apply(org.eclipse.emf.common.util.EList;)V2
protected void apply(EList<Object> toList) {
    for (ListChange listChange : getListChanges()) {
        listChange.apply(toList);
    }
}
---------------Client-------------------
method: org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(java.util.List;)V2
void rollbackSegmentInfos(List<SegmentInfo> infos) {
    this.clear();
    this.addAll(infos);
}
method: org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable;)V2
public void addAll(Iterable<SegmentInfo> sis) {
    for (final SegmentInfo si : sis) {
        this.add(si);
    }
}

---------------Library-------------------
method: org.eclipse.emf.ecore.change.impl.FeatureMapEntryImpl.getFeatureName()java.lang.String;1
public String getFeatureName() {
    return feature == null ? featureName : feature.getName();
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    return fInput.getContentBaseAddress();
}
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentInput.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    if (fMemoryBlockBaseAddress == null) {
        try {
            updateContentBaseAddress();
        } catch (DebugException e) {
            fMemoryBlockBaseAddress = new  BigInteger("0");
        }
    }
    return fMemoryBlockBaseAddress;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarManifestWizardPage.handleNewManifestFileBrowseButtonPressed()V1
protected void handleNewManifestFileBrowseButtonPressed() {
    SaveAsDialog dialog = new  SaveAsDialog(getContainer().getShell());
    dialog.create();
    dialog.getShell().setText(JarPackagerMessages.JarManifestWizardPage_saveAsDialog_title);
    dialog.setMessage(JarPackagerMessages.JarManifestWizardPage_saveAsDialog_message);
    dialog.setOriginalFile(createFileHandle(fJarPackage.getManifestLocation()));
    if (dialog.open() == Window.OK) {
        fJarPackage.setManifestLocation(dialog.getResult());
        fNewManifestFileText.setText(dialog.getResult().toString());
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarOptionsPage$1.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent e) {
    handleDescriptionFileBrowseButtonPressed();
}
method: org.eclipse.jdt.internal.ui.jarpackager.JarOptionsPage.handleDescriptionFileBrowseButtonPressed()V1
protected void handleDescriptionFileBrowseButtonPressed() {
    SaveAsDialog dialog = new  SaveAsDialog(getContainer().getShell());
    dialog.create();
    dialog.getShell().setText(JarPackagerMessages.JarOptionsPage_saveAsDialog_title);
    dialog.setMessage(JarPackagerMessages.JarOptionsPage_saveAsDialog_message);
    dialog.setOriginalFile(createFileHandle(fJarPackage.getDescriptionLocation()));
    if (dialog.open() == Window.OK) {
        IPath path = dialog.getResult();
        path = path.removeFileExtension().addFileExtension(JarPackagerUtil.DESCRIPTION_EXTENSION);
        fDescriptionFileText.setText(path.toString());
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.util.TypeInfoFilter.matchesCachedResult(org.eclipse.jdt.core.search.TypeNameMatch;)Z2
public boolean matchesCachedResult(TypeNameMatch type) {
    if (!(matchesPackage(type) && matchesFilterExtension(type)))
        return false;
    return matchesName(type);
}
---------------Client-------------------
method: org.eclipse.ui.actions.DeleteResourceAction.confirmDelete(Aorg.eclipse.core.resources.IResource;)Z2
private boolean confirmDelete(IResource[] resources) {
    if (containsOnlyProjects(resources)) {
        return confirmDeleteProjects(resources);
    }
    return confirmDeleteNonProjects(resources);
}
method: org.eclipse.ui.actions.DeleteResourceAction.containsOnlyProjects(Aorg.eclipse.core.resources.IResource;)Z2
private boolean containsOnlyProjects(IResource[] resources) {
    int types = getSelectedResourceTypes(resources);
    return types == IResource.PROJECT;
}

---------------Library-------------------
method: org.eclipse.emf.ecore.change.impl.FeatureChangeImpl.apply(org.eclipse.emf.common.util.EList;)V2
protected void apply(EList<Object> toList) {
    for (ListChange listChange : getListChanges()) {
        listChange.apply(toList);
    }
}
---------------Client-------------------
method: org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(java.util.List;)V2
void rollbackSegmentInfos(List<SegmentInfo> infos) {
    this.clear();
    this.addAll(infos);
}
method: org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable;)V2
public void addAll(Iterable<SegmentInfo> sis) {
    for (final SegmentInfo si : sis) {
        this.add(si);
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.CoolBar.setItemLayout(AIAIAorg.eclipse.swt.graphics.Point;)V4
public void setItemLayout(int[] itemOrder, int[] wrapIndices, Point[] sizes) {
    checkWidget();
    setItemOrder(itemOrder);
    setWrapIndices(wrapIndices);
    setItemSizes(sizes);
    relayout();
}
---------------Client-------------------
method: org.eclipse.jface.util.SafeRunnableDialog.handleSelectionChange()V1
void handleSelectionChange() {
    IStatus newSelection = getSingleSelection();
    setStatus(newSelection);
    updateEnablements();
    showDetailsArea();
}
method: org.eclipse.jface.util.SafeRunnableDialog.updateEnablements()V1
private void updateEnablements() {
    Button details = getButton(IDialogConstants.DETAILS_ID);
    if (details != null) {
        details.setEnabled(true);
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_rc_style_set_bg(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_rc_style_set_bg(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_rc_style_set_bg(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.nls.ModelChange.addXMLChange(org.eclipse.core.resources.IFile;org.eclipse.pde.internal.ui.nls.ModelChangeElement;)V3
private void addXMLChange(IFile file, ModelChangeElement change) {
    if (fXMLCoupling == null) {
        fXMLCoupling = new  ModelChangeFile(file, this);
    }
    if (!fXMLCoupling.getFile().equals(file)) {
        return;
    }
    fXMLCoupling.add(change);
}
---------------Client-------------------
method: org.eclipse.jface.commands.ActionHandler.addHandlerListener(org.eclipse.core.commands.IHandlerListener;)V2
@Override
public final void addHandlerListener(final IHandlerListener handlerListener) {
    if (!hasListeners()) {
        attachListener();
    }
    super.addHandlerListener(handlerListener);
}
method: org.eclipse.jface.commands.ActionHandler.attachListener()V1
private final void attachListener() {
    if (propertyChangeListener == null) {
        propertyChangeListener = new  IPropertyChangeListener() {

            @Override
            public final void propertyChange(final PropertyChangeEvent propertyChangeEvent) {
                final String property = propertyChangeEvent.getProperty();
                fireHandlerChanged(new  HandlerEvent(ActionHandler.this, IAction.ENABLED.equals(property), IAction.HANDLED.equals(property)));
            }
        };
    }
    this.action.addPropertyChangeListener(propertyChangeListener);
}

---------------Library-------------------
method: org.eclipse.ui.internal.intro.impl.presentations.IntroLaunchBar.dock(I)V2
public void dock(int side) {
    dispose();
    setLocation(side);
    storeLocation();
    IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    createControl(window.getShell());
}
---------------Client-------------------
method: org.eclipse.ui.internal.PluginActionContributionItem.dispose()V1
@Override
public void dispose() {
    unhookListeners();
    disposeIdentifier();
}
method: org.eclipse.ui.internal.PluginActionContributionItem.unhookListeners()V1
private void unhookListeners() {
    PlatformUI.getWorkbench().getActivitySupport().getActivityManager().removeActivityManagerListener(this);
    IIdentifier id = getIdentifier();
    if (id != null) {
        id.removeIdentifierListener(this);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.intro.impl.model.url.IntroURLParser.urlDecode(java.lang.String;)java.lang.String;1
private static String urlDecode(String encodedURL) {
    int len = encodedURL.length();
    ByteArrayOutputStream os = new  ByteArrayOutputStream(len);
    try {
        for (int i = 0; i < len; ) {
            switch(encodedURL.charAt(i)) {
                case '%':
                    if (len >= i + 3) {
                        os.write(Integer.parseInt(encodedURL.substring(i + 1, i + 3), 16));
                    }
                    i += 3;
                    break;
                case '+':
                    os.write(' ');
                    i++;
                    break;
                default:
                    os.write(encodedURL.charAt(i++));
                    break;
            }
        }
        return new  String(os.toByteArray(), "UTF8");
    } catch (UnsupportedEncodingException ex) {
        return null;
    }
}
---------------Client-------------------
method: org.eclipse.help.internal.util.URLCoder.decode(java.lang.String;)java.lang.String;1
public static String decode(String s) {
    try {
        return new  String(urlDecode(s), "UTF8");
    } catch (UnsupportedEncodingException uee) {
        return null;
    }
}
method: org.eclipse.help.internal.util.URLCoder.urlDecode(java.lang.String;)AB1
private static byte[] urlDecode(String encodedURL) {
    int len = encodedURL.length();
    ByteArrayOutputStream os = new  ByteArrayOutputStream(len);
    for (int i = 0; i < len; ) {
        switch(encodedURL.charAt(i)) {
            case '%':
                if (len >= i + 3) {
                    os.write(Integer.parseInt(encodedURL.substring(i + 1, i + 3), 16));
                }
                i += 3;
                break;
            case '+':
                os.write(' ');
                i++;
                break;
            default:
                os.write(encodedURL.charAt(i++));
                break;
        }
    }
    return os.toByteArray();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.pango_layout_index_to_pos(JILorg.eclipse.swt.internal.gtk.PangoRectangle;)V3
public static final void pango_layout_index_to_pos(long layout, int index, PangoRectangle pos) {
    lock.lock();
    try {
        _pango_layout_index_to_pos(layout, index, pos);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.callhierarchy.JavaImplementorFinder.findInterfaces(org.eclipse.jdt.core.IType;org.eclipse.core.runtime.IProgressMonitor;)java.util.Collection;3
public Collection<IType> findInterfaces(IType type, IProgressMonitor progressMonitor) {
    ITypeHierarchy typeHierarchy;
    try {
        typeHierarchy = type.newSupertypeHierarchy(progressMonitor);
        IType[] interfaces = typeHierarchy.getAllSuperInterfaces(type);
        HashSet<IType> result = new  HashSet<IType>(Arrays.asList(interfaces));
        return result;
    } catch (JavaModelException e) {
        JavaPlugin.log(e);
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.WidgetDelegatingValueProperty.observeDelayed(ILorg.eclipse.swt.widgets.Widget;)org.eclipse.jface.databinding.swt.ISWTObservableValue;3
public ISWTObservableValue observeDelayed(int delay, Widget widget) {
    return SWTObservables.observeDelayedValue(delay, observe(widget));
}
method: org.eclipse.jface.databinding.swt.SWTObservables.observeDelayedValue(ILorg.eclipse.jface.databinding.swt.ISWTObservableValue;)org.eclipse.jface.databinding.swt.ISWTObservableValue;2
public static ISWTObservableValue observeDelayedValue(int delay, ISWTObservableValue observable) {
    return new  SWTDelayedObservableValueDecorator(Observables.observeDelayedValue(delay, observable), observable.getWidget());
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.ApiBaselineManager.getManager()org.eclipse.pde.api.tools.internal.ApiBaselineManager;0
public static synchronized ApiBaselineManager getManager() {
    if (fInstance == null) {
        fInstance = new  ApiBaselineManager(ApiPlugin.isRunningInFramework());
    }
    return fInstance;
}
---------------Client-------------------
method: org.eclipse.ui.forms.HyperlinkSettings.getBusyCursor()org.eclipse.swt.graphics.Cursor;1
public Cursor getBusyCursor() {
    return FormsResources.getBusyCursor();
}
method: org.eclipse.ui.internal.forms.widgets.FormsResources.getBusyCursor()org.eclipse.swt.graphics.Cursor;0
public static Cursor getBusyCursor() {
    if (busyCursor == null)
        busyCursor = new  Cursor(Display.getCurrent(), SWT.CURSOR_WAIT);
    return busyCursor;
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridLayoutFactory.margins(II)org.eclipse.jface.layout.GridLayoutFactory;3
public GridLayoutFactory margins(int width, int height) {
    l.marginWidth = width;
    l.marginHeight = height;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.DelegatingModelPresentation.getText(java.lang.Object;)java.lang.String;2
@Override
public String getText(Object item) {
    IDebugModelPresentation lp = getConfiguredPresentation(item);
    if (lp != null) {
        return lp.getText(item);
    }
    return getDefaultText(item);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.search.PostfixLabelProvider.getImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
@Override
public Image getImage(Object element) {
    Image image = super.getImage(element);
    if (image != null)
        return image;
    return getParticipantImage(element);
}
method: org.eclipse.jdt.internal.ui.search.SearchLabelProvider.getParticipantImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
protected Image getParticipantImage(Object element) {
    ILabelProvider lp = getLabelProvider(element);
    if (lp == null)
        return null;
    return lp.getImage(element);
}

---------------Library-------------------
method: org.eclipse.ant.internal.launching.debug.model.AntThread.setPropertiesValid(Z)V2
private void setPropertiesValid(boolean valid) {
    if (fUserProperties != null) {
        fUserProperties.setValid(valid);
        fSystemProperties.setValid(valid);
        fRuntimeProperties.setValid(valid);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.CodeTemplateBlock.exportAll()V1
private void exportAll() {
    export(fTemplateStore.getTemplateData());
}
method: org.eclipse.jdt.internal.ui.viewsupport.ProjectTemplateStore.getTemplateData()Aorg.eclipse.jface.text.templates.persistence.TemplatePersistenceData;1
public TemplatePersistenceData[] getTemplateData() {
    if (fProjectStore != null) {
        return fProjectStore.getTemplateData(true);
    } else {
        return fInstanceStore.getTemplateData(true);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.createTableViewer(org.eclipse.swt.widgets.Composite;)org.eclipse.jface.viewers.TableViewer;2
protected TableViewer createTableViewer(Composite parent) {
    Table table = new  Table(parent, getListStyle());
    table.setFont(parent.getFont());
    return new  TableViewer(table);
}
---------------Client-------------------
method: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(java.io.File;)org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;1
public static HyphenationTree getHyphenationTree(File hyphenationFile) throws Exception {
    return getHyphenationTree(new  InputSource(hyphenationFile.toURL().toExternalForm()));
}
method: org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(org.xml.sax.InputSource;)org.apache.lucene.analysis.compound.hyphenation.HyphenationTree;1
public static HyphenationTree getHyphenationTree(InputSource hyphenationSource) throws Exception {
    HyphenationTree tree = new  HyphenationTree();
    tree.loadPatterns(hyphenationSource);
    return tree;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.classpath.ClasspathModel.removeAll()V1
public void removeAll() {
    if (bootstrapEntries != null) {
        bootstrapEntries.removeAll();
    }
    if (userEntries != null) {
        userEntries.removeAll();
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.search.internal.core.text.FileCharSequenceProvider$Buffer.insertBefore(org.eclipse.search.internal.core.text.FileCharSequenceProvider$Buffer;)V2
public void insertBefore(Buffer other) {
    fNext = other;
    fPrevious = other.fPrevious;
    fPrevious.fNext = this;
    other.fPrevious = this;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.goForCompilationUnit()V1
public void goForCompilationUnit() {
    super.goForCompilationUnit();
    this.isFirst = true;
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.goForCompilationUnit()V1
public void goForCompilationUnit() {
    this.firstToken = TokenNamePLUS_PLUS;
    this.scanner.foundTaskCount = 0;
    this.scanner.recordLineSeparator = true;
}

---------------Library-------------------
method: org.apache.batik.css.engine.value.svg.GlyphOrientationManager.createFloatValue(SF)org.apache.batik.css.engine.value.Value;3
public Value createFloatValue(short type, float floatValue) throws DOMException {
    switch(type) {
        case CSSPrimitiveValue.CSS_DEG:
        case CSSPrimitiveValue.CSS_GRAD:
        case CSSPrimitiveValue.CSS_RAD:
            return new  FloatValue(type, floatValue);
    }
    throw createInvalidFloatValueDOMException(floatValue);
}
---------------Client-------------------
method: org.eclipse.jdt.core.dom.AST.createInstance(I)org.eclipse.jdt.core.dom.ASTNode;2
public ASTNode createInstance(int nodeType) {
    Class nodeClass = ASTNode.nodeClassForType(nodeType);
    return createInstance(nodeClass);
}
method: org.eclipse.jdt.core.dom.ASTNode.nodeClassForType(I)java.lang.Class;1
public static Class nodeClassForType(int nodeType) {
    switch(nodeType) {
        case ANNOTATION_TYPE_DECLARATION:
            return AnnotationTypeDeclaration.class;
        case ANNOTATION_TYPE_MEMBER_DECLARATION:
            return AnnotationTypeMemberDeclaration.class;
        case ANONYMOUS_CLASS_DECLARATION:
            return AnonymousClassDeclaration.class;
        case ARRAY_ACCESS:
            return ArrayAccess.class;
        case ARRAY_CREATION:
            return ArrayCreation.class;
        case ARRAY_INITIALIZER:
            return ArrayInitializer.class;
        case ARRAY_TYPE:
            return ArrayType.class;
        case ASSERT_STATEMENT:
            return AssertStatement.class;
        case ASSIGNMENT:
            return Assignment.class;
        case BLOCK:
            return Block.class;
        case BLOCK_COMMENT:
            return BlockComment.class;
        case BOOLEAN_LITERAL:
            return BooleanLiteral.class;
        case BREAK_STATEMENT:
            return BreakStatement.class;
        case CAST_EXPRESSION:
            return CastExpression.class;
        case CATCH_CLAUSE:
            return CatchClause.class;
        case CHARACTER_LITERAL:
            return CharacterLiteral.class;
        case CLASS_INSTANCE_CREATION:
            return ClassInstanceCreation.class;
        case COMPILATION_UNIT:
            return CompilationUnit.class;
        case CONDITIONAL_EXPRESSION:
            return ConditionalExpression.class;
        case CONSTRUCTOR_INVOCATION:
            return ConstructorInvocation.class;
        case CONTINUE_STATEMENT:
            return ContinueStatement.class;
        case CREATION_REFERENCE:
            return CreationReference.class;
        case DIMENSION:
            return Dimension.class;
        case DO_STATEMENT:
            return DoStatement.class;
        case EMPTY_STATEMENT:
            return EmptyStatement.class;
        case ENHANCED_FOR_STATEMENT:
            return EnhancedForStatement.class;
        case ENUM_CONSTANT_DECLARATION:
            return EnumConstantDeclaration.class;
        case ENUM_DECLARATION:
            return EnumDeclaration.class;
        case EXPRESSION_METHOD_REFERENCE:
            return ExpressionMethodReference.class;
        case EXPRESSION_STATEMENT:
            return ExpressionStatement.class;
        case FIELD_ACCESS:
            return FieldAccess.class;
        case FIELD_DECLARATION:
            return FieldDeclaration.class;
        case FOR_STATEMENT:
            return ForStatement.class;
        case IF_STATEMENT:
            return IfStatement.class;
        case IMPORT_DECLARATION:
            return ImportDeclaration.class;
        case INFIX_EXPRESSION:
            return InfixExpression.class;
        case INITIALIZER:
            return Initializer.class;
        case INSTANCEOF_EXPRESSION:
            return InstanceofExpression.class;
        case INTERSECTION_TYPE:
            return IntersectionType.class;
        case JAVADOC:
            return Javadoc.class;
        case LABELED_STATEMENT:
            return LabeledStatement.class;
        case LAMBDA_EXPRESSION:
            return LambdaExpression.class;
        case LINE_COMMENT:
            return LineComment.class;
        case MARKER_ANNOTATION:
            return MarkerAnnotation.class;
        case MEMBER_REF:
            return MemberRef.class;
        case MEMBER_VALUE_PAIR:
            return MemberValuePair.class;
        case METHOD_DECLARATION:
            return MethodDeclaration.class;
        case METHOD_INVOCATION:
            return MethodInvocation.class;
        case METHOD_REF:
            return MethodRef.class;
        case METHOD_REF_PARAMETER:
            return MethodRefParameter.class;
        case MODIFIER:
            return Modifier.class;
        case NAME_QUALIFIED_TYPE:
            return NameQualifiedType.class;
        case NORMAL_ANNOTATION:
            return NormalAnnotation.class;
        case NULL_LITERAL:
            return NullLiteral.class;
        case NUMBER_LITERAL:
            return NumberLiteral.class;
        case PACKAGE_DECLARATION:
            return PackageDeclaration.class;
        case PARAMETERIZED_TYPE:
            return ParameterizedType.class;
        case PARENTHESIZED_EXPRESSION:
            return ParenthesizedExpression.class;
        case POSTFIX_EXPRESSION:
            return PostfixExpression.class;
        case PREFIX_EXPRESSION:
            return PrefixExpression.class;
        case PRIMITIVE_TYPE:
            return PrimitiveType.class;
        case QUALIFIED_NAME:
            return QualifiedName.class;
        case QUALIFIED_TYPE:
            return QualifiedType.class;
        case RETURN_STATEMENT:
            return ReturnStatement.class;
        case SIMPLE_NAME:
            return SimpleName.class;
        case SIMPLE_TYPE:
            return SimpleType.class;
        case SINGLE_MEMBER_ANNOTATION:
            return SingleMemberAnnotation.class;
        case SINGLE_VARIABLE_DECLARATION:
            return SingleVariableDeclaration.class;
        case STRING_LITERAL:
            return StringLiteral.class;
        case SUPER_CONSTRUCTOR_INVOCATION:
            return SuperConstructorInvocation.class;
        case SUPER_FIELD_ACCESS:
            return SuperFieldAccess.class;
        case SUPER_METHOD_INVOCATION:
            return SuperMethodInvocation.class;
        case SUPER_METHOD_REFERENCE:
            return SuperMethodReference.class;
        case SWITCH_CASE:
            return SwitchCase.class;
        case SWITCH_STATEMENT:
            return SwitchStatement.class;
        case SYNCHRONIZED_STATEMENT:
            return SynchronizedStatement.class;
        case TAG_ELEMENT:
            return TagElement.class;
        case TEXT_ELEMENT:
            return TextElement.class;
        case THIS_EXPRESSION:
            return ThisExpression.class;
        case THROW_STATEMENT:
            return ThrowStatement.class;
        case TRY_STATEMENT:
            return TryStatement.class;
        case TYPE_DECLARATION:
            return TypeDeclaration.class;
        case TYPE_DECLARATION_STATEMENT:
            return TypeDeclarationStatement.class;
        case TYPE_METHOD_REFERENCE:
            return TypeMethodReference.class;
        case TYPE_LITERAL:
            return TypeLiteral.class;
        case TYPE_PARAMETER:
            return TypeParameter.class;
        case UNION_TYPE:
            return UnionType.class;
        case VARIABLE_DECLARATION_EXPRESSION:
            return VariableDeclarationExpression.class;
        case VARIABLE_DECLARATION_FRAGMENT:
            return VariableDeclarationFragment.class;
        case VARIABLE_DECLARATION_STATEMENT:
            return VariableDeclarationStatement.class;
        case WHILE_STATEMENT:
            return WhileStatement.class;
        case WILDCARD_TYPE:
            return WildcardType.class;
    }
    throw new  IllegalArgumentException();
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.tools.UpdateBuildpathWizardPage$TablePart.createStructuredViewer(org.eclipse.swt.widgets.Composite;ILorg.eclipse.ui.forms.widgets.FormToolkit;)org.eclipse.jface.viewers.StructuredViewer;4
protected StructuredViewer createStructuredViewer(Composite parent, int style, FormToolkit toolkit) {
    StructuredViewer viewer = super.createStructuredViewer(parent, style, toolkit);
    viewer.setComparator(ListUtil.PLUGIN_COMPARATOR);
    return viewer;
}
---------------Client-------------------
method: org.apache.felix.gogo.shell.Builtin.format(org.apache.felix.service.command.CommandSession;java.lang.Object;)java.lang.CharSequence;3
public CharSequence format(CommandSession session, Object arg) {
    CharSequence result = session.format(arg, Converter.INSPECT);
    System.out.println(result);
    return result;
}
method: org.apache.felix.gogo.runtime.CommandSessionImpl.format(java.lang.Object;I)java.lang.CharSequence;3
public CharSequence format(Object result, int inspect) {
    try {
        return format(result, inspect, this);
    } catch (Exception e) {
        return "<can not format " + result + ":" + e;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.compare.PropertiesStructureCreator.worked(org.eclipse.core.runtime.IProgressMonitor;)V2
private void worked(IProgressMonitor monitor) {
    if (monitor.isCanceled())
        throw new  OperationCanceledException();
    monitor.worked(1);
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;)V1
public static void updateMonitor(IProgressMonitor monitor) throws OperationCanceledException {
    updateMonitor(monitor, 0);
}
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;I)V2
public static void updateMonitor(IProgressMonitor monitor, int work) throws OperationCanceledException {
    if (monitor == null) {
        return;
    }
    if (monitor.isCanceled()) {
        throw new  OperationCanceledException();
    }
    monitor.worked(work);
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.correction.java.QuickFixProcessor.getParent(org.eclipse.jdt.core.dom.ASTNode;)org.eclipse.jdt.core.dom.ASTNode;1
private static ASTNode getParent(ASTNode node) {
    do {
        node = node.getParent();
    } while (node != null && node.getNodeType() != ASTNode.IMPORT_DECLARATION);
    return node;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.fix.NullAnnotationsRewriteOperations.getDeclaringNode(org.eclipse.jdt.core.dom.ASTNode;)org.eclipse.jdt.core.dom.ASTNode;1
private static ASTNode getDeclaringNode(ASTNode selectedNode) {
    return ASTNodes.getParent(selectedNode, ASTNode.METHOD_DECLARATION);
}
method: org.eclipse.jdt.internal.corext.dom.ASTNodes.getParent(org.eclipse.jdt.core.dom.ASTNode;I)org.eclipse.jdt.core.dom.ASTNode;2
public static ASTNode getParent(ASTNode node, int nodeType) {
    do {
        node = node.getParent();
    } while (node != null && node.getNodeType() != nodeType);
    return node;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.contentassist.XMLContentAssistProcessor.assistSessionEnded(org.eclipse.jface.text.contentassist.ContentAssistEvent;)V2
public void assistSessionEnded(ContentAssistEvent event) {
    fRange = null;
    fAllExtPoints = null;
    fInternalExtPoints = null;
    fDocLen = -1;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.SizeCache.flush()V1
public void flush() {
    flush(true);
}
method: org.eclipse.ui.internal.layout.SizeCache.flush(Z)V2
public void flush(boolean recursive) {
    preferredSize = null;
    cachedWidth = null;
    cachedHeight = null;
    this.flushChildren = recursive;
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.WorkspaceRoot.findContainersForLocationURI(java.net.URI;I)Aorg.eclipse.core.resources.IContainer;3
public IContainer[] findContainersForLocationURI(URI location, int memberFlags) {
    if (!location.isAbsolute())
        throw new  IllegalArgumentException();
    return (IContainer[]) getLocalManager().allResourcesFor(location, false, memberFlags);
}
---------------Client-------------------
method: org.eclipse.core.internal.resources.WorkspaceRoot.findFilesForLocationURI(java.net.URI;)Aorg.eclipse.core.resources.IFile;2
public IFile[] findFilesForLocationURI(URI location) {
    return findFilesForLocationURI(location, NONE);
}
method: org.eclipse.core.internal.resources.WorkspaceRoot.findFilesForLocationURI(java.net.URI;I)Aorg.eclipse.core.resources.IFile;3
public IFile[] findFilesForLocationURI(URI location, int memberFlags) {
    if (!location.isAbsolute())
        throw new  IllegalArgumentException();
    return (IFile[]) getLocalManager().allResourcesFor(location, true, memberFlags);
}

---------------Library-------------------
method: org.eclipse.jface.internal.text.html.BrowserInformationControl.handleDispose()V1
protected void handleDispose() {
    if (fTextLayout != null) {
        fTextLayout.dispose();
        fTextLayout = null;
    }
    fBrowser = null;
    super.handleDispose();
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.plugin.AbstractPluginModelBase.dispose()V1
public void dispose() {
    fBundleDescription = null;
    super.dispose();
}
method: org.eclipse.pde.internal.core.AbstractNLModel.dispose()V1
public void dispose() {
    if (fNLHelper != null) {
        fNLHelper.dispose();
        fNLHelper = null;
    }
    super.dispose();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_rc_style_set_color_flags(JII)V3
public static final void gtk_rc_style_set_color_flags(long style, int index, int flag) {
    lock.lock();
    try {
        _gtk_rc_style_set_color_flags(style, index, flag);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_modify_bg(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_widget_modify_bg(long widget, int state, GdkColor color) {
    lock.lock();
    try {
        _gtk_widget_modify_bg(widget, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoriesFilterDialog.initializeValues()V1
void initializeValues() {
    if (filter == null)
        return;
    fShowModules.setSelection(filter.isShowModules());
}
---------------Client-------------------
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.reset()V1
public void reset() {
    eventHandler.reset(getRoots());
}
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.getRoots()Aorg.eclipse.core.resources.IResource;1
public IResource[] getRoots() {
    if (roots == null) {
        return super.getRoots();
    } else {
        return roots;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.codeassist.select.SelectionOnReferenceExpressionName.printExpression(ILjava.lang.StringBuffer;)java.lang.StringBuffer;3
public StringBuffer printExpression(int indent, StringBuffer output) {
    output.append("<SelectionOnReferenceExpressionName:");
    super.printExpression(indent, output);
    return output.append('>');
}
---------------Client-------------------
method: org.eclipse.ui.internal.intro.impl.util.StringUtil.concat(java.lang.String;java.lang.String;java.lang.String;java.lang.String;java.lang.String;)java.lang.StringBuffer;5
public static StringBuffer concat(String string1, String string2, String string3, String string4, String string5) {
    StringBuffer buffer = concat(string1, string2, string3, string4);
    buffer.append(string5);
    return buffer;
}
method: org.eclipse.ui.internal.intro.impl.util.StringUtil.concat(java.lang.String;java.lang.String;java.lang.String;java.lang.String;)java.lang.StringBuffer;4
public static StringBuffer concat(String string1, String string2, String string3, String string4) {
    StringBuffer buffer = concat(string1, string2, string3);
    buffer.append(string4);
    return buffer;
}

---------------Library-------------------
method: org.eclipse.search.internal.ui.SearchDialog.create()V1
public void create() {
    super.create();
    if (fCurrentPage != null) {
        fCurrentPage.setVisible(true);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.launchConfigurations.SetTargetsDialog.getTargetsSelected()java.lang.String;1
protected String getTargetsSelected() {
    String defaultValue = null;
    if (!fTargetsTab.isTargetSelected()) {
        defaultValue = IAntCoreConstants.EMPTY_STRING;
    }
    try {
        return fConfiguration.getAttribute(IAntLaunchConstants.ATTR_ANT_TARGETS, defaultValue);
    } catch (CoreException e) {
        return defaultValue;
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.intro.impl.model.AbstractIntroPage.findDomChild(java.lang.String;)org.w3c.dom.Element;2
public Element findDomChild(String id) {
    return findDomChild(id, "*");
}
method: org.eclipse.ui.internal.intro.impl.model.AbstractIntroPage.findDomChild(java.lang.String;java.lang.String;)org.w3c.dom.Element;3
public Element findDomChild(String id, String localElementName) {
    if (!loaded)
        loadChildren();
    return ModelUtil.getElementById(dom, id, localElementName);
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.views.Page.init(org.eclipse.swt.widgets.Display;)V2
protected void init(Display display) {
    toolkit = new  FormToolkit(display);
    backgroundColor = toolkit.getColors().getBackground();
}
---------------Client-------------------
method: org.eclipse.jface.contentassist.SubjectControlContentAssistant.install(org.eclipse.jface.contentassist.IContentAssistSubjectControl;)V2
public void install(IContentAssistSubjectControl contentAssistSubjectControl) {
    Assert.isNotNull(contentAssistSubjectControl);
    super.install(contentAssistSubjectControl);
}
method: org.eclipse.jface.text.contentassist.ContentAssistant.install(org.eclipse.jface.contentassist.IContentAssistSubjectControl;)V2
protected void install(IContentAssistSubjectControl contentAssistSubjectControl) {
    fContentAssistSubjectControl = contentAssistSubjectControl;
    fContentAssistSubjectControlAdapter = new  ContentAssistSubjectControlAdapter(fContentAssistSubjectControl);
    install();
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.nls.InternationalizeWizard.getSettingsSection(org.eclipse.jface.dialogs.IDialogSettings;)org.eclipse.jface.dialogs.IDialogSettings;2
private IDialogSettings getSettingsSection(IDialogSettings master) {
    IDialogSettings setting = master.getSection(STORE_SECTION);
    if (setting == null) {
        setting = master.addNewSection(STORE_SECTION);
    }
    return setting;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.core.commands.Command.removeExecutionListener(org.eclipse.core.commands.IExecutionListener;)V2
public final void removeExecutionListener(final IExecutionListener executionListener) {
    if (executionListener == null) {
        throw new  NullPointerException("Cannot remove a null execution listener");
    }
    if (executionListeners != null) {
        executionListeners.remove(executionListener);
        if (executionListeners.isEmpty()) {
            executionListeners = null;
        }
    }
}
---------------Client-------------------
method: org.eclipse.core.commands.Command.removeCommandListener(org.eclipse.core.commands.ICommandListener;)V2
public final void removeCommandListener(final ICommandListener commandListener) {
    if (commandListener == null) {
        throw new  NullPointerException("Cannot remove a null command listener");
    }
    removeListenerObject(commandListener);
}
method: org.eclipse.core.commands.common.EventManager.removeListenerObject(java.lang.Object;)V2
protected final synchronized void removeListenerObject(final Object listener) {
    if (listenerList != null) {
        listenerList.remove(listener);
        if (listenerList.isEmpty()) {
            listenerList = null;
        }
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.generics.InferTypeArgumentsConstraintCreator.createWildcardConstraint(org.eclipse.jdt.internal.corext.refactoring.typeconstraints.types.WildcardType;org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.CollectionElementVariable2;org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ConstraintVariable2;)V4
private void createWildcardConstraint(WildcardType typeArgument, CollectionElementVariable2 argElementCv, ConstraintVariable2 paramElementCv) {
    if (typeArgument.isExtendsWildcardType())
        fTCModel.createSubtypeConstraint(argElementCv, paramElementCv);
    else
        fTCModel.createSubtypeConstraint(paramElementCv, argElementCv);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.PlainJarBuilder.writeFile(org.eclipse.core.resources.IFile;org.eclipse.core.runtime.IPath;)V3
public void writeFile(IFile resource, IPath destinationPath) throws CoreException {
    fJarWriter.write(resource, destinationPath);
}
method: org.eclipse.jdt.ui.jarpackager.JarWriter3.write(org.eclipse.core.resources.IFile;org.eclipse.core.runtime.IPath;)V3
public void write(IFile resource, IPath destinationPath) throws CoreException {
    try {
        if (fJarPackage.areDirectoryEntriesIncluded())
            addDirectories(resource, destinationPath);
        addFile(resource, destinationPath);
    } catch (IOException ex) {
        String message = null;
        if (ex.getLocalizedMessage() != null)
            message = Messages.format(JarPackagerMessages.JarWriter_writeProblemWithMessage, new Object[] { BasicElementLabels.getPathLabel(resource.getFullPath(), false), ex.getLocalizedMessage() });
        else
            message = Messages.format(JarPackagerMessages.JarWriter_writeProblem, BasicElementLabels.getPathLabel(resource.getFullPath(), false));
        throw JarPackagerUtil.createCoreException(message, ex);
    }
}

---------------Library-------------------
method: org.eclipse.ui.trace.internal.TracingPreferencePage.setEnableTracingOutputFile(Z)V2
private void setEnableTracingOutputFile(boolean enable) {
    tracingOutputFileButton.setSelection(enable);
    tracingFileText.setEnabled(enable);
    maximumFileSizeSpinner.setEnabled(enable);
    maximumFileCountSpinner.setEnabled(enable);
    tracingFileBrowseButton.setEnabled(enable);
    tracingFileMaxCountLabel.setEnabled(enable);
    tracingFileMaxSizeLabel.setEnabled(enable);
}
---------------Client-------------------
method: org.eclipse.debug.ui.WorkingDirectoryBlock.setDefaultWorkingDirectoryText(java.lang.String;)V2
protected final void setDefaultWorkingDirectoryText(String dir) {
    if (dir != null) {
        fWorkingDirText.setText(dir);
        fUseDefaultDirButton.setSelection(true);
        handleUseDefaultWorkingDirButtonSelected();
    }
}
method: org.eclipse.debug.ui.WorkingDirectoryBlock.handleUseDefaultWorkingDirButtonSelected()V1
private void handleUseDefaultWorkingDirButtonSelected() {
    fWorkspaceButton.setEnabled(false);
    fOtherWorkingText.setEnabled(false);
    fVariablesButton.setEnabled(false);
    fFileSystemButton.setEnabled(false);
    fUseOtherDirButton.setSelection(false);
}

---------------Library-------------------
method: org.eclipse.jdt.ui.actions.RenameAction.selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
@Override
public void selectionChanged(SelectionChangedEvent event) {
    fRenameJavaElement.selectionChanged(event);
    if (fRenameResource != null)
        fRenameResource.selectionChanged(event);
    setEnabled(computeEnabledState());
}
---------------Client-------------------
method: org.eclipse.ui.internal.forms.widgets.FormHeading.setFont(org.eclipse.swt.graphics.Font;)V2
public void setFont(Font font) {
    super.setFont(font);
    titleRegion.setFont(font);
}
method: org.eclipse.swt.widgets.Canvas.setFont(org.eclipse.swt.graphics.Font;)V2
@Override
public void setFont(Font font) {
    checkWidget();
    if (caret != null)
        caret.setFont(font);
    super.setFont(font);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb$5$1.getViewerTreePath(org.eclipse.debug.internal.ui.viewers.model.provisional.IModelDelta;)org.eclipse.jface.viewers.TreePath;2
private TreePath getViewerTreePath(IModelDelta node) {
    ArrayList<Object> list = new  ArrayList<Object>();
    IModelDelta parentDelta = node.getParentDelta();
    while (parentDelta != null) {
        list.add(0, node.getElement());
        node = parentDelta;
        parentDelta = node.getParentDelta();
    }
    return new  TreePath(list.toArray());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.LabelResult.getTreePath()org.eclipse.jface.viewers.TreePath;1
@Override
public TreePath getTreePath() {
    return getNode().getTreePath();
}
method: org.eclipse.debug.internal.ui.viewers.ModelNode.getTreePath()org.eclipse.jface.viewers.TreePath;1
public synchronized TreePath getTreePath() {
    List<Object> path = new  ArrayList<Object>();
    ModelNode node = this;
    while (node != null) {
        path.add(0, node.getElement());
        node = node.getParentNode();
    }
    return new  TreePath(path.toArray());
}

---------------Library-------------------
method: org.eclipse.equinox.p2.internal.repository.comparator.java.Disassembler.decodeStringValue(AC)java.lang.String;1
static String decodeStringValue(char[] chars) {
    StringBuffer buffer = new  StringBuffer();
    for (int i = 0, max = chars.length; i < max; i++) {
        char c = chars[i];
        switch(c) {
            case '\b':
                buffer.append("\\b");
                break;
            case '\t':
                buffer.append("\\t");
                break;
            case '\n':
                buffer.append("\\n");
                break;
            case '\f':
                buffer.append("\\f");
                break;
            case '\r':
                buffer.append("\\r");
                break;
            case '\0':
                buffer.append("\\0");
                break;
            case '\1':
                buffer.append("\\1");
                break;
            case '\2':
                buffer.append("\\2");
                break;
            case '\3':
                buffer.append("\\3");
                break;
            case '\4':
                buffer.append("\\4");
                break;
            case '\5':
                buffer.append("\\5");
                break;
            case '\6':
                buffer.append("\\6");
                break;
            case '\7':
                buffer.append("\\7");
                break;
            default:
                buffer.append(c);
        }
    }
    return buffer.toString();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.util.Disassembler.decodeStringValue(AC)java.lang.String;1
static String decodeStringValue(char[] chars) {
    StringBuffer buffer = new  StringBuffer();
    for (int i = 0, max = chars.length; i < max; i++) {
        char c = chars[i];
        escapeChar(buffer, c);
    }
    return buffer.toString();
}
method: org.eclipse.jdt.internal.core.util.Disassembler.escapeChar(java.lang.StringBuffer;C)V2
private static void escapeChar(StringBuffer buffer, char c) {
    switch(c) {
        case '\b':
            buffer.append("\\b");
            break;
        case '\t':
            buffer.append("\\t");
            break;
        case '\n':
            buffer.append("\\n");
            break;
        case '\f':
            buffer.append("\\f");
            break;
        case '\r':
            buffer.append("\\r");
            break;
        case '\0':
            buffer.append("\\0");
            break;
        case '\1':
            buffer.append("\\1");
            break;
        case '\2':
            buffer.append("\\2");
            break;
        case '\3':
            buffer.append("\\3");
            break;
        case '\4':
            buffer.append("\\4");
            break;
        case '\5':
            buffer.append("\\5");
            break;
        case '\6':
            buffer.append("\\6");
            break;
        case '\7':
            buffer.append("\\7");
            break;
        default:
            buffer.append(c);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.commands.util.Util.compare(java.lang.Comparable;java.lang.Comparable;)I2
public static final int compare(final Comparable left, final Comparable right) {
    if (left == null && right == null) {
        return 0;
    } else if (left == null) {
        return -1;
    } else if (right == null) {
        return 1;
    } else {
        return left.compareTo(right);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equals(org.eclipse.core.runtime.IPath;org.eclipse.core.runtime.IPath;)Z3
protected boolean equals(IPath path1, IPath path2) {
    return equalsOrNull(path1, path2);
}
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equalsOrNull(java.lang.Object;java.lang.Object;)Z3
private boolean equalsOrNull(Object o1, Object o2) {
    if (o1 == null) {
        return o2 == null;
    }
    if (o2 == null) {
        return false;
    }
    return o1.equals(o2);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.structure.MoveInstanceMethodProcessor.getTargetIndex()I1
protected final int getTargetIndex() {
    final IVariableBinding[] targets = getPossibleTargets();
    int result = -1;
    for (int index = 0; index < targets.length; index++) {
        if (Bindings.equals(fTarget, targets[index])) {
            result = index;
            break;
        }
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.dialogs.ResourceMappingResourceDisplayArea$ResourceTraversalElement.isTraversalRoot(org.eclipse.core.resources.IResource;)Z2
private boolean isTraversalRoot(IResource resource) {
    return ResourceMappingResourceDisplayArea.isTraversalRoot(traversal, resource);
}
method: org.eclipse.team.internal.ui.dialogs.ResourceMappingResourceDisplayArea.isTraversalRoot(org.eclipse.core.resources.mapping.ResourceTraversal;org.eclipse.core.resources.IResource;)Z2
static boolean isTraversalRoot(ResourceTraversal traversal, IResource resource) {
    IResource[] resources = traversal.getResources();
    for (int i = 0; i < resources.length; i++) {
        IResource root = resources[i];
        if (root.equals(resource)) {
            return true;
        }
    }
    return false;
}

---------------Library-------------------
method: org.eclipse.jface.dialogs.DialogSettings.getOrCreateSection(org.eclipse.jface.dialogs.IDialogSettings;java.lang.String;)org.eclipse.jface.dialogs.IDialogSettings;2
public static IDialogSettings getOrCreateSection(IDialogSettings settings, String sectionName) {
    IDialogSettings section = settings.getSection(sectionName);
    if (section == null) {
        section = settings.addNewSection(sectionName);
    }
    return section;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.composite.views.CompositeCheatSheetPage.showDescription(org.eclipse.ui.internal.provisional.cheatsheets.ICompositeCheatSheetTask;)V2
private void showDescription(final ICompositeCheatSheetTask task) {
    if (descriptionPanel == null) {
        createDescriptionPanel();
    }
    descriptionPanel.showDescription(task);
    setCurrentEditor(descriptionPanel.getControl());
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple.SimpleCSMasterTreeSection.handleAddSubStepAction()V1
private void handleAddSubStepAction() {
    ISimpleCSObject csObject = getCurrentSelection();
    if (csObject == null) {
        return;
    }
    fAddSubStepAction.setDataObject(csObject);
    fAddSubStepAction.run();
}
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.simple.actions.SimpleCSAddSubStepAction.run()V1
public void run() {
    if (fItem == null) {
        return;
    }
    ISimpleCSSubItem newSubItem = createNewSubItem();
    insertNewSubItem(newSubItem);
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridDataFactory.grab(ZZ)org.eclipse.jface.layout.GridDataFactory;3
public GridDataFactory grab(boolean horizontal, boolean vertical) {
    data.grabExcessHorizontalSpace = horizontal;
    data.grabExcessVerticalSpace = vertical;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.participants.ResourceModifications.addMove(org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.MoveArguments;)V3
public void addMove(IResource move, MoveArguments arguments) {
    if (fMove == null) {
        fMove = new  ArrayList<IResource>(2);
        fMoveArguments = new  ArrayList<MoveArguments>(2);
    }
    fMove.add(move);
    fMoveArguments.add(arguments);
    if (fIgnoreCount == 0) {
        IPath destination = ((IResource) arguments.getDestination()).getFullPath().append(move.getName());
        internalAdd(new  MoveDescription(move, destination));
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.participants.ResourceModifications.addCopy(org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.CopyArguments;)V3
public void addCopy(IResource copy, CopyArguments arguments) {
    if (fCopy == null) {
        fCopy = new  ArrayList<IResource>(2);
        fCopyArguments = new  ArrayList<CopyArguments>(2);
    }
    fCopy.add(copy);
    fCopyArguments.add(arguments);
    addCopyDelta(copy, arguments);
}
method: org.eclipse.jdt.internal.corext.refactoring.participants.ResourceModifications.addCopyDelta(org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.CopyArguments;)V3
public void addCopyDelta(IResource copy, CopyArguments arguments) {
    if (fIgnoreCount == 0) {
        IPath destination = ((IResource) arguments.getDestination()).getFullPath().append(copy.getName());
        internalAdd(new  CopyDescription(copy, destination));
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.ExternalFeatureModelManager.fireModelProviderEvent(org.eclipse.pde.core.IModelProviderEvent;)V2
private void fireModelProviderEvent(IModelProviderEvent e) {
    Object[] listeners = fListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        IModelProviderListener listener = (IModelProviderListener) listeners[i];
        listener.modelsChanged(e);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.partPropertyChanged(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void partPropertyChanged(PropertyChangeEvent event) {
    firePartPropertyChange(event);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.firePartPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void firePartPropertyChange(PropertyChangeEvent event) {
    Object[] l = partChangeListeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        ((IPropertyChangeListener) l[i]).propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceModelActionProvider.setContext(org.eclipse.ui.actions.ActionContext;)V2
public void setContext(ActionContext context) {
    super.setContext(context);
    if (refactorActions != null)
        refactorActions.setContext(context);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.application.dialogs.IDEStartupPreferencePage.performDefaults()V1
protected void performDefaults() {
    IPreferenceStore store = getIDEPreferenceStore();
    refreshButton.setSelection(store.getDefaultBoolean(IDEInternalPreferences.REFRESH_WORKSPACE_ON_STARTUP));
    exitPromptButton.setSelection(store.getDefaultBoolean(IDEInternalPreferences.EXIT_PROMPT_ON_CLOSE_LAST_WINDOW));
    super.performDefaults();
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider$1.defaultSetChanged(org.eclipse.team.internal.core.subscribers.ChangeSet;org.eclipse.team.internal.core.subscribers.ChangeSet;)V3
public void defaultSetChanged(final ChangeSet previousDefault, final ChangeSet set) {
    refreshLabel(previousDefault);
    refreshLabel(set);
}
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.refreshLabel(org.eclipse.team.internal.core.subscribers.ChangeSet;)V2
public void refreshLabel(ChangeSet set) {
    ISynchronizeModelElement node = getModelElement(set);
    if (node != null) {
        getViewer().refresh(node);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagAsVersionDialog$1.modifyText(org.eclipse.swt.events.ModifyEvent;)V2
public void modifyText(ModifyEvent e) {
    tagName = tagCombo.getText();
    updateEnablements();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doUpdateUI()V1
protected void doUpdateUI() {
    fBuildPathDialogField.refresh();
    fClassPathList.refresh();
    doStatusLineUpdate();
}
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doStatusLineUpdate()V1
private void doStatusLineUpdate() {
    if (Display.getCurrent() != null) {
        IStatus res = findMostSevereStatus();
        fContext.statusChanged(res);
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.ViewerActionBuilder$ViewerContribution.dispose()V1
@Override
public void dispose() {
    if (selProvider != null) {
        selProvider.removeSelectionChangedListener(this);
    }
    disposeActions();
    super.dispose();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.launcher.SourceLookupBlock$2.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent evt) {
    setDirty(true);
    updateLaunchConfigurationDialog();
}
method: org.eclipse.jdt.internal.debug.ui.launcher.SourceLookupBlock.updateLaunchConfigurationDialog()V1
@Override
protected void updateLaunchConfigurationDialog() {
    if (getLaunchConfigurationDialog() != null) {
        super.updateLaunchConfigurationDialog();
    }
}

---------------Library-------------------
method: org.eclipse.swt.browser.Prompter.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (prompt != null) {
        prompt.dispose();
        prompt = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.spelling.SpellingEngineDescriptor.getId()java.lang.String;1
public String getId() {
    if (fId == null) {
        fId = fConfiguration.getAttribute(ID_ATTRIBUTE);
        Assert.isNotNull(fId);
    }
    return fId;
}
---------------Client-------------------
method: org.eclipse.ui.internal.Perspective.getPerspectiveExtensionActionSets()java.util.ArrayList;1
protected ArrayList getPerspectiveExtensionActionSets() {
    return page.getPerspectiveExtensionActionSets(descriptor.getOriginalId());
}
method: org.eclipse.ui.internal.registry.PerspectiveDescriptor.getOriginalId()java.lang.String;1
public String getOriginalId() {
    if (originalId == null) {
        originalId = getId();
    }
    return originalId;
}

---------------Library-------------------
method: org.eclipse.ui.internal.WorkingSetManager.handleInternalError(java.lang.Exception;java.lang.String;java.lang.String;)V4
private void handleInternalError(Exception exp, String title, String message) {
    Status status = new  Status(IStatus.ERROR, WorkbenchPlugin.PI_WORKBENCH, message, exp);
    StatusAdapter sa = new  StatusAdapter(status);
    sa.setProperty(IStatusAdapterConstants.TITLE_PROPERTY, title);
    StatusManager.getManager().handle(sa, StatusManager.SHOW | StatusManager.LOG);
}
---------------Client-------------------
method: org.eclipse.ui.views.markers.internal.ActionOpenMarker.reportError(java.lang.String;)V2
private void reportError(String message) {
    IStatus status = new  Status(IStatus.ERROR, IDEWorkbenchPlugin.IDE_WORKBENCH, message);
    reportStatus(status);
}
method: org.eclipse.ui.views.markers.internal.ActionOpenMarker.reportStatus(org.eclipse.core.runtime.IStatus;)V2
private void reportStatus(IStatus status) {
    StatusAdapter adapter = new  StatusAdapter(status);
    adapter.setProperty(StatusAdapter.TITLE_PROPERTY, MarkerMessages.OpenMarker_errorTitle);
    StatusManager.getManager().handle(adapter, StatusManager.SHOW);
}

---------------Library-------------------
method: org.eclipse.core.runtime.spi.RegistryStrategy.processChangeEvent(Ajava.lang.Object;java.util.Map;java.lang.Object;)org.eclipse.core.runtime.IStatus;3
public static final IStatus processChangeEvent(Object[] listeners, Map deltas, Object registry) {
    if (registry instanceof ExtensionRegistry)
        return ((ExtensionRegistry) registry).processChangeEvent(listeners, deltas);
    return null;
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.swt.dom.html.SWTHTMLElementProvider.getElement(java.lang.Object;org.eclipse.e4.ui.css.core.engine.CSSEngine;)org.w3c.dom.Element;3
@Override
public Element getElement(Object element, CSSEngine engine) {
    if (element instanceof Widget) {
        Widget widget = (Widget) element;
        return SWTElementHelpers.getHTMLElement(widget, engine);
    }
    return null;
}
method: org.eclipse.e4.ui.css.swt.helpers.SWTElementHelpers.getHTMLElement(org.eclipse.swt.widgets.Widget;org.eclipse.e4.ui.css.core.engine.CSSEngine;)org.w3c.dom.Element;2
public static Element getHTMLElement(Widget widget, CSSEngine engine) {
    try {
        return getElement(widget, engine, SWTHTMLElement.class);
    } catch (Exception e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.list.ComputedList.makeDirty()V1
private void makeDirty() {
    if (!dirty) {
        dirty = true;
        makeStale();
        stopListening();
        final List oldList = new  ArrayList(cachedList);
        fireListChange(new  ListDiff() {

            ListDiffEntry[] differences;

            public ListDiffEntry[] getDifferences() {
                if (differences == null)
                    differences = Diffs.computeListDiff(oldList, getList()).getDifferences();
                return differences;
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.value.ComputedValue.makeDirty()V1
protected final void makeDirty() {
    if (!dirty) {
        dirty = true;
        stopListening();
        final Object oldValue = cachedValue;
        fireValueChange(new  ValueDiff() {

            public Object getOldValue() {
                return oldValue;
            }

            public Object getNewValue() {
                return getValue();
            }
        });
    }
}
method: org.eclipse.core.databinding.observable.value.AbstractObservableValue.fireValueChange(org.eclipse.core.databinding.observable.value.ValueDiff;)V2
protected void fireValueChange(ValueDiff diff) {
    super.fireChange();
    fireEvent(new  ValueChangeEvent(this, diff));
}

---------------Library-------------------
method: org.eclipse.ui.actions.CopyProjectOperation.recordError(org.eclipse.core.runtime.CoreException;)V2
private void recordError(CoreException error) {
    if (errorStatus == null) {
        errorStatus = new  MultiStatus(PlatformUI.PLUGIN_ID, IStatus.ERROR, IDEWorkbenchMessages.CopyProjectOperation_copyFailedMessage, error);
    }
    errorStatus.merge(error.getStatus());
}
---------------Client-------------------
method: org.eclipse.ui.internal.decorators.DecorationScheduler.clearResults()V1
void clearResults() {
    if (clearJob == null) {
        clearJob = getClearJob();
    }
    clearJob.schedule();
}
method: org.eclipse.ui.internal.decorators.DecorationScheduler.getClearJob()org.eclipse.core.runtime.jobs.Job;1
private Job getClearJob() {
    Job clear = new  Job(WorkbenchMessages.DecorationScheduler_ClearResultsJob) {

        @Override
        protected IStatus run(IProgressMonitor monitor) {
            resultCache.clear();
            return Status.OK_STATUS;
        }

        @Override
        public boolean shouldRun() {
            return PlatformUI.isWorkbenchRunning();
        }
    };
    clear.setSystem(true);
    return clear;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.wizards.WorkingSetsDialog.close()Z1
public boolean close() {
    if (dlgTitleImage != null)
        dlgTitleImage.dispose();
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.themes.ThemeRegistryReader.getColorValue(org.eclipse.core.runtime.IConfigurationElement;)java.lang.String;2
private String getColorValue(IConfigurationElement element) {
    if (element == null) {
        return null;
    }
    String value = element.getAttribute(IWorkbenchRegistryConstants.ATT_VALUE);
    if (value == null) {
        value = checkColorFactory(element);
    }
    return value;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.osgi.internal.permadmin.SecurityTable.getEncodedRows()Ajava.lang.String;1
String[] getEncodedRows() {
    String[] encoded = new String[rows.length];
    for (int i = 0; i < rows.length; i++) encoded[i] = rows[i].getEncoded();
    return encoded;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.TagInRepositoryOperation.getTagSource()org.eclipse.team.internal.ccvs.ui.tags.TagSource;1
public TagSource getTagSource() {
    return TagSource.create(getCVSResources());
}
method: org.eclipse.team.internal.ccvs.ui.operations.RemoteOperation.getCVSResources()Aorg.eclipse.team.internal.ccvs.core.ICVSResource;1
public ICVSResource[] getCVSResources() {
    ICVSResource[] cvsResources = new ICVSResource[remoteResources.length];
    for (int i = 0; i < remoteResources.length; i++) {
        cvsResources[i] = remoteResources[i];
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.info(java.lang.String;Ajava.lang.Object;)V3
public void info(String msg, Object... args) {
    if (_level <= LEVEL_INFO) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":INFO:", msg, args);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.Throwable;)V2
public void debug(Throwable thrown) {
    debug("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;java.lang.Throwable;)V3
public void debug(String msg, Throwable thrown) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.info(java.lang.String;java.lang.Throwable;)V3
public void info(String msg, Throwable thrown) {
    if (_level <= LEVEL_INFO) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":INFO:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.Throwable;)V2
public void debug(Throwable thrown) {
    debug("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;java.lang.Throwable;)V3
public void debug(String msg, Throwable thrown) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.participants.ResourceModifications.buildMoveDelta(org.eclipse.core.resources.mapping.IResourceChangeDescriptionFactory;org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.RenameArguments;)V3
public static void buildMoveDelta(IResourceChangeDescriptionFactory builder, IResource resource, RenameArguments args) {
    IPath newPath = resource.getFullPath().removeLastSegments(1).append(args.getNewName());
    new  MoveDescription(resource, newPath).buildDelta(builder);
}
---------------Client-------------------
method: org.eclipse.ltk.internal.ui.refactoring.RefactoringWizardDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
protected void configureShell(Shell newShell) {
    super.configureShell(newShell);
    getRefactoringWizard().getRefactoring().setValidationContext(newShell);
}
method: org.eclipse.jface.wizard.WizardDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell newShell) {
    super.configureShell(newShell);
    newShell.addHelpListener(new  HelpListener() {

        @Override
        public void helpRequested(HelpEvent event) {
            if (currentPage != null) {
                currentPage.performHelp();
            }
        }
    });
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.feature.IncludedFeaturesSection.handleSelectAll()V1
private void handleSelectAll() {
    IStructuredContentProvider provider = (IStructuredContentProvider) fIncludesViewer.getContentProvider();
    Object[] elements = provider.getElements(fIncludesViewer.getInput());
    StructuredSelection ssel = new  StructuredSelection(elements);
    fIncludesViewer.setSelection(ssel);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage$2.menuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
public void menuAboutToShow(IMenuManager m) {
    contextMenuAboutToShow(m);
}
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage.contextMenuAboutToShow(org.eclipse.jface.action.IMenuManager;)V2
protected void contextMenuAboutToShow(IMenuManager menu) {
    JavaPlugin.createStandardGroups(menu);
    IStructuredSelection selection = (IStructuredSelection) getSelection();
    fActionGroups.setContext(new  ActionContext(selection));
    fActionGroups.fillContextMenu(menu);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnExpressionStackLengthStack(I)V2
protected void pushOnExpressionStackLengthStack(int pos) {
    int stackLength = this.expressionLengthStack.length;
    if (++this.expressionLengthPtr >= stackLength) {
        System.arraycopy(this.expressionLengthStack, 0, this.expressionLengthStack = new int[stackLength + StackIncrement], 0, stackLength);
    }
    this.expressionLengthStack[this.expressionLengthPtr] = pos;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.parser.Parser.consumeEmptyTypeArguments()V1
protected void consumeEmptyTypeArguments() {
    pushOnGenericsLengthStack(0);
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.pushOnGenericsLengthStack(I)V2
protected void pushOnGenericsLengthStack(int pos) {
    int stackLength = this.genericsLengthStack.length;
    if (++this.genericsLengthPtr >= stackLength) {
        System.arraycopy(this.genericsLengthStack, 0, this.genericsLengthStack = new int[stackLength + GenericsStackIncrement], 0, stackLength);
    }
    this.genericsLengthStack[this.genericsLengthPtr] = pos;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.SmartBackspaceManager$BackspaceListener.endChange()V1
private void endChange() {
    ITextViewer viewer = fViewer;
    if (viewer instanceof TextViewer) {
        TextViewer v = (TextViewer) viewer;
        v.getRewriteTarget().endCompoundChange();
    }
}
---------------Client-------------------
method: org.eclipse.ui.forms.DetailsPart.refresh()V1
public void refresh() {
    IDetailsPage page = getCurrentPage();
    if (page != null)
        page.refresh();
}
method: org.eclipse.ui.forms.DetailsPart.getCurrentPage()org.eclipse.ui.forms.IDetailsPage;1
public IDetailsPage getCurrentPage() {
    Control control = pageBook.getCurrentPage();
    if (control != null) {
        Object data = control.getData();
        if (data instanceof IDetailsPage)
            return (IDetailsPage) data;
    }
    return null;
}

---------------Library-------------------
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;2
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    return anyOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;2
public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T> first, org.hamcrest.Matcher<? super T> second) {
    return org.hamcrest.core.AllOf.<T>allOf(first, second);
}
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;2
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(2);
    matchers.add(first);
    matchers.add(second);
    return allOf(matchers);
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_cell_renderer_set_fixed_size(JII)V3
public static final void gtk_cell_renderer_set_fixed_size(long cell, int width, int height) {
    lock.lock();
    try {
        _gtk_cell_renderer_set_fixed_size(cell, width, height);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.dialogs.FilteredTypesSelectionDialog.createFilter()org.eclipse.ui.dialogs.FilteredItemsSelectionDialog$ItemsFilter;1
@Override
protected ItemsFilter createFilter() {
    fFilter = new  TypeItemsFilter(fSearchScope, fElementKinds, fFilterExtension);
    return fFilter;
}
---------------Client-------------------
method: org.eclipse.jface.layout.RowDataFactory.create()org.eclipse.swt.layout.RowData;1
public RowData create() {
    return copyData(data);
}
method: org.eclipse.jface.layout.RowDataFactory.copyData(org.eclipse.swt.layout.RowData;)org.eclipse.swt.layout.RowData;1
public static RowData copyData(RowData data) {
    RowData newData = new  RowData(data.width, data.height);
    newData.exclude = data.exclude;
    return newData;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.imports.RepositoryImportWizard.getSettingsSection(org.eclipse.jface.dialogs.IDialogSettings;)org.eclipse.jface.dialogs.IDialogSettings;2
private IDialogSettings getSettingsSection(IDialogSettings master) {
    IDialogSettings setting = master.getSection(STORE_SECTION);
    if (setting == null) {
        setting = master.addNewSection(STORE_SECTION);
    }
    return setting;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.ui.internal.misc.Policy.getDebugOption(java.lang.String;)Z1
private static boolean getDebugOption(String option) {
    return "true".equalsIgnoreCase(Platform.getDebugOption(PlatformUI.PLUGIN_ID + option));
}
---------------Client-------------------
method: org.apache.batik.util.gui.CSSMediaPanel.showDialog(java.awt.Component;java.lang.String;)I2
public static int showDialog(Component parent, String title) {
    return showDialog(parent, title, "");
}
method: org.apache.batik.util.gui.CSSMediaPanel.showDialog(java.awt.Component;java.lang.String;java.lang.String;)I3
public static int showDialog(Component parent, String title, String media) {
    Dialog dialog = new  Dialog(parent, title, media);
    dialog.setModal(true);
    dialog.pack();
    dialog.setVisible(true);
    return dialog.getReturnCode();
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.DebugPluginImages.initializeImageRegistry()org.eclipse.jface.resource.ImageRegistry;0
public static synchronized ImageRegistry initializeImageRegistry() {
    if (imageRegistry == null) {
        imageRegistry = new  ImageRegistry(DebugUIPlugin.getStandardDisplay());
        declareImages();
    }
    return imageRegistry;
}
---------------Client-------------------
method: org.eclipse.ui.forms.HyperlinkSettings.getBusyCursor()org.eclipse.swt.graphics.Cursor;1
public Cursor getBusyCursor() {
    return FormsResources.getBusyCursor();
}
method: org.eclipse.ui.internal.forms.widgets.FormsResources.getBusyCursor()org.eclipse.swt.graphics.Cursor;0
public static Cursor getBusyCursor() {
    if (busyCursor == null)
        busyCursor = new  Cursor(Display.getCurrent(), SWT.CURSOR_WAIT);
    return busyCursor;
}

---------------Library-------------------
method: org.eclipse.jface.text.contentassist.ContentAssistant.fireSelectionEvent(org.eclipse.jface.text.contentassist.ICompletionProposal;Z)V3
void fireSelectionEvent(ICompletionProposal proposal, boolean smartToggle) {
    Object[] listeners = fCompletionListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ICompletionListener listener = (ICompletionListener) listeners[i];
        listener.selectionChanged(proposal, smartToggle);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.fireVisibilityChange()V1
void fireVisibilityChange() {
    fireInternalPropertyChange(INTERNAL_PROPERTY_VISIBLE);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.fireInternalPropertyChange(I)V2
protected void fireInternalPropertyChange(int id) {
    Object listeners[] = internalPropChangeListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((IPropertyListener) listeners[i]).propertyChanged(this, id);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.AbstractSynchronizePage.init(org.eclipse.team.ui.synchronize.ISynchronizePageSite;)V2
public void init(ISynchronizePageSite site) {
    this.site = site;
    IDialogSettings settings = getSettings();
    if (settings != null) {
        try {
            int mode = settings.getInt(ISynchronizePageConfiguration.P_MODE);
            if (mode != 0) {
                configuration.setMode(mode);
            }
        } catch (NumberFormatException e) {
        }
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkingSetManager.addRecentWorkingSet(org.eclipse.ui.IWorkingSet;)V2
@Override
public void addRecentWorkingSet(IWorkingSet workingSet) {
    internalAddRecentWorkingSet(workingSet);
    saveState();
}
method: org.eclipse.ui.internal.WorkingSetManager.saveState()V1
private void saveState() {
    if (restoreInProgress) {
        savePending = true;
        return;
    }
    File stateFile = getWorkingSetStateFile();
    if (stateFile == null) {
        return;
    }
    try {
        saveState(stateFile);
    } catch (IOException e) {
        stateFile.delete();
        handleInternalError(e, WorkbenchMessages.ProblemSavingWorkingSetState_title, WorkbenchMessages.ProblemSavingWorkingSetState_message);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.commands.CommandCopyFilter.filter(java.lang.String;ZLjava.lang.String;)java.lang.String;4
public final String filter(String serializedCommand, boolean surroundWithMarkup, String markupLabel) {
    if (surroundWithMarkup)
        return markup(escape(serializedCommand), markupLabel);
    return escape(serializedCommand);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.decodeJRELibraryDescription(java.lang.String;)java.lang.String;1
public static String decodeJRELibraryDescription(String encoded) {
    int end = encoded.indexOf(' ');
    if (end != -1) {
        return decode(encoded.substring(0, end));
    }
    return "";
}
method: org.eclipse.jdt.internal.ui.preferences.NewJavaProjectPreferencePage.decode(java.lang.String;)java.lang.String;1
private static String decode(String str) {
    try {
        return URLDecoder.decode(str, ENCODING);
    } catch (UnsupportedEncodingException e) {
        JavaPlugin.log(e);
    }
    return "";
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.model.JavaSynchronizationContentProvider.getModelRoot()java.lang.Object;1
@Override
protected Object getModelRoot() {
    if (fModelRoot == null)
        fModelRoot = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot());
    return fModelRoot;
}
---------------Client-------------------
method: org.eclipse.compare.CompareUI.getResourceBundle()java.util.ResourceBundle;0
public static ResourceBundle getResourceBundle() {
    return CompareUIPlugin.getDefault().getResourceBundle();
}
method: org.eclipse.compare.internal.CompareUIPlugin.getResourceBundle()java.util.ResourceBundle;1
public ResourceBundle getResourceBundle() {
    if (fResourceBundle == null)
        fResourceBundle = Platform.getResourceBundle(getBundle());
    return fResourceBundle;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.GeneralInfoSection.getModelBase()org.eclipse.pde.core.plugin.IPluginModelBase;1
protected IPluginModelBase getModelBase() {
    if (fModel == null) {
        fModel = PluginRegistry.findModel(getProject());
    }
    return fModel;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.ShowViewDialog.popUp(java.lang.String;)V2
private void popUp(final String description) {
    new  PopupDialog(filteredTree.getShell(), PopupDialog.HOVER_SHELLSTYLE, true, false, false, false, false, null, null) {

        private static final int CURSOR_SIZE = 15;

        @Override
        protected Point getInitialLocation(Point initialSize) {
            Display display = getShell().getDisplay();
            Point location = display.getCursorLocation();
            location.x += CURSOR_SIZE;
            location.y += CURSOR_SIZE;
            return location;
        }

        @Override
        protected Control createDialogArea(Composite parent) {
            Label label = new  Label(parent, SWT.WRAP);
            label.setText(description);
            label.addFocusListener(new  FocusAdapter() {

                @Override
                public void focusLost(FocusEvent event) {
                    close();
                }
            });
            GridData gd = new  GridData(GridData.BEGINNING | GridData.FILL_BOTH);
            gd.horizontalIndent = PopupDialog.POPUP_HORIZONTALSPACING;
            gd.verticalIndent = PopupDialog.POPUP_VERTICALSPACING;
            label.setLayoutData(gd);
            return label;
        }
    }.open();
}
---------------Client-------------------
method: org.eclipse.ui.internal.actions.SelectWorkingSetsAction$ManageWorkingSetsAction.run()V1
@Override
public void run() {
    SelectWorkingSetsAction.this.run(this);
}
method: org.eclipse.ui.internal.actions.SelectWorkingSetsAction.run(org.eclipse.jface.action.IAction;)V2
@Override
public void run(IAction action) {
    ConfigureWindowWorkingSetsDialog dialog = new  ConfigureWindowWorkingSetsDialog(getWindow());
    if (dialog.open() == Window.OK) {
    }
}

---------------Library-------------------
method: org.eclipse.debug.core.sourcelookup.containers.CompositeSourceContainer.dispose()V1
@Override
public void dispose() {
    super.dispose();
    if (fContainers != null) {
        for (int i = 0; i < fContainers.length; i++) {
            ISourceContainer container = fContainers[i];
            container.dispose();
        }
    }
    fContainers = null;
}
---------------Client-------------------
method: org.eclipse.ui.actions.CompoundContributionItem.dispose()V1
@Override
public void dispose() {
    disposeOldItems();
    super.dispose();
}
method: org.eclipse.ui.actions.CompoundContributionItem.disposeOldItems()V1
private void disposeOldItems() {
    if (oldItems != null) {
        for (int i = 0; i < oldItems.length; i++) {
            IContributionItem oldItem = oldItems[i];
            oldItem.dispose();
        }
        oldItems = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.junit.refactoring.LaunchConfigRenameChange.alterLaunchConfiguration(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;)V2
@Override
protected void alterLaunchConfiguration(ILaunchConfigurationWorkingCopy copy) throws CoreException {
    if (!fLaunchManager.isExistingLaunchConfigurationName(fNewName))
        copy.rename(fNewName);
}
---------------Client-------------------
method: org.eclipse.core.internal.resources.refresh.win32.Win32Monitor$LinkedResourceHandle.postRefreshRequest()V1
public void postRefreshRequest() {
    postRefreshRequest(resource);
}
method: org.eclipse.core.internal.resources.refresh.win32.Win32Monitor$Handle.postRefreshRequest(org.eclipse.core.resources.IResource;)V2
protected void postRefreshRequest(IResource resource) {
    if (!resource.isSynchronized(IResource.DEPTH_INFINITE))
        refreshResult.refresh(resource);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.AbstractDebugSelectionDialog.getDialogBoundsSettings()org.eclipse.jface.dialogs.IDialogSettings;1
@Override
protected IDialogSettings getDialogBoundsSettings() {
    IDialogSettings settings = DebugUIPlugin.getDefault().getDialogSettings();
    IDialogSettings section = settings.getSection(getDialogSettingsId());
    if (section == null) {
        section = settings.addNewSection(getDialogSettingsId());
    }
    return section;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.ui.CompareResultDialog.getDialogBoundsSettings()org.eclipse.jface.dialogs.IDialogSettings;1
@Override
protected IDialogSettings getDialogBoundsSettings() {
    return JUnitPlugin.getDefault().getDialogSettingsSection(getClass().getName());
}
method: org.eclipse.jdt.internal.junit.ui.JUnitPlugin.getDialogSettingsSection(java.lang.String;)org.eclipse.jface.dialogs.IDialogSettings;2
public IDialogSettings getDialogSettingsSection(String name) {
    IDialogSettings dialogSettings = getDialogSettings();
    IDialogSettings section = dialogSettings.getSection(name);
    if (section == null) {
        section = dialogSettings.addNewSection(name);
    }
    return section;
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridDataFactory.span(II)org.eclipse.jface.layout.GridDataFactory;3
public GridDataFactory span(int hSpan, int vSpan) {
    data.horizontalSpan = hSpan;
    data.verticalSpan = vSpan;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.ui.internal.layout.TrimDescriptor.flush()V1
public void flush() {
    if (fCache != null) {
        fCache.flush();
    }
    if (fDockingHandle != null) {
        fDockingHandle.flush();
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.ObjectContributorManager.cacheAdaptableLookup(java.lang.String;java.util.List;)V3
private void cacheAdaptableLookup(String adapterClass, List results) {
    if (adaptableLookup == null) {
        adaptableLookup = new  HashMap();
    }
    adaptableLookup.put(adapterClass, results);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.jface.preference.PreferenceDialog.firePageChanged(org.eclipse.jface.dialogs.PageChangedEvent;)V2
protected void firePageChanged(final PageChangedEvent event) {
    Object[] listeners = pageChangedListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        final IPageChangedListener l = (IPageChangedListener) listeners[i];
        SafeRunnable.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.pageChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.console.JavacMarkerCreator.createMarkers(org.eclipse.core.resources.IFile;java.util.List;)V3
private void createMarkers(final IFile file, final List<MarkerInfo> infos) {
    IWorkspaceRunnable wr = new  IWorkspaceRunnable() {

        @Override
        public void run(IProgressMonitor monitor) throws CoreException {
            try {
                for (MarkerInfo info : infos) {
                    IMarker marker = file.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);
                    Map<String, Object> attributes = new  HashMap<String, Object>(3);
                    attributes.put(IMarker.LINE_NUMBER, new  Integer(info.fLineNumber));
                    String message = getMessage(info);
                    attributes.put(IMarker.MESSAGE, message);
                    attributes.put(IMarker.SEVERITY, info.fType);
                    marker.setAttributes(attributes);
                }
            } catch (CoreException e) {
                AntUIPlugin.log(e.getStatus());
            }
        }
    };
    run(getMarkerRule(file), wr);
}
---------------Client-------------------
method: org.eclipse.jetty.http.HttpFields.addLongField(org.eclipse.jetty.io.Buffer;J)V3
public void addLongField(Buffer name, long value) {
    Buffer v = BufferUtil.toBuffer(value);
    add(name, v);
}
method: org.eclipse.jetty.io.BufferUtil.toBuffer(J)org.eclipse.jetty.io.Buffer;1
public static Buffer toBuffer(long value) {
    ByteArrayBuffer buf = new  ByteArrayBuffer(32);
    putDecLong(buf, value);
    return buf;
}

---------------Library-------------------
method: org.eclipse.jface.action.ToolBarManager$1.getName(org.eclipse.swt.accessibility.AccessibleEvent;)V2
@Override
public void getName(AccessibleEvent e) {
    if (e.childID != ACC.CHILDID_SELF) {
        ToolItem item = toolBar.getItem(e.childID);
        if (item != null) {
            String toolTip = item.getToolTipText();
            if (toolTip != null) {
                e.result = toolTip;
            }
        }
    }
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.setEnclosingTypeSelection(ZZ)V3
public void setEnclosingTypeSelection(boolean isSelected, boolean canBeModified) {
    fEnclosingTypeSelection.setSelection(isSelected);
    fEnclosingTypeSelection.setEnabled(canBeModified);
    updateEnableState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.setEnabled(Z)V2
public final void setEnabled(boolean enabled) {
    if (enabled != fEnabled) {
        fEnabled = enabled;
        updateEnableState();
    }
}

---------------Library-------------------
method: org.eclipse.jface.text.TextViewer.addTextPresentationListener(org.eclipse.jface.text.ITextPresentationListener;)V2
public void addTextPresentationListener(ITextPresentationListener listener) {
    Assert.isNotNull(listener);
    if (fTextPresentationListeners == null)
        fTextPresentationListeners = new  ArrayList();
    if (!fTextPresentationListeners.contains(listener))
        fTextPresentationListeners.add(listener);
}
---------------Client-------------------
method: org.eclipse.ui.internal.progress.WorkbenchSiteProgressService.warnOfContentChange()V1
@Override
public void warnOfContentChange() {
    MPart part = site.getModel();
    if (!part.getTags().contains(CSSConstants.CSS_CONTENT_CHANGE_CLASS)) {
        part.getTags().add(CSSConstants.CSS_CONTENT_CHANGE_CLASS);
    }
}
method: org.eclipse.e4.ui.model.application.impl.ApplicationElementImpl.getTags()java.util.List;1
public List<String> getTags() {
    if (tags == null) {
        tags = new  EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION_ELEMENT__TAGS);
    }
    return tags;
}

---------------Library-------------------
method: org.eclipse.jdt.ui.actions.OpenSuperImplementationAction.selectionChanged(org.eclipse.jface.viewers.IStructuredSelection;)V2
@Override
public void selectionChanged(IStructuredSelection selection) {
    IMethod method = getMethod(selection);
    setEnabled(method != null && checkMethod(method));
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.model.provisional.VirtualTree.setData(java.lang.Object;)V2
@Override
public void setData(Object data) {
    super.setData(data);
    setHasItems(data != null);
}
method: org.eclipse.debug.internal.ui.viewers.model.provisional.VirtualTree.setHasItems(Z)V2
@Override
public void setHasItems(boolean hasChildren) {
    super.setHasItems(hasChildren);
    if (hasChildren) {
        setExpanded(true);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.filesystem.CVSURI.decode(CCLjava.lang.String;)java.lang.String;3
private static String decode(char encodedChar, char encoding, String string) {
    String reuslt = string.replace(encoding, encodedChar);
    return reuslt.replaceAll(new  String(new char[] { encodedChar, encodedChar }), new  String(new char[] { encoding }));
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.filesystem.CVSURI.ensureRegistryBasedAuthority(java.lang.String;)java.lang.String;2
private String ensureRegistryBasedAuthority(String authority) {
    authority = encode('/', '!', authority);
    authority = encode('@', '~', authority);
    authority = encode(':', '_', authority);
    return authority;
}
method: org.eclipse.team.internal.ccvs.core.filesystem.CVSURI.encode(CCLjava.lang.String;)java.lang.String;4
private String encode(char charToEncode, char encoding, String string) {
    String result = string.replaceAll(new  String(new char[] { encoding }), new  String(new char[] { encoding, encoding }));
    return result.replace(charToEncode, encoding);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.UpdateWizard.createRemediationPage()org.eclipse.equinox.internal.p2.ui.dialogs.RemediationPage;1
@Override
protected RemediationPage createRemediationPage() {
    remediationPage = new  RemediationPage(ui, this, root, operation);
    return remediationPage;
}
---------------Client-------------------
method: org.eclipse.jface.layout.RowDataFactory.create()org.eclipse.swt.layout.RowData;1
public RowData create() {
    return copyData(data);
}
method: org.eclipse.jface.layout.RowDataFactory.copyData(org.eclipse.swt.layout.RowData;)org.eclipse.swt.layout.RowData;1
public static RowData copyData(RowData data) {
    RowData newData = new  RowData(data.width, data.height);
    newData.exclude = data.exclude;
    return newData;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.client.Import.sendLocalResourceState(org.eclipse.team.internal.ccvs.core.client.Session;Aorg.eclipse.team.internal.ccvs.core.client.Command$GlobalOption;Aorg.eclipse.team.internal.ccvs.core.client.Command$LocalOption;Aorg.eclipse.team.internal.ccvs.core.ICVSResource;org.eclipse.core.runtime.IProgressMonitor;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;6
protected ICVSResource[] sendLocalResourceState(Session session, GlobalOption[] globalOptions, LocalOption[] localOptions, ICVSResource[] resources, IProgressMonitor monitor) throws CVSException {
    ICVSResourceVisitor visitor = new  ImportStructureVisitor(session, collectOptionArguments(localOptions, "-W"), monitor);
    session.getLocalRoot().accept(visitor);
    return resources;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.getFields(java.lang.String;)Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;2
public Variable[] getFields(String type) {
    Variable[] fields = getCompletion().findFieldVariables(type);
    arrange(fields);
    return fields;
}
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.arrange(Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;)V2
private void arrange(Variable[] variables) {
    Arrays.sort(variables, new  Comparator<Variable>() {

        public int compare(Variable o1, Variable o2) {
            return rank(o1) - rank(o2);
        }

        private int rank(Variable l) {
            return fUsedNames.contains(l.getName()) ? 1 : 0;
        }
    });
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.SourceType.getMethods()Aorg.eclipse.jdt.core.IMethod;1
public IMethod[] getMethods() throws JavaModelException {
    ArrayList list = getChildrenOfType(METHOD);
    IMethod[] array = new IMethod[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(org.apache.lucene.index.IndexReader;I)I3
@Deprecated
public int addStopWords(IndexReader reader, int maxDocFreq) throws IOException {
    int numStopWords = 0;
    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);
    for (Iterator<String> iter = fieldNames.iterator(); iter.hasNext(); ) {
        String fieldName = iter.next();
        numStopWords += addStopWords(reader, fieldName, maxDocFreq);
    }
    return numStopWords;
}
---------------Client-------------------
method: org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(org.apache.lucene.index.IndexReader;)I2
@Deprecated
public int addStopWords(IndexReader reader) throws IOException {
    return addStopWords(reader, defaultMaxDocFreqPercent);
}
method: org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(org.apache.lucene.index.IndexReader;F)I3
@Deprecated
public int addStopWords(IndexReader reader, float maxPercentDocs) throws IOException {
    int numStopWords = 0;
    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.INDEXED);
    for (Iterator<String> iter = fieldNames.iterator(); iter.hasNext(); ) {
        String fieldName = iter.next();
        numStopWords += addStopWords(reader, fieldName, maxPercentDocs);
    }
    return numStopWords;
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.WorkspaceRoot.findFilesForLocationURI(java.net.URI;I)Aorg.eclipse.core.resources.IFile;3
public IFile[] findFilesForLocationURI(URI location, int memberFlags) {
    if (!location.isAbsolute())
        throw new  IllegalArgumentException();
    return (IFile[]) getLocalManager().allResourcesFor(location, true, memberFlags);
}
---------------Client-------------------
method: org.eclipse.core.internal.resources.WorkspaceRoot.findContainersForLocationURI(java.net.URI;)Aorg.eclipse.core.resources.IContainer;2
public IContainer[] findContainersForLocationURI(URI location) {
    return findContainersForLocationURI(location, NONE);
}
method: org.eclipse.core.internal.resources.WorkspaceRoot.findContainersForLocationURI(java.net.URI;I)Aorg.eclipse.core.resources.IContainer;3
public IContainer[] findContainersForLocationURI(URI location, int memberFlags) {
    if (!location.isAbsolute())
        throw new  IllegalArgumentException();
    return (IContainer[]) getLocalManager().allResourcesFor(location, false, memberFlags);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.dialogs.MultiElementListSelectionDialog.createFilteredList(org.eclipse.swt.widgets.Composite;)org.eclipse.ui.dialogs.FilteredList;2
@Override
protected FilteredList createFilteredList(Composite parent) {
    FilteredList filteredList = super.createFilteredList(parent);
    if (fComparator != null) {
        filteredList.setComparator(fComparator);
    }
    return filteredList;
}
---------------Client-------------------
method: org.eclipse.jface.internal.text.source.DiffPainter.getDisplayCharacter(I)java.lang.String;2
public String getDisplayCharacter(int line) {
    return getDisplayCharacter(getDiffInfo(line));
}
method: org.eclipse.jface.internal.text.source.DiffPainter.getDiffInfo(I)org.eclipse.jface.text.source.ILineDiffInfo;2
private ILineDiffInfo getDiffInfo(int line) {
    if (fLineDiffer != null)
        return fLineDiffer.getLineInfo(line);
    return null;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.SharingWizard.populateSyncPage(Z)V2
private void populateSyncPage(final boolean exists) throws InvocationTargetException, InterruptedException {
    getContainer().run(true, true, new  IRunnableWithProgress() {

        public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            monitor.beginTask(null, IProgressMonitor.UNKNOWN);
            if (exists) {
                reconcileProject(Policy.subMonitorFor(monitor, 50));
            } else {
                shareProject(Policy.subMonitorFor(monitor, 50));
            }
            try {
                getParticipant().getContext().refresh(Utils.getResourceMappings(new IProject[] { project }), Policy.subMonitorFor(monitor, 50));
            } catch (CoreException e) {
                throw new  InvocationTargetException(e);
            }
            if (monitor.isCanceled()) {
                throw new  InterruptedException();
            }
            monitor.done();
        }
    });
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.actions.ProgressDialogRunnableContext.run(org.eclipse.jface.operation.IRunnableWithProgress;)V2
public void run(IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {
    getRunnableContext().run(true, true, wrapRunnable(runnable));
}
method: org.eclipse.team.internal.ui.actions.ProgressDialogRunnableContext.wrapRunnable(org.eclipse.jface.operation.IRunnableWithProgress;)org.eclipse.jface.operation.IRunnableWithProgress;2
private IRunnableWithProgress wrapRunnable(final IRunnableWithProgress runnable) {
    return new  IRunnableWithProgress() {

        public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            try {
                if (schedulingRule == null && !postponeBuild) {
                    runnable.run(monitor);
                } else {
                    final Exception[] exception = new Exception[] { null };
                    ResourcesPlugin.getWorkspace().run(new  IWorkspaceRunnable() {

                        public void run(IProgressMonitor pm) throws CoreException {
                            try {
                                runnable.run(pm);
                            } catch (InvocationTargetException e) {
                                exception[0] = e;
                            } catch (InterruptedException e) {
                                exception[0] = e;
                            }
                        }
                    }, schedulingRule, 0, monitor);
                    if (exception[0] != null) {
                        if (exception[0] instanceof InvocationTargetException) {
                            throw (InvocationTargetException) exception[0];
                        } else if (exception[0] instanceof InterruptedException) {
                            throw (InterruptedException) exception[0];
                        }
                    }
                }
            } catch (CoreException e) {
                throw new  InvocationTargetException(e);
            }
        }
    };
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.SWTFactory.createLink(org.eclipse.swt.widgets.Composite;java.lang.String;org.eclipse.swt.graphics.Font;I)org.eclipse.swt.widgets.Link;4
public static Link createLink(Composite parent, String text, Font font, int hspan) {
    Link l = new  Link(parent, SWT.UNDERLINE_LINK);
    l.setFont(font);
    l.setText(text);
    GridData gd = new  GridData(GridData.BEGINNING, GridData.VERTICAL_ALIGN_CENTER, true, false, hspan, 1);
    l.setLayoutData(gd);
    return l;
}
---------------Client-------------------
method: org.eclipse.team.core.mapping.provider.SynchronizationScopeManager.getUncoveredTraversals(Aorg.eclipse.core.resources.mapping.ResourceTraversal;Aorg.eclipse.core.resources.mapping.ResourceTraversal;)Aorg.eclipse.core.resources.mapping.ResourceTraversal;3
private ResourceTraversal[] getUncoveredTraversals(ResourceTraversal[] newTraversals, ResourceTraversal[] previousTraversals) {
    CompoundResourceTraversal t = new  CompoundResourceTraversal();
    t.addTraversals(newTraversals);
    return t.getUncoveredTraversals(previousTraversals);
}
method: org.eclipse.team.internal.core.mapping.CompoundResourceTraversal.getUncoveredTraversals(Aorg.eclipse.core.resources.mapping.ResourceTraversal;)Aorg.eclipse.core.resources.mapping.ResourceTraversal;2
public synchronized ResourceTraversal[] getUncoveredTraversals(ResourceTraversal[] traversals) {
    CompoundResourceTraversal other = new  CompoundResourceTraversal();
    other.addTraversals(traversals);
    return getUncoveredTraversals(other);
}

---------------Library-------------------
method: org.eclipse.ui.internal.themes.Theme.getColorRegistry()org.eclipse.jface.resource.ColorRegistry;1
@Override
public ColorRegistry getColorRegistry() {
    if (themeColorRegistry != null) {
        return themeColorRegistry;
    }
    return WorkbenchThemeManager.getInstance().getDefaultThemeColorRegistry();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarPackageActionDelegate.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell != null)
        return fShell;
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.ui.internal.forms.widgets.FormsResources.getHandCursor()org.eclipse.swt.graphics.Cursor;0
public static Cursor getHandCursor() {
    if (handCursor == null)
        handCursor = new  Cursor(Display.getCurrent(), SWT.CURSOR_HAND);
    return handCursor;
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.provisional.ApiPlugin.getApiBaselineManager()org.eclipse.pde.api.tools.internal.provisional.IApiBaselineManager;1
public IApiBaselineManager getApiBaselineManager() {
    return ApiBaselineManager.getManager();
}
method: org.eclipse.pde.api.tools.internal.ApiBaselineManager.getManager()org.eclipse.pde.api.tools.internal.ApiBaselineManager;0
public static synchronized ApiBaselineManager getManager() {
    if (fInstance == null) {
        fInstance = new  ApiBaselineManager(ApiPlugin.isRunningInFramework());
    }
    return fInstance;
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.MarkerDelta.isSubtypeOf(java.lang.String;)Z2
public boolean isSubtypeOf(String superType) {
    return ((Workspace) getResource().getWorkspace()).getMarkerManager().isSubtype(getType(), superType);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.ExceptionAnalyzer.visit(org.eclipse.jdt.core.dom.MethodInvocation;)Z2
@Override
public boolean visit(MethodInvocation node) {
    return handleExceptions((IMethodBinding) node.getName().resolveBinding(), node);
}
method: org.eclipse.jdt.internal.corext.refactoring.code.ExceptionAnalyzer.handleExceptions(org.eclipse.jdt.core.dom.IMethodBinding;org.eclipse.jdt.core.dom.ASTNode;)Z3
private boolean handleExceptions(IMethodBinding binding, ASTNode node) {
    if (binding == null)
        return true;
    addExceptions(binding.getExceptionTypes(), node.getAST());
    return true;
}

---------------Library-------------------
method: org.eclipse.e4.ui.css.core.impl.engine.CSSElementContextImpl.setData(java.lang.Object;java.lang.Object;)V3
@Override
public void setData(Object key, Object value) {
    if (datas == null)
        datas = new  HashMap();
    datas.put(key, value);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedField(org.eclipse.jdt.internal.compiler.lookup.FieldBinding;org.eclipse.jdt.internal.compiler.ast.ASTNode;)V3
public void deprecatedField(FieldBinding field, ASTNode location) {
    int severity = computeSeverity(IProblem.UsingDeprecatedField);
    if (severity == ProblemSeverities.Ignore)
        return;
    this.handle(IProblem.UsingDeprecatedField, new String[] { new  String(field.declaringClass.readableName()), new  String(field.name) }, new String[] { new  String(field.declaringClass.shortReadableName()), new  String(field.name) }, severity, nodeSourceStart(field, location), nodeSourceEnd(field, location));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.indirectAccessToStaticField(org.eclipse.jdt.internal.compiler.ast.ASTNode;org.eclipse.jdt.internal.compiler.lookup.FieldBinding;)V3
public void indirectAccessToStaticField(ASTNode location, FieldBinding field) {
    int severity = computeSeverity(IProblem.IndirectAccessToStaticField);
    if (severity == ProblemSeverities.Ignore)
        return;
    this.handle(IProblem.IndirectAccessToStaticField, new String[] { new  String(field.declaringClass.readableName()), new  String(field.name) }, new String[] { new  String(field.declaringClass.shortReadableName()), new  String(field.name) }, severity, nodeSourceStart(field, location), nodeSourceEnd(field, location));
}
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(IAjava.lang.String;Ajava.lang.String;III)V7
private void handle(int problemId, String[] problemArguments, String[] messageArguments, int severity, int problemStartPosition, int problemEndPosition) {
    this.handle(problemId, problemArguments, 0, messageArguments, severity, problemStartPosition, problemEndPosition);
}

---------------Library-------------------
method: org.eclipse.e4.ui.workbench.swt.internal.copy.ShowViewDialog.popUp(java.lang.String;)V2
private void popUp(final String description) {
    new  PopupDialog(filteredTree.getShell(), PopupDialog.HOVER_SHELLSTYLE, true, false, false, false, false, null, null) {

        private static final int CURSOR_SIZE = 15;

        @Override
        protected Point getInitialLocation(Point initialSize) {
            Display display = getShell().getDisplay();
            Point location = display.getCursorLocation();
            location.x += CURSOR_SIZE;
            location.y += CURSOR_SIZE;
            return location;
        }

        @Override
        protected Control createDialogArea(Composite parent) {
            Label label = new  Label(parent, SWT.WRAP);
            label.setText(description);
            label.addFocusListener(new  FocusAdapter() {

                @Override
                public void focusLost(FocusEvent event) {
                    close();
                }
            });
            GridData gd = new  GridData(GridData.BEGINNING | GridData.FILL_BOTH);
            gd.horizontalIndent = PopupDialog.POPUP_HORIZONTALSPACING;
            gd.verticalIndent = PopupDialog.POPUP_VERTICALSPACING;
            label.setLayoutData(gd);
            return label;
        }
    }.open();
}
---------------Client-------------------
method: org.eclipse.ui.internal.actions.SelectWorkingSetsAction$ManageWorkingSetsAction.run()V1
@Override
public void run() {
    SelectWorkingSetsAction.this.run(this);
}
method: org.eclipse.ui.internal.actions.SelectWorkingSetsAction.run(org.eclipse.jface.action.IAction;)V2
@Override
public void run(IAction action) {
    ConfigureWindowWorkingSetsDialog dialog = new  ConfigureWindowWorkingSetsDialog(getWindow());
    if (dialog.open() == Window.OK) {
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.ResolvedBinaryMethod.unresolved()org.eclipse.jdt.internal.core.JavaElement;1
public JavaElement unresolved() {
    SourceRefElement handle = new  BinaryMethod(this.parent, this.name, this.parameterTypes);
    handle.occurrenceCount = this.occurrenceCount;
    return handle;
}
---------------Client-------------------
method: org.eclipse.jface.layout.RowDataFactory.create()org.eclipse.swt.layout.RowData;1
public RowData create() {
    return copyData(data);
}
method: org.eclipse.jface.layout.RowDataFactory.copyData(org.eclipse.swt.layout.RowData;)org.eclipse.swt.layout.RowData;1
public static RowData copyData(RowData data) {
    RowData newData = new  RowData(data.width, data.height);
    newData.exclude = data.exclude;
    return newData;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_dark(JILorg.eclipse.swt.internal.gtk.GdkColor;)V3
public static final void gtk_style_get_dark(long style, int index, GdkColor color) {
    lock.lock();
    try {
        _gtk_style_get_dark(style, index, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.junit.ui.TestRunnerViewPart.doShowInfoMessage()V1
protected void doShowInfoMessage() {
    if (fInfoMessage != null) {
        setContentDescription(fInfoMessage);
        fInfoMessage = null;
    }
}
---------------Client-------------------
method: org.apache.lucene.search.NRTManager$SearcherManagerRef.close()V1
public void close() throws IOException {
    generation = MAX_SEARCHER_GEN;
    manager.close();
}
method: org.apache.lucene.search.SearcherManager.close()V1
public synchronized void close() throws IOException {
    if (currentSearcher != null) {
        swapSearcher(null);
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_combo_box_insert_text(JIAB)V3
public static final void gtk_combo_box_insert_text(long combo_box, int position, byte[] text) {
    lock.lock();
    try {
        _gtk_combo_box_insert_text(combo_box, position, text);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jface.action.StatusLine.done()V1
@Override
public void done() {
    fStartTime = 0;
    if (fProgressBar != null) {
        fProgressBar.sendRemainingWork();
        fProgressBar.done();
    }
    setMessage(null);
    hideProgress();
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.dialogs.AvailableIUsPage$3.widgetDisposed(org.eclipse.swt.events.DisposeEvent;)V2
@Override
public void widgetDisposed(DisposeEvent e) {
    removeProvisioningListeners();
}
method: org.eclipse.equinox.internal.p2.ui.dialogs.AvailableIUsPage.removeProvisioningListeners()V1
void removeProvisioningListeners() {
    if (profileListener != null) {
        ProvUI.getProvisioningEventBus(getProvisioningUI().getSession()).removeListener(profileListener);
        profileListener = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryContentProvider.getLibraries()Aorg.eclipse.jdt.launching.LibraryLocation;1
public LibraryLocation[] getLibraries() {
    LibraryLocation[] locations = new LibraryLocation[fLibraries.length];
    for (int i = 0; i < locations.length; i++) {
        locations[i] = fLibraries[i].toLibraryLocation();
    }
    return locations;
}
---------------Client-------------------
method: org.eclipse.ui.internal.ide.dialogs.ResourceFilterEditDialog.getFilters()Aorg.eclipse.ui.ide.dialogs.UIResourceFilterDescription;1
public UIResourceFilterDescription[] getFilters() {
    return resourceFilterGroup.getFilters();
}
method: org.eclipse.ui.internal.ide.dialogs.ResourceFilterGroup.getFilters()Aorg.eclipse.ui.ide.dialogs.UIResourceFilterDescription;1
public UIResourceFilterDescription[] getFilters() {
    FilterCopy[] newFilters = filters.getChildren();
    UIResourceFilterDescription[] result = new UIResourceFilterDescription[newFilters.length];
    for (int i = 0; i < newFilters.length; i++) {
        result[i] = newFilters[i];
    }
    return result;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.builders.FeatureRebuilder.stop()V1
public void stop() {
    PDECore.getDefault().getFeatureModelManager().removeFeatureModelListener(this);
    PDECore.getDefault().getModelManager().removePluginModelListener(this);
    JavaCore.removePreProcessingResourceChangedListener(this);
}
---------------Client-------------------
method: org.eclipse.core.internal.plugins.PluginDescriptor.logError(org.eclipse.core.runtime.IStatus;)V2
private void logError(IStatus status) {
    InternalPlatform.getDefault().getLog(org.eclipse.core.internal.runtime.InternalPlatform.getDefault().getBundleContext().getBundle()).log(status);
}
method: org.eclipse.osgi.internal.framework.BundleContextImpl.getBundle()org.osgi.framework.Bundle;1
public Bundle getBundle() {
    checkValid();
    return getBundleImpl();
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.TreeModelContentProvider.getFullTreePath(org.eclipse.debug.internal.ui.viewers.model.provisional.IModelDelta;)org.eclipse.jface.viewers.TreePath;2
TreePath getFullTreePath(IModelDelta node) {
    ArrayList<Object> list = new  ArrayList<Object>();
    while (node.getParentDelta() != null) {
        list.add(0, node.getElement());
        node = node.getParentDelta();
    }
    return new  TreePath(list.toArray());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.LabelResult.getTreePath()org.eclipse.jface.viewers.TreePath;1
@Override
public TreePath getTreePath() {
    return getNode().getTreePath();
}
method: org.eclipse.debug.internal.ui.viewers.ModelNode.getTreePath()org.eclipse.jface.viewers.TreePath;1
public synchronized TreePath getTreePath() {
    List<Object> path = new  ArrayList<Object>();
    ModelNode node = this;
    while (node != null) {
        path.add(0, node.getElement());
        node = node.getParentNode();
    }
    return new  TreePath(path.toArray());
}

---------------Library-------------------
method: org.eclipse.equinox.internal.app.AppPersistence.isLocked(org.osgi.service.application.ApplicationDescriptor;)Z1
public static boolean isLocked(ApplicationDescriptor desc) {
    synchronized (locks) {
        return locks.contains(desc.getApplicationId());
    }
}
---------------Client-------------------
method: org.eclipse.ecf.core.ContainerFactory.containsDescription(org.eclipse.ecf.core.ContainerTypeDescription;)Z2
public boolean containsDescription(ContainerTypeDescription containerTypeDescription) {
    return containsDescription0(containerTypeDescription);
}
method: org.eclipse.ecf.core.ContainerFactory.containsDescription0(org.eclipse.ecf.core.ContainerTypeDescription;)Z2
protected boolean containsDescription0(ContainerTypeDescription containerTypeDescription) {
    if (containerTypeDescription == null)
        return false;
    synchronized (containerdescriptions) {
        return containerdescriptions.containsKey(containerTypeDescription.getName());
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.mapping.ModelCompareEditorInput.createSaveable()org.eclipse.ui.Saveable;1
protected Saveable createSaveable() {
    if (input instanceof ISynchronizationCompareInput) {
        ISynchronizationCompareInput mci = (ISynchronizationCompareInput) input;
        SaveableComparison compareModel = mci.getSaveable();
        if (compareModel != null)
            return compareModel;
    }
    return super.createSaveable();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.getElementName()java.lang.String;1
public String getElementName() {
    IResource res = resource();
    if (res instanceof IFolder)
        return ((IFolder) res).getName();
    return "";
}
method: org.eclipse.jdt.internal.core.PackageFragmentRoot.resource()org.eclipse.core.resources.IResource;1
public IResource resource() {
    if (this.resource != null)
        return this.resource;
    return super.resource();
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.viewsupport.ImagesOnFileSystemRegistry.dispose()V1
public void dispose() {
    if (fTempDir != null) {
        delete(fTempDir);
    }
    fURLMap = null;
}
---------------Client-------------------
method: org.apache.lucene.search.NRTManager$SearcherManagerRef.close()V1
public void close() throws IOException {
    generation = MAX_SEARCHER_GEN;
    manager.close();
}
method: org.apache.lucene.search.SearcherManager.close()V1
public synchronized void close() throws IOException {
    if (currentSearcher != null) {
        swapSearcher(null);
    }
}

---------------Library-------------------
method: org.eclipse.swt.browser.PromptAuth2.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (promptAuth != null) {
        promptAuth.dispose();
        promptAuth = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.swt.widgets.List.removeAll()V1
public void removeAll() {
    checkWidget();
    long selection = OS.gtk_tree_view_get_selection(handle);
    OS.g_signal_handlers_block_matched(selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
    OS.gtk_list_store_clear(modelHandle);
    OS.g_signal_handlers_unblock_matched(selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
}
---------------Client-------------------
method: org.eclipse.jface.viewers.ListViewer.listDeselectAll()V1
@Override
protected void listDeselectAll() {
    list.deselectAll();
}
method: org.eclipse.swt.widgets.List.deselectAll()V1
public void deselectAll() {
    checkWidget();
    long selection = OS.gtk_tree_view_get_selection(handle);
    OS.g_signal_handlers_block_matched(selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
    OS.gtk_tree_selection_unselect_all(selection);
    OS.g_signal_handlers_unblock_matched(selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.variables.VariablesView$SelectionProviderWrapper.fireSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
private void fireSelectionChanged(SelectionChangedEvent event) {
    Object[] listeners = fListenerList.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ISelectionChangedListener listener = (ISelectionChangedListener) listeners[i];
        listener.selectionChanged(event);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.partPropertyChanged(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void partPropertyChanged(PropertyChangeEvent event) {
    firePartPropertyChange(event);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.firePartPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void firePartPropertyChange(PropertyChangeEvent event) {
    Object[] l = partChangeListeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        ((IPropertyChangeListener) l[i]).propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.feature.FeatureInfo.restoreProperty(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void restoreProperty(String name, Object oldValue, Object newValue) throws CoreException {
    if (name.equals(P_DESC)) {
        setDescription(newValue != null ? newValue.toString() : null);
    } else if (name.equals(P_URL)) {
        setURL(newValue != null ? newValue.toString() : null);
    } else
        super.restoreProperty(name, oldValue, newValue);
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.site.VersionableObject.restoreProperty(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void restoreProperty(String name, Object oldValue, Object newValue) throws CoreException {
    if (name.equals(P_VERSION)) {
        setVersion(newValue != null ? newValue.toString() : null);
    } else
        super.restoreProperty(name, oldValue, newValue);
}
method: org.eclipse.pde.internal.core.site.IdentifiableObject.restoreProperty(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void restoreProperty(String name, Object oldValue, Object newValue) throws CoreException {
    if (name.equals(P_ID)) {
        setId(newValue != null ? newValue.toString() : null);
    } else
        super.restoreProperty(name, oldValue, newValue);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.CVSPerspective.defineActions(org.eclipse.ui.IPageLayout;)V2
public void defineActions(IPageLayout layout) {
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.project");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.folder");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.file");
    layout.addShowViewShortcut(IPageLayout.ID_PROJECT_EXPLORER);
    layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);
    layout.addShowViewShortcut(IPageLayout.ID_TASK_LIST);
    layout.addShowViewShortcut(IHistoryView.VIEW_ID);
    layout.addShowViewShortcut(RepositoriesView.VIEW_ID);
    layout.addShowViewShortcut(ISynchronizeView.VIEW_ID);
    layout.addPerspectiveShortcut("org.eclipse.ui.resourcePerspective");
    layout.addPerspectiveShortcut("org.eclipse.team.ui.TeamSynchronizingPerspective");
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.TeamSynchronizingPerspective.createInitialLayout(org.eclipse.ui.IPageLayout;)V2
public void createInitialLayout(IPageLayout layout) {
    defineActions(layout);
    defineLayout(layout);
}
method: org.eclipse.team.internal.ui.synchronize.TeamSynchronizingPerspective.defineActions(org.eclipse.ui.IPageLayout;)V2
public void defineActions(IPageLayout layout) {
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.project");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.folder");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.file");
    layout.addShowViewShortcut(ISynchronizeView.VIEW_ID);
    layout.addShowViewShortcut(IPageLayout.ID_PROJECT_EXPLORER);
    layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);
    layout.addShowViewShortcut(IPageLayout.ID_TASK_LIST);
    layout.addShowViewShortcut(IPageLayout.ID_PROBLEM_VIEW);
    layout.addActionSet("org.eclipse.team.ui.actionSet");
    layout.addPerspectiveShortcut("org.eclipse.ui.resourcePerspective");
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.Member.compareTo(org.eclipse.equinox.internal.p2.metadata.expression.Expression;)I2
public int compareTo(Expression e) {
    int cmp = super.compareTo(e);
    if (cmp == 0) {
        cmp = name.compareTo(((Member) e).name);
        if (cmp == 0)
            cmp = compare(argExpressions, ((Member) e).argExpressions);
    }
    return cmp;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.LambdaExpression.compareTo(org.eclipse.equinox.internal.p2.metadata.expression.Expression;)I2
public int compareTo(Expression e) {
    int cmp = super.compareTo(e);
    if (cmp == 0)
        cmp = each.compareTo(((LambdaExpression) e).each);
    return cmp;
}
method: org.eclipse.equinox.internal.p2.metadata.expression.Unary.compareTo(org.eclipse.equinox.internal.p2.metadata.expression.Expression;)I2
public int compareTo(Expression e) {
    int cmp = super.compareTo(e);
    if (cmp == 0)
        cmp = operand.compareTo(((Unary) e).operand);
    return cmp;
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.actions.CheatSheetMenuAction.getMenu(org.eclipse.swt.widgets.Menu;)org.eclipse.swt.widgets.Menu;2
public Menu getMenu(Menu parent) {
    setMenu(new  Menu(parent));
    fillMenu(fMenu);
    initMenu();
    return fMenu;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.GenerateHashCodeEqualsOperation.getReturnFalse()org.eclipse.jdt.core.dom.ReturnStatement;1
private ReturnStatement getReturnFalse() {
    ReturnStatement falseReturn = fAst.newReturnStatement();
    falseReturn.setExpression(fAst.newBooleanLiteral(false));
    return falseReturn;
}
method: org.eclipse.jdt.core.dom.AST.newBooleanLiteral(Z)org.eclipse.jdt.core.dom.BooleanLiteral;2
public BooleanLiteral newBooleanLiteral(boolean value) {
    BooleanLiteral result = new  BooleanLiteral(this);
    result.setBooleanValue(value);
    return result;
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.launchConfigurations.AntMainTab.updateCheckButtons(org.eclipse.debug.core.ILaunchConfiguration;)V2
private void updateCheckButtons(ILaunchConfiguration configuration) {
    boolean setInputHandler = true;
    try {
        setInputHandler = configuration.getAttribute(IAntUIConstants.SET_INPUTHANDLER, true);
    } catch (CoreException ce) {
        AntUIPlugin.log(AntLaunchConfigurationMessages.AntMainTab_1, ce);
    }
    fSetInputHandlerButton.setSelection(setInputHandler);
}
---------------Client-------------------
method: org.eclipse.ui.externaltools.internal.launchConfigurations.ExternalToolsBuilderTab.updateRunInBackground(org.eclipse.debug.core.ILaunchConfiguration;)V2
protected void updateRunInBackground(ILaunchConfiguration configuration) {
    fLaunchInBackgroundButton.setSelection(ExternalToolsCoreUtil.isAsynchronousBuild(configuration));
}
method: org.eclipse.core.externaltools.internal.launchConfigurations.ExternalToolsCoreUtil.isAsynchronousBuild(org.eclipse.debug.core.ILaunchConfiguration;)Z1
public static boolean isAsynchronousBuild(ILaunchConfiguration configuration) {
    boolean launchInBackground = false;
    try {
        launchInBackground = configuration.getAttribute(IExternalToolConstants.ATTR_LAUNCH_IN_BACKGROUND, false);
    } catch (CoreException ce) {
        ExternalToolsCore.log(ce);
    }
    return launchInBackground;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.callhierarchy.DeferredMethodWrapper$1.run()V1
public void run() {
    CallHierarchyViewPart viewPart = fProvider.getViewPart();
    if (viewPart != null && !viewPart.getViewer().getControl().isDisposed())
        fProvider.collapseAndRefresh(methodWrapper);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.product.UpdatesSection.modelChanged(org.eclipse.pde.core.IModelChangedEvent;)V2
public void modelChanged(IModelChangedEvent e) {
    fRepositoryTable.setInput(getProduct());
    fRepositoryTable.refresh();
    updateButtons();
    clearEditors();
}
method: org.eclipse.pde.internal.ui.editor.product.UpdatesSection.clearEditors()V1
private void clearEditors() {
    Control oldEditor = fEnabledColumnEditor.getEditor();
    if (oldEditor != null && !oldEditor.isDisposed())
        oldEditor.dispose();
}

---------------Library-------------------
method: org.eclipse.jface.resource.ResourceManager.disposeExec(java.lang.Runnable;)V2
public void disposeExec(Runnable r) {
    Assert.isNotNull(r);
    if (disposeExecs == null) {
        disposeExecs = new  ArrayList<Runnable>();
    }
    disposeExecs.add(r);
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.swt.dom.CTabFolderElement.computeStaticPseudoInstances()V1
@Override
protected void computeStaticPseudoInstances() {
    super.computeStaticPseudoInstances();
    super.addStaticPseudoInstance("selected");
}
method: org.eclipse.e4.ui.css.core.dom.ElementAdapter.addStaticPseudoInstance(java.lang.String;)V2
public void addStaticPseudoInstance(String pseudoE) {
    if (staticPseudoInstances == null)
        staticPseudoInstances = new  ArrayList();
    staticPseudoInstances.add(pseudoE);
}

---------------Library-------------------
method: org.eclipse.osgi.internal.resolver.StateObjectFactoryImpl.createExportPackageDescription(java.lang.String;org.osgi.framework.Version;java.util.Map;java.util.Map;ZLorg.eclipse.osgi.service.resolver.BundleDescription;)org.eclipse.osgi.service.resolver.ExportPackageDescription;7
public ExportPackageDescription createExportPackageDescription(String packageName, Version version, Map<String, ?> directives, Map<String, ?> attributes, boolean root, BundleDescription exporter) {
    ExportPackageDescriptionImpl exportPackage = new  ExportPackageDescriptionImpl();
    exportPackage.setName(packageName);
    exportPackage.setVersion(version);
    exportPackage.setDirectives(directives);
    exportPackage.setAttributes(attributes);
    exportPackage.setExporter(exporter);
    return exportPackage;
}
---------------Client-------------------
method: org.eclipse.equinox.p2.publisher.AbstractPublisherAction.createParentIU(java.util.Collection;java.lang.String;org.eclipse.equinox.p2.metadata.Version;)org.eclipse.equinox.p2.metadata.MetadataFactory$InstallableUnitDescription;4
protected InstallableUnitDescription createParentIU(Collection<? extends IVersionedId> children, String id, Version version) {
    InstallableUnitDescription root = createIUShell(id, version);
    root.addRequirements(createIURequirements(children));
    addSelfCapability(root);
    return root;
}
method: org.eclipse.equinox.p2.publisher.AbstractPublisherAction.createIUShell(java.lang.String;org.eclipse.equinox.p2.metadata.Version;)org.eclipse.equinox.p2.metadata.MetadataFactory$InstallableUnitDescription;3
protected InstallableUnitDescription createIUShell(String id, Version version) {
    InstallableUnitDescription root = new  MetadataFactory.InstallableUnitDescription();
    root.setId(id);
    root.setVersion(version);
    return root;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.ui.editor.ctxhelp.CtxHelpTreeSection.createTree(org.eclipse.swt.widgets.Composite;org.eclipse.ui.forms.widgets.FormToolkit;)V3
private void createTree(Composite container, FormToolkit toolkit) {
    TreePart treePart = getTreePart();
    createViewerPartControl(container, SWT.MULTI, 2, toolkit);
    fTree = treePart.getTreeViewer();
    fTree.setContentProvider(new  CtxHelpContentProvider());
    fTree.setLabelProvider(PDEUserAssistanceUIPlugin.getDefault().getLabelProvider());
    PDEUserAssistanceUIPlugin.getDefault().getLabelProvider().connect(this);
    fTree.addPostSelectionChangedListener(getPage().getPDEEditor().new  PDEFormEditorChangeListener());
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.CompCSMasterTreeSection.createTree(org.eclipse.swt.widgets.Composite;org.eclipse.ui.forms.widgets.FormToolkit;)V3
private void createTree(Composite container, FormToolkit toolkit) {
    TreePart treePart = getTreePart();
    createViewerPartControl(container, SWT.SINGLE, 2, toolkit);
    fTreeViewer = treePart.getTreeViewer();
    fTreeViewer.setContentProvider(new  CompCSContentProvider());
    fTreeViewer.setLabelProvider(PDEUserAssistanceUIPlugin.getDefault().getLabelProvider());
    PDEUserAssistanceUIPlugin.getDefault().getLabelProvider().connect(this);
    createTreeListeners();
}
method: org.eclipse.pde.internal.ua.ui.editor.cheatsheet.comp.CompCSMasterTreeSection.createTreeListeners()V1
private void createTreeListeners() {
    fTreeViewer.addPostSelectionChangedListener(getPage().getPDEEditor().new  PDEFormEditorChangeListener());
}

---------------Library-------------------
method: org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yyclose()V1
public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;
    zzEndRead = zzStartRead;
    if (zzReader != null)
        zzReader.close();
}
---------------Client-------------------
method: org.apache.batik.css.parser.Parser.setLocale(java.util.Locale;)V2
public void setLocale(Locale locale) throws CSSException {
    localizableSupport.setLocale(locale);
}
method: org.apache.batik.i18n.LocalizableSupport.setLocale(java.util.Locale;)V2
public void setLocale(Locale l) {
    if (locale != l) {
        locale = l;
        resourceBundles.clear();
        lastResourceClass = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.internal.MarkerList.createMarkers(Aorg.eclipse.core.resources.IMarker;)Aorg.eclipse.ui.views.markers.internal.ConcreteMarker;1
public static ConcreteMarker[] createMarkers(IMarker[] source) throws CoreException {
    ConcreteMarker[] result = new ConcreteMarker[source.length];
    for (int idx = 0; idx < source.length; idx++) {
        result[idx] = createMarker(source[idx]);
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.security.ui.storage.TabPassword.updateDescription()V1
protected void updateDescription() {
    PasswordProviderDescription selectedModule = getSelectedModule();
    if (selectedModule != null && detailsText != null)
        detailsText.setText(selectedModule.getDescription());
}
---------------Client-------------------
method: org.eclipse.ui.internal.PerspectiveTracker.pageActivated(org.eclipse.ui.IWorkbenchPage;)V2
@Override
public void pageActivated(IWorkbenchPage page) {
    update();
}
method: org.eclipse.ui.internal.PerspectiveTracker.update()V1
private void update() {
    if (window != null) {
        IPerspectiveDescriptor persp = null;
        IWorkbenchPage page = window.getActivePage();
        if (page != null) {
            persp = page.getPerspective();
        }
        update(persp);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.refactoring.IntroduceParameterObjectWizard$IntroduceParameterObjectInputPage.createGroup(org.eclipse.swt.widgets.Composite;java.lang.String;)org.eclipse.swt.widgets.Group;3
private Group createGroup(Composite result, String caption) {
    Group group = new  Group(result, SWT.None);
    group.setLayout(new  GridLayout(2, false));
    group.setText(caption);
    GridData gridData = new  GridData(GridData.FILL_BOTH);
    gridData.horizontalSpan = 2;
    group.setLayoutData(gridData);
    return group;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.wizards.CheckoutAsMainPage.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;4
protected Button createRadioButton(Composite parent, String label, int span) {
    Button radio = super.createRadioButton(parent, label, span);
    radio.addSelectionListener(new  SelectionAdapter() {

        public void widgetSelected(SelectionEvent e) {
            updateEnablements();
        }
    });
    return radio;
}
method: org.eclipse.team.internal.ccvs.ui.wizards.CVSWizardPage.createRadioButton(org.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Button;4
protected Button createRadioButton(Composite parent, String label, int span) {
    Button button = new  Button(parent, SWT.RADIO);
    button.setText(label);
    GridData data = new  GridData();
    data.horizontalSpan = span;
    button.setLayoutData(data);
    return button;
}

---------------Library-------------------
method: org.eclipse.compare.internal.patch.Patcher.refresh(Aorg.eclipse.compare.internal.core.patch.FilePatch2;)V2
public void refresh(FilePatch2[] diffs) {
    for (int i = 0; i < diffs.length; i++) {
        FilePatch2 diff = diffs[i];
        FileDiffResult result = getDiffResult(diff);
        ((WorkspaceFileDiffResult) result).refresh();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.testEnded(org.eclipse.jdt.internal.junit.model.TestCaseElement;)V2
public void testEnded(TestCaseElement testCaseElement) {
    fireTestCaseFinished(testCaseElement);
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireTestCaseFinished(org.eclipse.jdt.junit.model.ITestCaseElement;)V2
private void fireTestCaseFinished(ITestCaseElement testCaseElement) {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).testCaseFinished(testCaseElement);
    }
}

---------------Library-------------------
method: org.eclipse.team.ui.synchronize.TeamStateProvider.fireStateChangeEvent(org.eclipse.team.ui.mapping.ITeamStateChangeEvent;)V2
protected final void fireStateChangeEvent(final ITeamStateChangeEvent event) {
    Object[] allListeners = listeners.getListeners();
    for (int i = 0; i < allListeners.length; i++) {
        final ITeamStateChangeListener listener = (ITeamStateChangeListener) allListeners[i];
        SafeRunner.run(new  ISafeRunnable() {

            public void run() throws Exception {
                listener.teamStateChanged(event);
            }

            public void handleException(Throwable exception) {
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.TreeListDialogField.doListSelected(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
protected void doListSelected(SelectionChangedEvent event) {
    updateButtonState();
    if (fTreeAdapter != null) {
        fTreeAdapter.selectionChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.PropertySheetEntry.fireErrorMessageChanged()V1
private void fireErrorMessageChanged() {
    Object[] array = getListeners();
    for (int i = 0; i < array.length; i++) {
        IPropertySheetEntryListener listener = (IPropertySheetEntryListener) array[i];
        listener.errorMessageChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.testEnded(org.eclipse.jdt.internal.junit.model.TestCaseElement;)V2
public void testEnded(TestCaseElement testCaseElement) {
    fireTestCaseFinished(testCaseElement);
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireTestCaseFinished(org.eclipse.jdt.junit.model.ITestCaseElement;)V2
private void fireTestCaseFinished(ITestCaseElement testCaseElement) {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).testCaseFinished(testCaseElement);
    }
}

---------------Library-------------------
method: org.eclipse.swt.graphics.ImageLoader.reset()V1
void reset() {
    data = null;
    logicalScreenWidth = 0;
    logicalScreenHeight = 0;
    backgroundPixel = -1;
    repeatCount = 1;
    compression = -1;
}
---------------Client-------------------
method: org.apache.lucene.index.SegmentInfo.setDocStore(ILjava.lang.String;Z)V4
void setDocStore(int offset, String segment, boolean isCompoundFile) {
    docStoreOffset = offset;
    docStoreSegment = segment;
    docStoreIsCompoundFile = isCompoundFile;
    clearFiles();
}
method: org.apache.lucene.index.SegmentInfo.clearFiles()V1
private void clearFiles() {
    files = null;
    sizeInBytesNoStore = -1;
    sizeInBytesWithStore = -1;
}

---------------Library-------------------
method: org.eclipse.jdt.core.dom.ClassInstanceCreation.getType()org.eclipse.jdt.core.dom.Type;1
public Type getType() {
    unsupportedIn2();
    if (this.type == null) {
        synchronized (this) {
            if (this.type == null) {
                preLazyInit();
                this.type = new  SimpleType(this.ast);
                postLazyInit(this.type, TYPE_PROPERTY);
            }
        }
    }
    return this.type;
}
---------------Client-------------------
method: org.eclipse.jdt.core.dom.ArrayType.getComponentType()org.eclipse.jdt.core.dom.Type;1
public Type getComponentType() {
    supportedOnlyIn2_3_4();
    return internalGetType(COMPONENT_TYPE_PROPERTY);
}
method: org.eclipse.jdt.core.dom.ArrayType.internalGetType(org.eclipse.jdt.core.dom.ChildPropertyDescriptor;)org.eclipse.jdt.core.dom.Type;2
private Type internalGetType(ChildPropertyDescriptor property) {
    if (this.type == null) {
        synchronized (this) {
            if (this.type == null) {
                preLazyInit();
                this.type = new  SimpleType(this.ast);
                postLazyInit(this.type, property);
            }
        }
    }
    return this.type;
}

---------------Library-------------------
method: org.eclipse.emf.ecore.util.BasicFeatureMap.lastIndexOf(org.eclipse.emf.ecore.EStructuralFeature;java.lang.Object;Z)I4
protected int lastIndexOf(EStructuralFeature feature, Object object, boolean resolve) {
    FeatureMapUtil.Validator validator = FeatureMapUtil.getValidator(owner.eClass(), feature);
    int result = -1;
    int count = 0;
    Entry[] entries = (Entry[]) data;
    if (FeatureMapUtil.isFeatureMap(feature)) {
        for (int i = 0; i < size; ++i) {
            Entry entry = entries[i];
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.equals(object)) {
                    result = count;
                }
                ++count;
            }
        }
    } else if (object != null) {
        for (int i = 0; i < size; ++i) {
            Entry entry = entries[i];
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (object.equals(entry.getValue())) {
                    result = count;
                }
                ++count;
            }
        }
        if (resolve) {
            result = -1;
            count = 0;
            for (int i = 0; i < size; ++i) {
                Entry entry = entries[i];
                if (validator.isValid(entry.getEStructuralFeature())) {
                    if (object == resolveProxy((EObject) entry.getValue())) {
                        result = count;
                    }
                    ++count;
                }
            }
        }
    } else {
        for (int i = 0; i < size; ++i) {
            Entry entry = entries[i];
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.getValue() == null) {
                    result = count;
                }
                ++count;
            }
        }
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.emf.ecore.util.BasicFeatureMap.basicIndexOf(org.eclipse.emf.ecore.EStructuralFeature;java.lang.Object;)I3
public int basicIndexOf(EStructuralFeature feature, Object object) {
    return indexOf(feature, object, false);
}
method: org.eclipse.emf.ecore.util.BasicFeatureMap.indexOf(org.eclipse.emf.ecore.EStructuralFeature;java.lang.Object;Z)I4
protected int indexOf(EStructuralFeature feature, Object object, boolean resolve) {
    FeatureMapUtil.Validator validator = FeatureMapUtil.getValidator(owner.eClass(), feature);
    int result = 0;
    Entry[] entries = (Entry[]) data;
    if (FeatureMapUtil.isFeatureMap(feature)) {
        for (int i = 0; i < size; ++i) {
            Entry entry = entries[i];
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.equals(object)) {
                    return result;
                }
                ++result;
            }
        }
    } else if (object != null) {
        for (int i = 0; i < size; ++i) {
            Entry entry = entries[i];
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (object.equals(entry.getValue())) {
                    return result;
                }
                ++result;
            }
        }
        if (resolve) {
            result = 0;
            for (int i = 0; i < size; ++i) {
                Entry entry = entries[i];
                if (validator.isValid(entry.getEStructuralFeature())) {
                    if (object == resolveProxy((EObject) entry.getValue())) {
                        return result;
                    }
                    ++result;
                }
            }
        }
    } else {
        for (int i = 0; i < size; ++i) {
            Entry entry = entries[i];
            if (validator.isValid(entry.getEStructuralFeature())) {
                if (entry.getValue() == null) {
                    return result;
                }
                ++result;
            }
        }
    }
    return -1;
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractDocumentProvider.fireElementDeleted(java.lang.Object;)V2
protected void fireElementDeleted(Object element) {
    Iterator e = new  ArrayList(fElementStateListeners).iterator();
    while (e.hasNext()) {
        IElementStateListener l = (IElementStateListener) e.next();
        l.elementDeleted(element);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.CommitCommentArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    super.firePropertyChangeChange(property, oldValue, newValue);
}
method: org.eclipse.team.internal.ui.dialogs.DialogArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    PropertyChangeEvent event = new  PropertyChangeEvent(this, property, oldValue, newValue);
    for (Iterator iter = listeners.iterator(); iter.hasNext(); ) {
        IPropertyChangeListener listener = (IPropertyChangeListener) iter.next();
        listener.propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.structure.PushDownRefactoringProcessor$MemberActionInfo.getMembers(Aorg.eclipse.jdt.internal.corext.refactoring.structure.PushDownRefactoringProcessor$MemberActionInfo;)Aorg.eclipse.jdt.core.IMember;1
static IMember[] getMembers(MemberActionInfo[] infos) {
    IMember[] result = new IMember[infos.length];
    for (int i = 0; i < result.length; i++) {
        result[i] = infos[i].getMember();
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.dom.rewrite.RewriteEventStore.setTrackedNodeData(org.eclipse.jdt.core.dom.ASTNode;org.eclipse.text.edits.TextEditGroup;)V3
public void setTrackedNodeData(ASTNode node, TextEditGroup editGroup) {
    if (this.trackedNodes == null) {
        this.trackedNodes = new  IdentityHashMap();
    }
    this.trackedNodes.put(node, editGroup);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.dispose()V1
public void dispose() {
    eventHandler.shutdown();
    subscriberInput.disconnect();
    if (filteredInput != null) {
        filteredInput.disconnect();
    }
    super.dispose();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.CodeTemplatePreferencePage.performDefaults()V1
@Override
protected void performDefaults() {
    super.performDefaults();
    if (fCodeTemplateConfigurationBlock != null) {
        fCodeTemplateConfigurationBlock.performDefaults();
    }
}
method: org.eclipse.jdt.internal.ui.preferences.CodeTemplateBlock.performDefaults()V1
@Override
public void performDefaults() {
    fTemplateStore.restoreDefaults();
    fCodeTemplateTree.refresh();
    super.performDefaults();
}

---------------Library-------------------
method: org.eclipse.ltk.internal.ui.refactoring.model.RefactoringHistoryMergeWizard$WorkspaceChangeListener.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(final IResourceChangeEvent event) {
    final IResourceDelta delta = event.getDelta();
    if (delta != null) {
        try {
            delta.accept(new  IResourceDeltaVisitor() {

                public final boolean visit(final IResourceDelta current) throws CoreException {
                    final IResource resource = current.getResource();
                    if (!resource.isDerived()) {
                        if (resource.getType() == IResource.FILE) {
                            switch(delta.getKind()) {
                                case IResourceDelta.ADDED:
                                    fAddedFiles.add(resource);
                                    break;
                                case IResourceDelta.REMOVED:
                                    fRemovedFiles.add(resource);
                                    break;
                                case IResourceDelta.CHANGED:
                                    fChangedFiles.add(resource);
                                    break;
                            }
                        }
                    }
                    return true;
                }
            });
        } catch (CoreException exception) {
            RefactoringUIPlugin.log(exception);
        }
    }
}
---------------Client-------------------
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.resourceChanged(org.eclipse.core.resources.IResourceChangeEvent;)V2
public void resourceChanged(IResourceChangeEvent event) {
    IResourceDelta delta = event.getDelta();
    if (delta != null)
        handleDelta(delta);
}
method: org.eclipse.search.internal.ui.text.SearchResultUpdater.handleDelta(org.eclipse.core.resources.IResourceDelta;)V2
private void handleDelta(IResourceDelta d) {
    try {
        d.accept(new  IResourceDeltaVisitor() {

            public boolean visit(IResourceDelta delta) throws CoreException {
                switch(delta.getKind()) {
                    case IResourceDelta.ADDED:
                        return false;
                    case IResourceDelta.REMOVED:
                        IResource res = delta.getResource();
                        if (res instanceof IFile) {
                            Match[] matches = fResult.getMatches(res);
                            fResult.removeMatches(matches);
                        }
                        break;
                    case IResourceDelta.CHANGED:
                        break;
                }
                return true;
            }
        });
    } catch (CoreException e) {
        SearchPlugin.log(e);
    }
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.warn(java.lang.String;java.lang.Throwable;)V3
public void warn(String msg, Throwable thrown) {
    if (_level <= LEVEL_WARN) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":WARN:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.Throwable;)V2
public void debug(Throwable thrown) {
    debug("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;java.lang.Throwable;)V3
public void debug(String msg, Throwable thrown) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.internal.MarkerType.getAllSubTypes()Aorg.eclipse.ui.views.markers.internal.MarkerType;1
public MarkerType[] getAllSubTypes() {
    List subTypes = new  ArrayList();
    addSubTypes(subTypes, this);
    MarkerType[] subs = new MarkerType[subTypes.size()];
    subTypes.toArray(subs);
    return subs;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy.getAllSubtypes(org.eclipse.jdt.core.IType;)Aorg.eclipse.jdt.core.IType;2
public IType[] getAllSubtypes(IType type) {
    return getAllSubtypesForType(type);
}
method: org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy.getAllSubtypesForType(org.eclipse.jdt.core.IType;)Aorg.eclipse.jdt.core.IType;2
private IType[] getAllSubtypesForType(IType type) {
    ArrayList subTypes = new  ArrayList();
    getAllSubtypesForType0(type, subTypes);
    IType[] subClasses = new IType[subTypes.size()];
    subTypes.toArray(subClasses);
    return subClasses;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.frameworkadmin.utils.SimpleBundlesState.getExpectedState()Aorg.eclipse.equinox.frameworkadmin.BundleInfo;1
public BundleInfo[] getExpectedState() throws FrameworkAdminRuntimeException {
    if (!fwAdmin.isActive())
        throw new  FrameworkAdminRuntimeException("FrameworkAdmin creates this object is no more available.", FrameworkAdminRuntimeException.FRAMEWORKADMIN_UNAVAILABLE);
    return Utils.getBundleInfosFromList(this.bundleInfosList);
}
---------------Client-------------------
method: org.eclipse.jetty.server.ssl.SslSelectChannelConnector.getSslContext()javax.net.ssl.SSLContext;1
@Deprecated
public SSLContext getSslContext() {
    return _sslContextFactory.getSslContext();
}
method: org.eclipse.jetty.util.ssl.SslContextFactory.getSslContext()javax.net.ssl.SSLContext;1
public SSLContext getSslContext() {
    if (!isStarted())
        throw new  IllegalStateException(getState());
    return _context;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_text_gc(JIAJ)V3
public static final void gtk_style_get_text_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_text_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.SelectResourcesBlock.treeItemChecked(java.lang.Object;Z)V3
private void treeItemChecked(Object treeElement, boolean state) {
    setTreeChecked(treeElement, state);
    Object parent = treeContentProvider.getParent(treeElement);
    if (parent == null)
        return;
    if (state)
        grayCheckHierarchy(parent);
    else
        ungrayCheckHierarchy(parent);
    grayUpdateHierarchy(parent);
}
---------------Client-------------------
method: org.eclipse.ui.internal.ide.misc.CheckboxTreeAndListGroup.initialCheckTreeItem(java.lang.Object;)V2
public void initialCheckTreeItem(Object element) {
    treeItemChecked(element, true);
}
method: org.eclipse.ui.internal.ide.misc.CheckboxTreeAndListGroup.treeItemChecked(java.lang.Object;Z)V3
protected void treeItemChecked(Object treeElement, boolean state) {
    setTreeChecked(treeElement, state);
    Object parent = treeContentProvider.getParent(treeElement);
    if (parent == null) {
        return;
    }
    if (state) {
        grayCheckHierarchy(parent);
    } else {
        ungrayCheckHierarchy(parent);
    }
    updateHierarchy(treeElement);
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.SelectResourcesDialog.useHeightHint(org.eclipse.swt.widgets.Composite;)Z2
private boolean useHeightHint(Composite parent) {
    int fontHeight = (parent.getFont().getFontData())[0].getHeight();
    int displayHeight = parent.getDisplay().getClientArea().height;
    return (displayHeight / fontHeight) > 50;
}
---------------Client-------------------
method: org.eclipse.ui.internal.dialogs.DialogUtil.inRegularFontMode(org.eclipse.swt.widgets.Composite;)Z1
public static boolean inRegularFontMode(Composite parent) {
    return availableRows(parent) > 50;
}
method: org.eclipse.ui.internal.dialogs.DialogUtil.availableRows(org.eclipse.swt.widgets.Composite;)I1
public static int availableRows(Composite parent) {
    int fontHeight = (parent.getFont().getFontData())[0].getHeight();
    int displayHeight = parent.getDisplay().getClientArea().height;
    return displayHeight / fontHeight;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_context_get_border(JILorg.eclipse.swt.internal.gtk.GtkBorder;)V3
public static final void gtk_style_context_get_border(long context, int state, GtkBorder padding) {
    lock.lock();
    try {
        _gtk_style_context_get_border(context, state, padding);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.themes.ColorUtil.getColorValues(Ajava.lang.String;)Aorg.eclipse.swt.graphics.RGB;1
public static RGB[] getColorValues(String[] rawValues) {
    RGB[] values = new RGB[rawValues.length];
    for (int i = 0; i < rawValues.length; i++) {
        values[i] = getColorValue(rawValues[i]);
    }
    return values;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.indirectAccessToStaticField(org.eclipse.jdt.internal.compiler.ast.ASTNode;org.eclipse.jdt.internal.compiler.lookup.FieldBinding;)V3
public void indirectAccessToStaticField(ASTNode location, FieldBinding field) {
    int severity = computeSeverity(IProblem.IndirectAccessToStaticField);
    if (severity == ProblemSeverities.Ignore)
        return;
    this.handle(IProblem.IndirectAccessToStaticField, new String[] { new  String(field.declaringClass.readableName()), new  String(field.name) }, new String[] { new  String(field.declaringClass.shortReadableName()), new  String(field.name) }, severity, nodeSourceStart(field, location), nodeSourceEnd(field, location));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.deprecatedField(org.eclipse.jdt.internal.compiler.lookup.FieldBinding;org.eclipse.jdt.internal.compiler.ast.ASTNode;)V3
public void deprecatedField(FieldBinding field, ASTNode location) {
    int severity = computeSeverity(IProblem.UsingDeprecatedField);
    if (severity == ProblemSeverities.Ignore)
        return;
    this.handle(IProblem.UsingDeprecatedField, new String[] { new  String(field.declaringClass.readableName()), new  String(field.name) }, new String[] { new  String(field.declaringClass.shortReadableName()), new  String(field.name) }, severity, nodeSourceStart(field, location), nodeSourceEnd(field, location));
}
method: org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(IAjava.lang.String;Ajava.lang.String;III)V7
private void handle(int problemId, String[] problemArguments, String[] messageArguments, int severity, int problemStartPosition, int problemEndPosition) {
    this.handle(problemId, problemArguments, 0, messageArguments, severity, problemStartPosition, problemEndPosition);
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.LibraryPluginJarsPage$3.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void keyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        handleRemove();
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.ui.actions.RefreshAction$1.keyReleased(org.eclipse.swt.events.KeyEvent;)V2
public void keyReleased(KeyEvent e) {
    handleKeyReleased(e);
}
method: org.eclipse.equinox.internal.p2.ui.actions.RefreshAction.handleKeyReleased(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyReleased(KeyEvent event) {
    if (event.keyCode == SWT.F5 && event.stateMask == 0) {
        refresh();
    }
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.map.DecoratingObservableMap.keySet()java.util.Set;1
public Set keySet() {
    getterCalled();
    if (keySet == null) {
        keySet = new  BackedSet(decorated.keySet());
    }
    return keySet;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.InternalClassFileEditorInput.getToolTipText()java.lang.String;1
public String getToolTipText() {
    return fClassFile.getType().getFullyQualifiedName();
}
method: org.eclipse.jdt.internal.core.ClassFile.getType()org.eclipse.jdt.core.IType;1
public IType getType() {
    if (this.binaryType == null) {
        this.binaryType = new  BinaryType(this, getTypeName());
    }
    return this.binaryType;
}

---------------Library-------------------
method: org.eclipse.ui.internal.registry.Category.getPluginId()java.lang.String;1
@Override
public String getPluginId() {
    return configurationElement == null ? pluginId : configurationElement.getNamespace();
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentProvider.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    return fInput.getContentBaseAddress();
}
method: org.eclipse.debug.internal.ui.views.memory.renderings.TableRenderingContentInput.getContentBaseAddress()java.math.BigInteger;1
public BigInteger getContentBaseAddress() {
    if (fMemoryBlockBaseAddress == null) {
        try {
            updateContentBaseAddress();
        } catch (DebugException e) {
            fMemoryBlockBaseAddress = new  BigInteger("0");
        }
    }
    return fMemoryBlockBaseAddress;
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.waitUntilDone(org.eclipse.core.runtime.IProgressMonitor;)V2
public void waitUntilDone(IProgressMonitor monitor) {
    super.waitUntilDone(monitor);
    if (checkedInCollector != null) {
        checkedInCollector.waitUntilDone(monitor);
        super.waitUntilDone(monitor);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.FilterTextControl.createControls(org.eclipse.swt.widgets.Composite;)V2
private void createControls(Composite parent) {
    createTextControl(parent);
    createClearButton(parent);
    updateClearButtonVisibility(false);
}
method: org.eclipse.jdt.internal.ui.preferences.FilterTextControl.updateClearButtonVisibility(Z)V2
private void updateClearButtonVisibility(boolean visible) {
    if (fClearButton != null) {
        fClearButton.setVisible(visible);
    }
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.search.ConsumerReportConvertor$ConsumerReportVisitor.formatMessages(Ajava.lang.String;)java.lang.String;2
private String formatMessages(String[] messages) {
    if (messages != null) {
        StringBuffer buffer = new  StringBuffer();
        for (int i = 0; i < messages.length; i++) {
            buffer.append(messages[i]);
            if (i < messages.length - 1) {
                buffer.append("\n");
            }
        }
        return buffer.toString();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.nls.NLSFragmentGenerator.join(java.lang.String;Ajava.lang.String;)java.lang.String;3
private String join(String delimiter, String[] parts) {
    return join(delimiter, parts, 0, parts.length);
}
method: org.eclipse.pde.internal.ui.nls.NLSFragmentGenerator.join(java.lang.String;Ajava.lang.String;II)java.lang.String;5
private String join(String delimiter, String[] parts, int offset, int n) {
    StringBuffer builder = new  StringBuffer();
    for (int i = offset; i < n; i++) {
        builder.append(parts[i]);
        if (i < parts.length - 1) {
            builder.append(delimiter);
        }
    }
    return builder.toString();
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.repository.FileInfo.reset()V1
public void reset() {
    name = null;
    contentType = null;
    size = -1;
    lastModified = 0;
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;)V3
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey) {
    setMatchingCharacterPainterPreferenceKeys(enableKey, colorKey, null, null);
}
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;java.lang.String;java.lang.String;)V5
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey, String highlightCharacterAtCaretLocationKey, String enclosingPeerCharactersKey) {
    fMatchingCharacterPainterEnableKey = enableKey;
    fMatchingCharacterPainterColorKey = colorKey;
    fMatchingCharacterPainterEnclosingPeerCharactersKey = enclosingPeerCharactersKey;
    fMatchingCharacterPainterHighlightCharacterAtCaretLocationKey = highlightCharacterAtCaretLocationKey;
}

---------------Library-------------------
method: org.eclipse.ltk.internal.core.refactoring.resource.ResourceModifications.addMove(org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.MoveArguments;)V3
public void addMove(IResource move, MoveArguments arguments) {
    if (fMove == null) {
        fMove = new  ArrayList(2);
        fMoveArguments = new  ArrayList(2);
    }
    fMove.add(move);
    fMoveArguments.add(arguments);
    if (fIgnoreCount == 0) {
        IPath destination = ((IResource) arguments.getDestination()).getFullPath().append(move.getName());
        internalAdd(new  MoveDescription(move, destination));
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.participants.ResourceModifications.addCopy(org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.CopyArguments;)V3
public void addCopy(IResource copy, CopyArguments arguments) {
    if (fCopy == null) {
        fCopy = new  ArrayList<IResource>(2);
        fCopyArguments = new  ArrayList<CopyArguments>(2);
    }
    fCopy.add(copy);
    fCopyArguments.add(arguments);
    addCopyDelta(copy, arguments);
}
method: org.eclipse.jdt.internal.corext.refactoring.participants.ResourceModifications.addCopyDelta(org.eclipse.core.resources.IResource;org.eclipse.ltk.core.refactoring.participants.CopyArguments;)V3
public void addCopyDelta(IResource copy, CopyArguments arguments) {
    if (fIgnoreCount == 0) {
        IPath destination = ((IResource) arguments.getDestination()).getFullPath().append(copy.getName());
        internalAdd(new  CopyDescription(copy, destination));
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.fix.ImportsCleanUp.getRequirements()org.eclipse.jdt.ui.cleanup.CleanUpRequirements;1
@Override
public CleanUpRequirements getRequirements() {
    boolean isOrganizeImports = isEnabled(CleanUpConstants.ORGANIZE_IMPORTS);
    return new  CleanUpRequirements(isOrganizeImports, isOrganizeImports, false, null);
}
---------------Client-------------------
method: org.eclipse.ui.internal.BundleGroupProperties.getFeatureImageUrl(org.eclipse.core.runtime.IBundleGroup;)java.net.URL;1
public static URL getFeatureImageUrl(IBundleGroup bundleGroup) {
    return getUrl(bundleGroup.getProperty(FEATURE_IMAGE), null);
}
method: org.eclipse.ui.internal.BrandingProperties.getUrl(java.lang.String;org.osgi.framework.Bundle;)java.net.URL;2
public static URL getUrl(String value, Bundle definingBundle) {
    try {
        if (value != null) {
            return new  URL(value);
        }
    } catch (MalformedURLException e) {
        if (definingBundle != null) {
            return Platform.find(definingBundle, new  Path(value));
        }
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.JavaModelOperation.moveResources(Aorg.eclipse.core.resources.IResource;org.eclipse.core.runtime.IPath;)V3
protected void moveResources(IResource[] resources, IPath container) throws JavaModelException {
    IProgressMonitor subProgressMonitor = null;
    if (this.progressMonitor != null) {
        subProgressMonitor = new  SubProgressMonitor(this.progressMonitor, resources.length, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
    }
    IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
    try {
        for (int i = 0, length = resources.length; i < length; i++) {
            IResource resource = resources[i];
            IPath destination = container.append(resource.getName());
            if (root.findMember(destination) == null) {
                resource.move(destination, false, subProgressMonitor);
            }
        }
        setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE);
    } catch (CoreException e) {
        throw new  JavaModelException(e);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.JavaModelOperation.copyResources(Aorg.eclipse.core.resources.IResource;org.eclipse.core.runtime.IPath;)V3
protected void copyResources(IResource[] resources, IPath container) throws JavaModelException {
    IProgressMonitor subProgressMonitor = getSubProgressMonitor(resources.length);
    IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
    try {
        for (int i = 0, length = resources.length; i < length; i++) {
            IResource resource = resources[i];
            IPath destination = container.append(resource.getName());
            if (root.findMember(destination) == null) {
                resource.copy(destination, false, subProgressMonitor);
            }
        }
        setAttribute(HAS_MODIFIED_RESOURCE_ATTR, TRUE);
    } catch (CoreException e) {
        throw new  JavaModelException(e);
    }
}
method: org.eclipse.jdt.internal.core.JavaModelOperation.getSubProgressMonitor(I)org.eclipse.core.runtime.IProgressMonitor;2
protected IProgressMonitor getSubProgressMonitor(int workAmount) {
    IProgressMonitor sub = null;
    if (this.progressMonitor != null) {
        sub = new  SubProgressMonitor(this.progressMonitor, workAmount, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
    }
    return sub;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache$HierarchyCacheEntry.dispose()V1
public void dispose() {
    if (fTypeHierarchy != null) {
        fTypeHierarchy.removeTypeHierarchyChangedListener(this);
        fTypeHierarchy = null;
    }
}
---------------Client-------------------
method: org.apache.lucene.search.NRTManager$SearcherManagerRef.close()V1
public void close() throws IOException {
    generation = MAX_SEARCHER_GEN;
    manager.close();
}
method: org.apache.lucene.search.SearcherManager.close()V1
public synchronized void close() throws IOException {
    if (currentSearcher != null) {
        swapSearcher(null);
    }
}

---------------Library-------------------
method: org.eclipse.help.ui.internal.views.ContextHelpPart.init(org.eclipse.help.ui.internal.views.ReusableHelpPart;java.lang.String;org.eclipse.ui.IMemento;)V4
public void init(ReusableHelpPart parent, String id, IMemento memento) {
    this.parent = parent;
    this.id = id;
    parent.hookFormText(text);
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.LibraryVisibilitySection.refresh()V1
public void refresh() {
    update(fCurrentLibrary);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.ui.internal.layout.CellLayout.setSpacing(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellLayout;2
public CellLayout setSpacing(Point newSpacing) {
    horizontalSpacing = newSpacing.x;
    verticalSpacing = newSpacing.y;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.SourceType.getInitializers()Aorg.eclipse.jdt.core.IInitializer;1
public IInitializer[] getInitializers() throws JavaModelException {
    ArrayList list = getChildrenOfType(INITIALIZER);
    IInitializer[] array = new IInitializer[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.WorkspacePluginModelManager.processModelChanges()V1
@Override
protected void processModelChanges() {
    super.processModelChanges();
    processModelChanges("org.eclipse.pde.internal.core.IExtensionDeltaEvent", fChangedExtensions);
    fChangedExtensions = null;
}
---------------Client-------------------
method: org.eclipse.jetty.server.ssl.SslSelectChannelConnector.setKeyPassword(java.lang.String;)V2
@Deprecated
public void setKeyPassword(String password) {
    _sslContextFactory.setKeyManagerPassword(password);
}
method: org.eclipse.jetty.util.ssl.SslContextFactory.setKeyManagerPassword(java.lang.String;)V2
public void setKeyManagerPassword(String password) {
    checkNotStarted();
    _keyManagerPassword = Password.getPassword(KEYPASSWORD_PROPERTY, password, null);
}

---------------Library-------------------
method: org.eclipse.ltk.internal.core.refactoring.Changes.asCoreException(org.eclipse.text.edits.MalformedTreeException;)org.eclipse.core.runtime.CoreException;1
public static CoreException asCoreException(MalformedTreeException e) {
    String message = e.getMessage();
    if (message == null)
        message = "MalformedTreeException";
    return new  CoreException(new  Status(IStatus.ERROR, RefactoringCorePlugin.getPluginId(), IRefactoringCoreStatusCodes.BAD_LOCATION, message, e));
}
---------------Client-------------------
method: org.eclipse.e4.ui.internal.workbench.swt.ResourceUtility.imageDescriptorFromURI(org.eclipse.emf.common.util.URI;)org.eclipse.jface.resource.ImageDescriptor;2
@Override
public ImageDescriptor imageDescriptorFromURI(URI iconPath) {
    try {
        return ImageDescriptor.createFromURL(new  URL(iconPath.toString()));
    } catch (MalformedURLException e) {
        System.err.println("iconURI \"" + iconPath.toString() + "\" is invalid, no image will be shown");
        return null;
    }
}
method: org.eclipse.jface.resource.ImageDescriptor.createFromURL(java.net.URL;)org.eclipse.jface.resource.ImageDescriptor;1
public static ImageDescriptor createFromURL(URL url) {
    if (url == null) {
        return getMissingImageDescriptor();
    }
    return new  URLImageDescriptor(url);
}

---------------Library-------------------
method: org.eclipse.ui.internal.editors.text.SelectResourcesBlock.notifyCheckStateChangeListeners(org.eclipse.jface.viewers.CheckStateChangedEvent;)V2
private void notifyCheckStateChangeListeners(final CheckStateChangedEvent event) {
    Object[] array = listeners.getListeners();
    for (int i = 0; i < array.length; i++) {
        final ICheckStateListener l = (ICheckStateListener) array[i];
        SafeRunner.run(new  SafeRunnable() {

            public void run() {
                l.checkStateChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractTextEditor.updateStateDependentActions()V1
protected void updateStateDependentActions() {
    if (fStateActions != null) {
        Iterator e = fStateActions.iterator();
        while (e.hasNext()) updateAction((String) e.next());
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction$MenuCreator.getMenu(org.eclipse.swt.widgets.Control;)org.eclipse.swt.widgets.Menu;2
public Menu getMenu(Control parent) {
    createDropDownMenuMgr();
    dropDownMenuMgr.addMenuListener(new  IMenuListener() {

        public void menuAboutToShow(IMenuManager manager) {
            IContributionItem[] items = getContributionItems();
            for (int i = 0; i < items.length; i++) {
                manager.add(items[i]);
            }
            manager.add(new  OpenDialogAction());
        }
    });
    return dropDownMenuMgr.createContextMenu(parent);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.GenerateHashCodeEqualsOperation.getReturnFalse()org.eclipse.jdt.core.dom.ReturnStatement;1
private ReturnStatement getReturnFalse() {
    ReturnStatement falseReturn = fAst.newReturnStatement();
    falseReturn.setExpression(fAst.newBooleanLiteral(false));
    return falseReturn;
}
method: org.eclipse.jdt.core.dom.AST.newBooleanLiteral(Z)org.eclipse.jdt.core.dom.BooleanLiteral;2
public BooleanLiteral newBooleanLiteral(boolean value) {
    BooleanLiteral result = new  BooleanLiteral(this);
    result.setBooleanValue(value);
    return result;
}

---------------Library-------------------
method: org.eclipse.jetty.security.PropertyUserStore.notifyRemove(java.lang.String;)V2
private void notifyRemove(String username) {
    if (_listeners != null) {
        for (Iterator<UserListener> i = _listeners.iterator(); i.hasNext(); ) {
            i.next().remove(username);
        }
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.ltk.internal.ui.refactoring.AbstractDescriptor.getExpression()org.eclipse.core.expressions.Expression;1
public Expression getExpression() throws CoreException {
    if (fExpression == null)
        fExpression = createExpression(fConfigurationElement);
    return fExpression;
}
---------------Client-------------------
method: org.eclipse.debug.ui.memory.AbstractTableRendering$16.getLabel(java.lang.Object;)java.lang.String;2
@Override
public String getLabel(Object o) {
    return AbstractTableRendering.this.getLabel();
}
method: org.eclipse.debug.ui.memory.AbstractTableRendering.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fLabel == null) {
        fLabel = buildLabel(true);
    }
    return fLabel;
}

---------------Library-------------------
method: org.eclipse.debug.core.sourcelookup.containers.ArchiveSourceContainer.init(org.eclipse.debug.core.sourcelookup.ISourceLookupDirector;)V2
@Override
public void init(ISourceLookupDirector director) {
    super.init(director);
    if (fDelegateContainer != null) {
        fDelegateContainer.init(director);
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.debug.ui.contexts.AbstractDebugContextProvider.fire(org.eclipse.debug.ui.contexts.DebugContextEvent;)V2
protected void fire(final DebugContextEvent event) {
    Object[] listeners = fListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        final IDebugContextListener listener = (IDebugContextListener) listeners[i];
        SafeRunner.run(new  ISafeRunnable() {

            @Override
            public void run() throws Exception {
                listener.debugContextChanged(event);
            }

            @Override
            public void handleException(Throwable exception) {
                DebugUIPlugin.log(exception);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.compare.internal.CompareUIPlugin.getResourceBundle()java.util.ResourceBundle;1
public ResourceBundle getResourceBundle() {
    if (fResourceBundle == null)
        fResourceBundle = Platform.getResourceBundle(getBundle());
    return fResourceBundle;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.ViewerStateTracker.isDeltaInParent(org.eclipse.debug.internal.ui.viewers.model.provisional.IModelDelta;org.eclipse.debug.internal.ui.viewers.model.provisional.ModelDelta;)Z3
private boolean isDeltaInParent(IModelDelta delta, ModelDelta destParent) {
    return destParent.getChildDelta(delta.getElement(), delta.getIndex()) != null;
}
---------------Client-------------------
method: org.eclipse.team.core.variants.PersistantResourceVariantByteStore.isVariantKnown(org.eclipse.core.resources.IResource;)Z2
public boolean isVariantKnown(IResource resource) throws TeamException {
    return internalGetSyncBytes(resource) != null;
}
method: org.eclipse.team.core.variants.PersistantResourceVariantByteStore.internalGetSyncBytes(org.eclipse.core.resources.IResource;)AB2
private byte[] internalGetSyncBytes(IResource resource) throws TeamException {
    try {
        return getSynchronizer().getSyncInfo(getSyncName(), resource);
    } catch (CoreException e) {
        throw TeamException.asTeamException(e);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.ConfigureRepositoryLocationsDialog.close()Z1
public boolean close() {
    if (dlgTitleImage != null) {
        dlgTitleImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.debug.ui.DebugUITools.getBreakpointsUndoContext()org.eclipse.core.commands.operations.IUndoContext;0
public static synchronized IUndoContext getBreakpointsUndoContext() {
    if (fgBreakpointsUndoContext == null) {
        fgBreakpointsUndoContext = new  ObjectUndoContext(new  Object(), "Breakpoints Context");
        fgBreakpointsUndoContext.addMatch(WorkspaceUndoUtil.getWorkspaceUndoContext());
    }
    return fgBreakpointsUndoContext;
}
---------------Client-------------------
method: org.eclipse.ui.internal.views.markers.BookmarksView.getUndoContext()org.eclipse.core.commands.operations.IUndoContext;1
protected IUndoContext getUndoContext() {
    return WorkspaceUndoUtil.getBookmarksUndoContext();
}
method: org.eclipse.ui.ide.undo.WorkspaceUndoUtil.getBookmarksUndoContext()org.eclipse.core.commands.operations.IUndoContext;0
public static IUndoContext getBookmarksUndoContext() {
    if (bookmarksUndoContext == null) {
        bookmarksUndoContext = new  ObjectUndoContext(new  Object(), "Bookmarks Context");
        bookmarksUndoContext.addMatch(getWorkspaceUndoContext());
    }
    return bookmarksUndoContext;
}

---------------Library-------------------
method: org.eclipse.ui.internal.AggregateWorkingSet.getComponents()Aorg.eclipse.ui.IWorkingSet;1
@Override
public IWorkingSet[] getComponents() {
    IWorkingSet[] localComponents = getComponentsInternal();
    IWorkingSet[] copiedArray = new IWorkingSet[localComponents.length];
    System.arraycopy(localComponents, 0, copiedArray, 0, localComponents.length);
    return copiedArray;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.pipe(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)org.eclipse.equinox.p2.metadata.expression.IExpression;2
public IExpression pipe(IExpression... operands) {
    return Pipe.createPipe(convertArray(operands));
}
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.convertArray(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)Aorg.eclipse.equinox.internal.p2.metadata.expression.Expression;1
protected static Expression[] convertArray(IExpression[] operands) {
    Expression[] ops = new Expression[operands.length];
    System.arraycopy(operands, 0, ops, 0, operands.length);
    return ops;
}

---------------Library-------------------
method: org.eclipse.ui.internal.browser.WebBrowserEditor.dispose()V1
public void dispose() {
    if (image != null && !image.isDisposed())
        image.dispose();
    image = null;
    super.dispose();
    disposed = true;
}
---------------Client-------------------
method: org.eclipse.core.internal.databinding.observable.DelayedObservableValue.makeDirty()V1
private void makeDirty() {
    if (!dirty) {
        dirty = true;
        fireStale();
    }
    cancelScheduledUpdate();
    scheduleUpdate();
}
method: org.eclipse.core.internal.databinding.observable.DelayedObservableValue.cancelScheduledUpdate()V1
private void cancelScheduledUpdate() {
    if (updater != null) {
        updater.cancel();
        updater = null;
    }
}

---------------Library-------------------
method: org.apache.lucene.util.NumericUtils.intToPrefixCoded(II)java.lang.String;2
public static String intToPrefixCoded(final int val, final int shift) {
    final char[] buffer = new char[BUF_SIZE_INT];
    final int len = intToPrefixCoded(val, shift, buffer);
    return new  String(buffer, 0, len);
}
---------------Client-------------------
method: org.apache.lucene.util.NumericUtils.longToPrefixCoded(J)java.lang.String;1
public static String longToPrefixCoded(final long val) {
    return longToPrefixCoded(val, 0);
}
method: org.apache.lucene.util.NumericUtils.longToPrefixCoded(JI)java.lang.String;2
public static String longToPrefixCoded(final long val, final int shift) {
    final char[] buffer = new char[BUF_SIZE_LONG];
    final int len = longToPrefixCoded(val, shift, buffer);
    return new  String(buffer, 0, len);
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_context_get_padding(JILorg.eclipse.swt.internal.gtk.GtkBorder;)V3
public static final void gtk_style_context_get_padding(long context, int state, GtkBorder padding) {
    lock.lock();
    try {
        _gtk_style_context_get_padding(context, state, padding);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;5
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    return anyOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;5
public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third, org.hamcrest.Matcher<? super T> fourth, org.hamcrest.Matcher<? super T> fifth) {
    return org.hamcrest.core.AllOf.<T>allOf(first, second, third, fourth, fifth);
}
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;5
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(5);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    return allOf(matchers);
}

---------------Library-------------------
method: org.eclipse.ui.activities.ActivitiesPreferencePage.performDefaults()V1
@Override
protected void performDefaults() {
    enabler.restoreDefaults();
    activityPromptButton.setSelection(getPreferenceStore().getDefaultBoolean(IPreferenceConstants.SHOULD_PROMPT_FOR_ENABLEMENT));
    super.performDefaults();
}
---------------Client-------------------
method: org.eclipse.ui.views.contentoutline.ContentOutline.setSelection(org.eclipse.jface.viewers.ISelection;)V2
public void setSelection(ISelection selection) {
    getSelectionProvider().setSelection(selection);
}
method: org.eclipse.ui.part.PageBookView$SelectionProvider.setSelection(org.eclipse.jface.viewers.ISelection;)V2
@Override
public void setSelection(ISelection selection) {
    IPage currentPage = getCurrentPage();
    if (currentPage == null) {
        return;
    }
    IPageSite site = getPageSite(currentPage);
    if (site == null) {
        return;
    }
    ISelectionProvider selProvider = site.getSelectionProvider();
    if (selProvider != null) {
        selProvider.setSelection(selection);
    }
}

---------------Library-------------------
method: org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yyclose()V1
public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;
    zzEndRead = zzStartRead;
    if (zzReader != null)
        zzReader.close();
}
---------------Client-------------------
method: org.apache.batik.css.parser.Parser.setLocale(java.util.Locale;)V2
public void setLocale(Locale locale) throws CSSException {
    localizableSupport.setLocale(locale);
}
method: org.apache.batik.i18n.LocalizableSupport.setLocale(java.util.Locale;)V2
public void setLocale(Locale l) {
    if (locale != l) {
        locale = l;
        resourceBundles.clear();
        lastResourceClass = null;
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.registry.ExtensionRegistry.removeRegistryChangeListener(org.eclipse.core.runtime.IRegistryChangeListener;)V2
public void removeRegistryChangeListener(IRegistryChangeListener listener) {
    synchronized (listeners) {
        listeners.remove(new  ListenerInfo(listener, null));
    }
}
---------------Client-------------------
method: org.eclipse.core.internal.registry.ExtensionRegistry.addListener(org.eclipse.core.runtime.IRegistryEventListener;)V2
public void addListener(IRegistryEventListener listener) {
    addListenerInternal(listener, null);
}
method: org.eclipse.core.internal.registry.ExtensionRegistry.addListenerInternal(java.util.EventListener;java.lang.String;)V3
private void addListenerInternal(EventListener listener, String filter) {
    synchronized (listeners) {
        listeners.add(new  ListenerInfo(listener, filter));
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.JavaCopyProcessor.getCommonParentForInputElements()java.lang.Object;1
public Object getCommonParentForInputElements() {
    return new  ParentChecker(fCopyPolicy.getResources(), fCopyPolicy.getJavaElements()).getCommonParent();
}
---------------Client-------------------
method: org.eclipse.core.internal.databinding.observable.masterdetail.MapDetailValueObservableMap$EntrySet.iterator()java.util.Iterator;1
public Iterator iterator() {
    final Iterator keyIterator = keySet().iterator();
    return new  Iterator() {

        public boolean hasNext() {
            return keyIterator.hasNext();
        }

        public Object next() {
            Object key = keyIterator.next();
            return new  MapEntry(key);
        }

        public void remove() {
            keyIterator.remove();
        }
    };
}
method: org.eclipse.core.internal.databinding.observable.masterdetail.MapDetailValueObservableMap.keySet()java.util.Set;1
public Set keySet() {
    getterCalled();
    return masterMap.keySet();
}

---------------Library-------------------
method: org.eclipse.swt.widgets.Tree.computeSize(IIZ)org.eclipse.swt.graphics.Point;4
@Override
public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    if (wHint != SWT.DEFAULT && wHint < 0)
        wHint = 0;
    if (hHint != SWT.DEFAULT && hHint < 0)
        hHint = 0;
    OS.gtk_widget_realize(handle);
    Point size = computeNativeSize(handle, wHint, hHint, changed);
    if (size.x == 0 && wHint == SWT.DEFAULT)
        size.x = DEFAULT_WIDTH;
    if (OS.GTK3 && size.y == 0 && hHint == SWT.DEFAULT) {
        size.y = getItemCount() * getItemHeight();
    }
    if (size.y == 0 && hHint == SWT.DEFAULT)
        size.y = DEFAULT_HEIGHT;
    Rectangle trim = computeTrim(0, 0, size.x, size.y);
    size.x = trim.width;
    size.y = trim.height;
    return size;
}
---------------Client-------------------
method: org.eclipse.swt.custom.TableTree.computeSize(IIZ)org.eclipse.swt.graphics.Point;4
@Override
public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    return table.computeSize(wHint, hHint, changed);
}
method: org.eclipse.swt.widgets.Table.computeSize(IIZ)org.eclipse.swt.graphics.Point;4
@Override
public Point computeSize(int wHint, int hHint, boolean changed) {
    checkWidget();
    if (wHint != SWT.DEFAULT && wHint < 0)
        wHint = 0;
    if (hHint != SWT.DEFAULT && hHint < 0)
        hHint = 0;
    Point size = computeNativeSize(handle, wHint, hHint, changed);
    if (size.x == 0 && wHint == SWT.DEFAULT)
        size.x = DEFAULT_WIDTH;
    if (OS.GTK3 && size.y == 0 && hHint == SWT.DEFAULT) {
        size.y = getItemCount() * getItemHeight();
    }
    if (size.y == 0 && hHint == SWT.DEFAULT)
        size.y = DEFAULT_HEIGHT;
    Rectangle trim = computeTrim(0, 0, size.x, size.y);
    size.x = trim.width;
    size.y = trim.height;
    return size;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.views.plugins.PluginsView.contributeToDropDownMenu(org.eclipse.jface.action.IMenuManager;)V2
private void contributeToDropDownMenu(IMenuManager manager) {
    manager.add(fHideWorkspaceFilterAction);
    manager.add(fHideExtEnabledFilterAction);
    manager.add(fHideExtDisabledFilterAction);
}
---------------Client-------------------
method: org.eclipse.jetty.util.statistic.CounterStatistic.reset()V1
public void reset() {
    reset(0);
}
method: org.eclipse.jetty.util.statistic.CounterStatistic.reset(J)V2
public void reset(final long value) {
    _max.set(value);
    _curr.set(value);
    _total.set(0);
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;Ajava.lang.Object;)V3
public void debug(String msg, Object... args) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, args);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.info(java.lang.Throwable;)V2
public void info(Throwable thrown) {
    info("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.info(java.lang.String;java.lang.Throwable;)V3
public void info(String msg, Throwable thrown) {
    if (_level <= LEVEL_INFO) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":INFO:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.objectweb.asm.MethodVisitor.visitInvokeDynamicInsn(java.lang.String;java.lang.String;org.objectweb.asm.Handle;Ajava.lang.Object;)V5
public void visitInvokeDynamicInsn(String name, String desc, Handle bsm, Object... bsmArgs) {
    if (mv != null) {
        mv.visitInvokeDynamicInsn(name, desc, bsm, bsmArgs);
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.TypeStructureBuilder$TypeNameFinderInConstructor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
@Override
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    super.visitFieldInsn(opcode, owner, name, desc);
}
method: org.objectweb.asm.MethodVisitor.visitFieldInsn(ILjava.lang.String;java.lang.String;java.lang.String;)V5
public void visitFieldInsn(int opcode, String owner, String name, String desc) {
    if (mv != null) {
        mv.visitFieldInsn(opcode, owner, name, desc);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.JavaMoveProcessor.setCreateTargetQueries(org.eclipse.jdt.internal.corext.refactoring.reorg.ICreateTargetQueries;)V2
public void setCreateTargetQueries(ICreateTargetQueries queries) {
    Assert.isNotNull(queries);
    fCreateTargetQueries = new  MonitoringCreateTargetQueries(queries, fMovePolicy.getCreateTargetExecutionLog());
}
---------------Client-------------------
method: org.eclipse.jetty.server.ssl.SslSelectChannelConnector.setIncludeCipherSuites(Ajava.lang.String;)V2
@Deprecated
public void setIncludeCipherSuites(String[] cipherSuites) {
    _sslContextFactory.setIncludeCipherSuites(cipherSuites);
}
method: org.eclipse.jetty.util.ssl.SslContextFactory.setIncludeCipherSuites(Ajava.lang.String;)V2
public void setIncludeCipherSuites(String... cipherSuites) {
    checkNotStarted();
    _includeCipherSuites = new  LinkedHashSet<String>(Arrays.asList(cipherSuites));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowInfo.removeLabel(org.eclipse.jdt.core.dom.SimpleName;)V2
protected void removeLabel(SimpleName label) {
    if (fBranches != null) {
        fBranches.remove(makeString(label));
        if (fBranches.isEmpty())
            fBranches = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.util.SuperTypeHierarchyCache$HierarchyCacheEntry.dispose()V1
public void dispose() {
    if (fTypeHierarchy != null) {
        fTypeHierarchy.removeTypeHierarchyChangedListener(this);
        fTypeHierarchy = null;
    }
}
method: org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy.removeTypeHierarchyChangedListener(org.eclipse.jdt.core.ITypeHierarchyChangedListener;)V2
public synchronized void removeTypeHierarchyChangedListener(ITypeHierarchyChangedListener listener) {
    ArrayList listeners = this.changeListeners;
    if (listeners == null) {
        return;
    }
    listeners.remove(listener);
    if (listeners.isEmpty()) {
        JavaCore.removeElementChangedListener(this);
    }
}

---------------Library-------------------
method: org.eclipse.ecf.internal.filetransfer.Activator.stop(org.osgi.framework.BundleContext;)V2
public void stop(BundleContext ctxt) throws Exception {
    if (extensionRegistryTracker != null) {
        extensionRegistryTracker.close();
        extensionRegistryTracker = null;
    }
    plugin = null;
    this.context = null;
}
---------------Client-------------------
method: org.eclipse.help.internal.base.HelpBasePlugin.stop(org.osgi.framework.BundleContext;)V2
public void stop(BundleContext context) throws Exception {
    BaseHelpSystem.shutdown();
    this.context = null;
    plugin = null;
    super.stop(context);
}
method: org.eclipse.core.runtime.Plugin.stop(org.osgi.framework.BundleContext;)V2
public void stop(BundleContext context) throws Exception {
    if (this.debugTracker != null) {
        this.debugTracker.close();
        this.debugTracker = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.Set;java.lang.Class;Z)java.util.Set;3
public static Set safeCopy(Set set, Class c, boolean allowNullElements) {
    if (set == null || c == null) {
        throw new  NullPointerException();
    }
    set = Collections.unmodifiableSet(new  HashSet(set));
    Iterator iterator = set.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return set;
}
---------------Client-------------------
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;)java.util.Set;2
public static final Set safeCopy(final Set set, final Class c) {
    return safeCopy(set, c, false);
}
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;Z)java.util.Set;3
public static final Set safeCopy(final Set set, final Class c, final boolean allowNullElements) {
    if (set == null || c == null) {
        throw new  NullPointerException();
    }
    final Set copy = Collections.unmodifiableSet(new  HashSet(set));
    final Iterator iterator = copy.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return set;
}

---------------Library-------------------
method: org.eclipse.jface.viewers.ColumnViewer.getRawChildren(java.lang.Object;)Ajava.lang.Object;2
@Override
protected Object[] getRawChildren(Object parent) {
    boolean oldBusy = isBusy();
    setBusy(true);
    try {
        return super.getRawChildren(parent);
    } finally {
        setBusy(oldBusy);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.ui.wizards.cheatsheet.NewCategoryNameDialog.createUI(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Composite;2
private Composite createUI(Composite parent) {
    Composite container = createUIContainer(parent);
    createUIInstructionLabel(container);
    createUINameField(container);
    applyDialogFont(container);
    return container;
}
method: org.eclipse.pde.internal.ua.ui.wizards.cheatsheet.NewCategoryNameDialog.createUINameField(org.eclipse.swt.widgets.Composite;)V2
private void createUINameField(Composite parent) {
    createUINameLabel(parent);
    createUINameText(parent);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.formatCompilationUnit(java.lang.String;ILjava.lang.String;Aorg.eclipse.jface.text.IRegion;Z)org.eclipse.text.edits.TextEdit;6
private TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {
    CompilationUnitDeclaration compilationUnitDeclaration = this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);
    if (lineSeparator != null) {
        this.preferences.line_separator = lineSeparator;
    } else {
        this.preferences.line_separator = Util.LINE_SEPARATOR;
    }
    this.preferences.initial_indentation_level = indentationLevel;
    this.newCodeFormatter = new  CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, includeComments);
    return this.newCodeFormatter.format(source, compilationUnitDeclaration);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.formatClassBodyDeclarations(java.lang.String;ILjava.lang.String;Aorg.eclipse.jface.text.IRegion;Z)org.eclipse.text.edits.TextEdit;6
private TextEdit formatClassBodyDeclarations(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {
    ASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), getDefaultCompilerOptions(), true);
    if (bodyDeclarations == null) {
        return null;
    }
    return internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, regions, includeComments);
}
method: org.eclipse.jdt.internal.formatter.DefaultCodeFormatter.internalFormatClassBodyDeclarations(java.lang.String;ILjava.lang.String;Aorg.eclipse.jdt.internal.compiler.ast.ASTNode;Aorg.eclipse.jface.text.IRegion;Z)org.eclipse.text.edits.TextEdit;7
private TextEdit internalFormatClassBodyDeclarations(String source, int indentationLevel, String lineSeparator, ASTNode[] bodyDeclarations, IRegion[] regions, boolean includeComments) {
    if (lineSeparator != null) {
        this.preferences.line_separator = lineSeparator;
    } else {
        this.preferences.line_separator = Util.LINE_SEPARATOR;
    }
    this.preferences.initial_indentation_level = indentationLevel;
    this.newCodeFormatter = new  CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, includeComments);
    return this.newCodeFormatter.format(source, bodyDeclarations);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.resources.RemoteFolderTree.acceptChildren(org.eclipse.team.internal.ccvs.core.ICVSResourceVisitor;)V2
public void acceptChildren(ICVSResourceVisitor visitor) throws CVSException {
    ICVSRemoteResource[] children = getChildren();
    if (children == null)
        return;
    for (int i = 0; i < children.length; i++) {
        ((ICVSResource) children[i]).accept(visitor);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.core.mapping.AbstractResourceMappingScope.getModelProviders()Aorg.eclipse.core.resources.mapping.ModelProvider;1
public ModelProvider[] getModelProviders() {
    Set result = new  HashSet();
    ResourceMapping[] mappings = getMappings();
    for (int i = 0; i < mappings.length; i++) {
        ResourceMapping mapping = mappings[i];
        ModelProvider modelProvider = mapping.getModelProvider();
        if (modelProvider != null)
            result.add(modelProvider);
    }
    return (ModelProvider[]) result.toArray(new ModelProvider[result.size()]);
}
---------------Client-------------------
method: org.eclipse.team.ui.synchronize.TeamStateProvider.getProviderIds(Aorg.eclipse.core.resources.IProject;)Ajava.lang.String;2
private String[] getProviderIds(IProject[] projects) {
    Set providerIds = new  HashSet();
    for (int i = 0; i < projects.length; i++) {
        IProject project = projects[i];
        String id = getProviderId(project);
        if (id != null)
            providerIds.add(id);
    }
    return (String[]) providerIds.toArray(new String[providerIds.size()]);
}
method: org.eclipse.team.ui.synchronize.TeamStateProvider.getProviderId(org.eclipse.core.resources.IProject;)java.lang.String;2
private String getProviderId(IProject project) {
    RepositoryProvider provider = RepositoryProvider.getProvider(project);
    if (provider != null)
        return provider.getID();
    return null;
}

---------------Library-------------------
method: org.eclipse.ui.part.MultiPageEditor.onPageChange()V1
protected void onPageChange() {
    if (syncVector != null) {
        Iterator itr = syncVector.iterator();
        while (itr.hasNext()) {
            PageBook pageBook = (PageBook) itr.next();
            syncPageBook(pageBook);
        }
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.handlers.ToggleCoolbarHandler.execute(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;2
@Override
public Object execute(ExecutionEvent event) throws ExecutionException {
    final IWorkbenchWindow activeWorkbenchWindow = HandlerUtil.getActiveWorkbenchWindowChecked(event);
    if (activeWorkbenchWindow instanceof WorkbenchWindow) {
        WorkbenchWindow window = (WorkbenchWindow) activeWorkbenchWindow;
        window.toggleToolbarVisibility();
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.ltk.ui.refactoring.RefactoringWizardPage.getRefactoring()org.eclipse.ltk.core.refactoring.Refactoring;1
protected Refactoring getRefactoring() {
    RefactoringWizard wizard = getRefactoringWizard();
    if (wizard == null)
        return null;
    return wizard.getRefactoring();
}
method: org.eclipse.ltk.ui.refactoring.RefactoringWizardPage.getRefactoringWizard()org.eclipse.ltk.ui.refactoring.RefactoringWizard;1
protected RefactoringWizard getRefactoringWizard() {
    IWizard wizard = getWizard();
    if (wizard instanceof RefactoringWizard)
        return (RefactoringWizard) wizard;
    return null;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSModel.getCompCS()org.eclipse.pde.internal.ua.core.icheatsheet.comp.ICompCS;1
public ICompCS getCompCS() {
    if (fCompCS == null) {
        fCompCS = getFactory().createCompCS();
    }
    return fCompCS;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.core.toc.text.TocModel.getToc()org.eclipse.pde.internal.ua.core.toc.text.Toc;1
public Toc getToc() {
    if (fToc == null) {
        fToc = getFactory().createToc();
    }
    return fToc;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.ui.internal.wizards.datatransfer.WizardProjectsImportPage.getProjectsInWorkspace()Aorg.eclipse.core.resources.IProject;1
private IProject[] getProjectsInWorkspace() {
    if (wsProjects == null) {
        wsProjects = IDEWorkbenchPlugin.getPluginWorkspace().getRoot().getProjects();
    }
    return wsProjects;
}
---------------Client-------------------
method: org.eclipse.compare.CompareUI.getResourceBundle()java.util.ResourceBundle;0
public static ResourceBundle getResourceBundle() {
    return CompareUIPlugin.getDefault().getResourceBundle();
}
method: org.eclipse.compare.internal.CompareUIPlugin.getResourceBundle()java.util.ResourceBundle;1
public ResourceBundle getResourceBundle() {
    if (fResourceBundle == null)
        fResourceBundle = Platform.getResourceBundle(getBundle());
    return fResourceBundle;
}

---------------Library-------------------
method: org.eclipse.swt.widgets.TrayItem.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    if (tooltipsHandle != 0)
        OS.g_object_unref(tooltipsHandle);
    tooltipsHandle = 0;
    if (imageList != null)
        imageList.dispose();
    imageList = null;
    toolTipText = null;
    highlightImage = null;
}
---------------Client-------------------
method: org.eclipse.swt.widgets.TabFolder.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    if (imageList != null)
        imageList.dispose();
    imageList = null;
}
method: org.eclipse.swt.widgets.Composite.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    if (imHandle != 0)
        OS.g_object_unref(imHandle);
    imHandle = 0;
    layout = null;
    tabList = null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.typehierarchy.TypeHierarchyViewer.containsElements()java.lang.Object;1
public Object containsElements() {
    TypeHierarchyContentProvider contentProvider = getHierarchyContentProvider();
    if (contentProvider != null) {
        Object[] elements = contentProvider.getElements(null);
        if (elements.length > 0) {
            return elements[0];
        }
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.launchConfigurations.LaunchConfigurationManager.getLastLaunch(java.lang.String;)org.eclipse.debug.core.ILaunchConfiguration;2
public ILaunchConfiguration getLastLaunch(String groupId) {
    LaunchHistory history = getLaunchHistory(groupId);
    if (history != null) {
        return history.getRecentLaunch();
    }
    return null;
}
method: org.eclipse.debug.internal.ui.launchConfigurations.LaunchHistory.getRecentLaunch()org.eclipse.debug.core.ILaunchConfiguration;1
public synchronized ILaunchConfiguration getRecentLaunch() {
    ILaunchConfiguration[] history = getCompleteLaunchHistory();
    if (history.length > 0) {
        return history[0];
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.refactoring.actions.MoveStaticMembersAction.getSelectedMembers(org.eclipse.jface.viewers.IStructuredSelection;)Aorg.eclipse.jdt.core.IMember;1
private static IMember[] getSelectedMembers(IStructuredSelection selection) {
    if (selection.isEmpty())
        return null;
    for (final Iterator<?> iterator = selection.iterator(); iterator.hasNext(); ) {
        if (!(iterator.next() instanceof IMember))
            return null;
    }
    Set<IMember> memberSet = new  HashSet<IMember>();
    @SuppressWarnings("unchecked") List<IMember> selectionList = (List<IMember>) (List<?>) Arrays.asList(selection.toArray());
    memberSet.addAll(selectionList);
    return memberSet.toArray(new IMember[memberSet.size()]);
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.MoveAction.getSelectedMembers(org.eclipse.jface.viewers.IStructuredSelection;)Aorg.eclipse.jdt.core.IMember;1
private static IMember[] getSelectedMembers(IStructuredSelection selection) {
    if (selection.isEmpty())
        return null;
    for (Iterator<?> iter = selection.iterator(); iter.hasNext(); ) {
        if (!(iter.next() instanceof IMember))
            return null;
    }
    return convertToMemberArray(selection.toArray());
}
method: org.eclipse.jdt.ui.actions.MoveAction.convertToMemberArray(Ajava.lang.Object;)Aorg.eclipse.jdt.core.IMember;1
private static IMember[] convertToMemberArray(Object[] obj) {
    if (obj == null)
        return null;
    Set<Object> memberSet = new  HashSet<Object>();
    memberSet.addAll(Arrays.asList(obj));
    return memberSet.toArray(new IMember[memberSet.size()]);
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.plugin.PluginObject.firePropertyChanged(org.eclipse.pde.core.plugin.IPluginObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
protected void firePropertyChanged(IPluginObject object, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        IModelChangeProvider provider = fModel;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChanged(String property, Object oldValue, Object newValue) {
    firePropertyChanged(this, property, oldValue, newValue);
}
method: org.eclipse.pde.internal.ua.core.cheatsheet.comp.CompCSObject.firePropertyChanged(org.eclipse.pde.internal.ua.core.icheatsheet.comp.ICompCSObject;java.lang.String;java.lang.Object;java.lang.Object;)V5
private void firePropertyChanged(ICompCSObject object, String property, Object oldValue, Object newValue) {
    if (fModel.isEditable()) {
        IModelChangeProvider provider = fModel;
        provider.fireModelObjectChanged(object, property, oldValue, newValue);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.runtime.InternalPlatform.stopServices()V1
private void stopServices() {
    if (legacyPreferencesService != null) {
        legacyPreferencesService.unregister();
        legacyPreferencesService = null;
    }
    if (customPreferencesService != null) {
        customPreferencesService.unregister();
        customPreferencesService = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.actions.variables.ChangeVariableValueInputDialog.configureShell(org.eclipse.swt.widgets.Shell;)V2
@Override
protected void configureShell(Shell shell) {
    super.configureShell(shell);
    if (title != null)
        shell.setText(title);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jsch.internal.ui.authenticator.UserValidationDialog.close()Z1
public boolean close() {
    if (keyLockImage != null) {
        keyLockImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.resources.RemoteFolderSandbox.acceptChildren(org.eclipse.team.internal.ccvs.core.ICVSResourceVisitor;)V2
public void acceptChildren(ICVSResourceVisitor visitor) throws CVSException {
    ICVSRemoteResource[] children = getChildren();
    if (children == null)
        return;
    for (int i = 0; i < children.length; i++) {
        ((ICVSResource) children[i]).accept(visitor);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.jface.wizard.WizardDialog$4.subTask(java.lang.String;)V2
@Override
public void subTask(String name) {
    super.subTask(name);
    if (currentTask == null) {
        currentTask = name;
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.NavigationHistoryAction.pageClosed(org.eclipse.ui.IWorkbenchPage;)V2
@Override
public void pageClosed(IWorkbenchPage page) {
    super.pageClosed(page);
    setEnabled(false);
}
method: org.eclipse.ui.internal.PageEventAction.pageClosed(org.eclipse.ui.IWorkbenchPage;)V2
@Override
public void pageClosed(IWorkbenchPage page) {
    if (page == activePage) {
        activePage = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.List;java.lang.Class;Z)java.util.List;3
public static List safeCopy(List list, Class c, boolean allowNullElements) {
    if (list == null || c == null) {
        throw new  NullPointerException();
    }
    list = Collections.unmodifiableList(new  ArrayList(list));
    Iterator iterator = list.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return list;
}
---------------Client-------------------
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;)java.util.Set;2
public static final Set safeCopy(final Set set, final Class c) {
    return safeCopy(set, c, false);
}
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;Z)java.util.Set;3
public static final Set safeCopy(final Set set, final Class c, final boolean allowNullElements) {
    if (set == null || c == null) {
        throw new  NullPointerException();
    }
    final Set copy = Collections.unmodifiableSet(new  HashSet(set));
    final Iterator iterator = copy.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return set;
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.plugin.PluginLibraryNode.removeContentFilter(org.eclipse.pde.internal.core.text.plugin.PluginElementNode;)V2
public void removeContentFilter(PluginElementNode node) {
    removeChildNode(node);
    if (isInTheModel()) {
        node.setInTheModel(false);
        fireStructureChanged(node, IModelChangedEvent.REMOVE);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.ArrayInitializer;)V2
@Override
public void endVisit(ArrayInitializer node) {
    if (skipNode(node))
        return;
    processSequential(node, node.expressions());
}
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.processSequential(org.eclipse.jdt.core.dom.ASTNode;java.util.List;)org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo;3
protected GenericSequentialFlowInfo processSequential(ASTNode parent, List<? extends ASTNode> nodes) {
    GenericSequentialFlowInfo result = createSequential(parent);
    process(result, nodes);
    return result;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ds.core.builders.XMLErrorReporter.getWritableString(java.lang.String;)java.lang.String;2
private String getWritableString(String source) {
    StringBuffer buf = new  StringBuffer();
    for (int i = 0; i < source.length(); i++) {
        char c = source.charAt(i);
        switch(c) {
            case '&':
                buf.append("&amp;");
                break;
            case '<':
                buf.append("&lt;");
                break;
            case '>':
                buf.append("&gt;");
                break;
            case '\'':
                buf.append("&apos;");
                break;
            case '\"':
                buf.append("&quot;");
                break;
            default:
                buf.append(c);
                break;
        }
    }
    return buf.toString();
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.feature.FeatureObject.getWritableString(java.lang.String;)java.lang.String;2
protected String getWritableString(String source) {
    return PDEXMLHelper.getWritableString(source);
}
method: org.eclipse.pde.internal.core.util.PDEXMLHelper.getWritableString(java.lang.String;)java.lang.String;1
public static String getWritableString(String source) {
    if (source == null)
        return "";
    StringBuffer buf = new  StringBuffer();
    for (int i = 0; i < source.length(); i++) {
        char c = source.charAt(i);
        switch(c) {
            case '&':
                buf.append("&amp;");
                break;
            case '<':
                buf.append("&lt;");
                break;
            case '>':
                buf.append("&gt;");
                break;
            case '\'':
                buf.append("&apos;");
                break;
            case '\"':
                buf.append("&quot;");
                break;
            default:
                buf.append(c);
                break;
        }
    }
    return buf.toString();
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.search.JavaSearchDocument.getFile()org.eclipse.core.resources.IFile;1
private IFile getFile() {
    if (this.file == null)
        this.file = ResourcesPlugin.getWorkspace().getRoot().getFile(new  Path(getPath()));
    return this.file;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.actions.FindBrokenNLSKeysAction.getCompilationUnit(org.eclipse.jdt.internal.ui.javaeditor.JavaEditor;)org.eclipse.jdt.core.ICompilationUnit;1
private static ICompilationUnit getCompilationUnit(JavaEditor editor) {
    IWorkingCopyManager manager = JavaPlugin.getDefault().getWorkingCopyManager();
    ICompilationUnit cu = manager.getWorkingCopy(editor.getEditorInput());
    return cu;
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getWorkingCopyManager()org.eclipse.jdt.internal.ui.javaeditor.WorkingCopyManager;1
public synchronized WorkingCopyManager getWorkingCopyManager() {
    if (fWorkingCopyManager == null) {
        ICompilationUnitDocumentProvider provider = getCompilationUnitDocumentProvider();
        fWorkingCopyManager = new  WorkingCopyManager(provider);
    }
    return fWorkingCopyManager;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.NewLibraryPluginCreationPage$PropertiesListener.modifyText(org.eclipse.swt.events.ModifyEvent;)V2
public void modifyText(ModifyEvent e) {
    if (!fBlocked) {
        fChanged = true;
        setPageComplete(validatePage());
    }
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.memory.provisional.AbstractAsyncTableRendering.handlePageSizeChanged(I)V2
private void handlePageSizeChanged(int pageSize) {
    fPageSize = pageSize;
    fContentDescriptor.setNumLines(pageSize);
    refresh();
}
method: org.eclipse.debug.internal.ui.memory.provisional.AbstractAsyncTableRendering.refresh()V1
@Override
public void refresh() {
    if (!fIsCreated) {
        return;
    }
    fTableViewer.refresh();
}

---------------Library-------------------
method: org.eclipse.compare.internal.CompareEditorSelectionProvider.getSelection()org.eclipse.jface.viewers.ISelection;1
public ISelection getSelection() {
    if (fViewerInFocus != null) {
        return fViewerInFocus.getSelection();
    }
    return TextSelection.emptySelection();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.jarpackager.JarPackageActionDelegate.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell != null)
        return fShell;
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.swt.widgets.IME.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    parent = null;
    text = null;
    styles = null;
    ranges = null;
}
---------------Client-------------------
method: org.eclipse.swt.widgets.TableItem.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    font = null;
    cellFont = null;
}
method: org.eclipse.swt.widgets.Item.releaseWidget()V1
@Override
void releaseWidget() {
    super.releaseWidget();
    text = null;
    image = null;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.imports.FeatureImportWizardPage.setLocation(java.lang.String;)V2
private void setLocation(String location) {
    fSelfSetLocation = true;
    fDropLocation.setText(location);
    fSelfSetLocation = false;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.LibraryVisibilitySection.refresh()V1
public void refresh() {
    update(fCurrentLibrary);
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.apache.lucene.search.function.ShortFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache;java.lang.String;org.apache.lucene.index.IndexReader;)org.apache.lucene.search.function.DocValues;4
@Override
public DocValues getCachedFieldValues(FieldCache cache, String field, IndexReader reader) throws IOException {
    final short[] arr = cache.getShorts(reader, field, parser);
    return new  DocValues() {

        @Override
        public float floatVal(int doc) {
            return arr[doc];
        }

        @Override
        public int intVal(int doc) {
            return arr[doc];
        }

        @Override
        public String toString(int doc) {
            return description() + '=' + intVal(doc);
        }

        @Override
        Object getInnerArray() {
            return arr;
        }
    };
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb$1.createDropDown(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
@Override
protected Control createDropDown(Composite dropDownParent, IBreadcrumbDropDownSite site, TreePath path) {
    return createDropDownControl(dropDownParent, site, path);
}
method: org.eclipse.debug.internal.ui.views.launch.LaunchViewBreadcrumb.createDropDownControl(org.eclipse.swt.widgets.Composite;org.eclipse.debug.internal.ui.viewers.breadcrumb.IBreadcrumbDropDownSite;org.eclipse.jface.viewers.TreePath;)org.eclipse.swt.widgets.Control;4
public Control createDropDownControl(Composite parent, final IBreadcrumbDropDownSite site, TreePath paramPath) {
    TreeViewerDropDown dropDownTreeViewer = new  TreeViewerDropDown() {

        SubTreeModelViewer fDropDownViewer;

        @Override
        protected TreeViewer createTreeViewer(Composite composite, int style, final TreePath path) {
            fDropDownViewer = new  SubTreeModelViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.VIRTUAL | SWT.POP_UP, fTreeViewer.getPresentationContext());
            Object launchViewInput = fTreeViewer.getInput();
            fDropDownViewer.setInput(launchViewInput, path.getParentPath());
            ViewerFilter[] filters = fTreeViewer.getFilters();
            fDropDownViewer.setFilters(filters);
            ModelDelta stateDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
            fTreeViewer.saveElementState(TreePath.EMPTY, stateDelta, IModelDelta.EXPAND | IModelDelta.SELECT);
            if (!fView.getBreadcrumbDropDownAutoExpand()) {
                final ModelDelta prunedDelta = new  ModelDelta(launchViewInput, IModelDelta.NO_CHANGE);
                stateDelta.accept(new  IModelDeltaVisitor() {

                    ModelDelta copy = prunedDelta;

                    @Override
                    public boolean visit(IModelDelta delta, int depth) {
                        TreePath deltaPath = getViewerTreePath(delta);
                        if (deltaPath.getSegmentCount() == 0) {
                            copy.setChildCount(delta.getChildCount());
                        } else if (deltaPath.getSegmentCount() != 0 && path.startsWith(deltaPath, null)) {
                            copy = copy.addNode(delta.getElement(), delta.getIndex(), delta.getFlags(), delta.getChildCount());
                        }
                        if (deltaPath.equals(path)) {
                            copy.setFlags(IModelDelta.SELECT | IModelDelta.REVEAL);
                            return false;
                        }
                        return true;
                    }

                    private TreePath getViewerTreePath(IModelDelta node) {
                        ArrayList<Object> list = new  ArrayList<Object>();
                        IModelDelta parentDelta = node.getParentDelta();
                        while (parentDelta != null) {
                            list.add(0, node.getElement());
                            node = parentDelta;
                            parentDelta = node.getParentDelta();
                        }
                        return new  TreePath(list.toArray());
                    }
                });
                stateDelta = prunedDelta;
            }
            fDropDownViewer.updateViewer(stateDelta);
            fDropDownViewer.addLabelUpdateListener(new  ILabelUpdateListener() {

                @Override
                public void labelUpdateComplete(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesBegin() {
                }

                @Override
                public void labelUpdateStarted(ILabelUpdate update) {
                }

                @Override
                public void labelUpdatesComplete() {
                    new  UIJob(fViewer.getControl().getDisplay(), "resize breadcrub dropdown") {

                        {
                            setSystem(true);
                        }

                        @Override
                        public IStatus runInUIThread(IProgressMonitor monitor) {
                            site.updateSize();
                            return Status.OK_STATUS;
                        }
                    }.schedule();
                }
            });
            return fDropDownViewer;
        }

        @Override
        protected void openElement(ISelection selection) {
            if (fTreeViewer.getControl().isDisposed()) {
                return;
            }
            if (selection != null && (selection instanceof ITreeSelection) && !selection.isEmpty()) {
                TreeModelContentProvider contentProvider = (TreeModelContentProvider) fTreeViewer.getContentProvider();
                TreePath path = TreePath.EMPTY;
                int count = fTreeViewer.getChildCount(path);
                count = contentProvider.viewToModelCount(path, count);
                ModelDelta rootDelta = new  ModelDelta(fTreeViewer.getInput(), -1, IModelDelta.NO_CHANGE, count);
                TreePath rootPath = fDropDownViewer.getRootPath();
                ModelDelta delta = rootDelta;
                for (int i = 0; i < rootPath.getSegmentCount(); i++) {
                    Object element = rootPath.getSegment(i);
                    int index = fTreeViewer.findElementIndex(path, element);
                    index = contentProvider.viewToModelIndex(path, index);
                    path = path.createChildPath(element);
                    count = fTreeViewer.getChildCount(path);
                    count = contentProvider.viewToModelCount(path, count);
                    delta = delta.addNode(rootPath.getSegment(i), index, IModelDelta.NO_CHANGE, count);
                }
                fDropDownViewer.saveElementState(TreePath.EMPTY, delta, IModelDelta.EXPAND | IModelDelta.SELECT);
                rootDelta.accept(new  IModelDeltaVisitor() {

                    @Override
                    public boolean visit(IModelDelta paramDelta, int depth) {
                        if ((paramDelta.getFlags() & IModelDelta.SELECT) != 0) {
                            ((ModelDelta) paramDelta).setFlags(paramDelta.getFlags() | IModelDelta.FORCE);
                        }
                        return true;
                    }
                });
                if (fView.getBreadcrumbDropDownAutoExpand()) {
                    fTreeViewer.collapseToLevel(rootPath, AbstractTreeViewer.ALL_LEVELS);
                }
                fTreeViewer.updateViewer(rootDelta);
                fViewer.setSelection(StructuredSelection.EMPTY);
                site.close();
            }
            super.openElement(selection);
        }
    };
    return dropDownTreeViewer.createDropDown(parent, site, paramPath);
}

---------------Library-------------------
method: org.eclipse.ui.internal.texteditor.quickdiff.DocumentLineDiffer.resume()V1
public synchronized void resume() {
    if (fRightDocument != null)
        fRightDocument.addDocumentListener(this);
    initialize();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.ProjectInfo.setDescription(org.eclipse.core.internal.resources.ProjectDescription;)V2
public void setDescription(ProjectDescription value) {
    if (description != null) {
        ICommand[] oldSpec = description.buildSpec;
        ICommand[] newSpec = value.buildSpec;
        value.buildSpec = oldSpec;
        value.setBuildSpec(newSpec);
    }
    description = value;
}
---------------Client-------------------
method: org.eclipse.ui.internal.views.markers.MarkerContentGenerator.rebuildFilters()V1
protected void rebuildFilters() {
    filters = FILTERS_CHANGED;
    enabledFilters = FILTERS_CHANGED;
    requestMarkerUpdate();
}
method: org.eclipse.ui.internal.views.markers.MarkerContentGenerator.requestMarkerUpdate()V1
void requestMarkerUpdate() {
    if (builder != null) {
        builder.scheduleUpdate(0L);
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.breadcrumb.BreadcrumbItemDetails.installFocusComposite(org.eclipse.swt.widgets.Composite;)V2
private void installFocusComposite(Composite composite) {
    composite.addTraverseListener(new  TraverseListener() {

        @Override
        public void keyTraversed(TraverseEvent e) {
            if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
                int index = fParent.getViewer().getIndexOfItem(fParent);
                if (e.detail == SWT.TRAVERSE_TAB_NEXT) {
                    index++;
                } else {
                    index--;
                }
                if (index > 0 && index < fParent.getViewer().getItemCount()) {
                    fParent.getViewer().selectItem(fParent.getViewer().getItem(index));
                }
                e.doit = true;
            }
        }
    });
    composite.addKeyListener(new  KeyListener() {

        @Override
        public void keyPressed(KeyEvent e) {
            BreadcrumbViewer viewer = fParent.getViewer();
            switch(e.keyCode) {
                case SWT.ARROW_LEFT:
                    if (fSelected) {
                        viewer.doTraverse(false);
                        e.doit = false;
                    } else {
                        viewer.selectItem(fParent);
                    }
                    break;
                case SWT.ARROW_RIGHT:
                    if (fSelected) {
                        viewer.doTraverse(true);
                        e.doit = false;
                    } else {
                        viewer.selectItem(fParent);
                    }
                    break;
                case SWT.ARROW_DOWN:
                case SWT.ARROW_UP:
                case SWT.KEYPAD_ADD:
                    if (!fSelected) {
                        viewer.selectItem(fParent);
                    }
                    openDropDown();
                    e.doit = false;
                    break;
                case SWT.CR:
                    if (!fSelected) {
                        viewer.selectItem(fParent);
                    }
                    viewer.fireOpen();
                    break;
                default:
                    if (e.character == ' ') {
                        if (!fSelected) {
                            viewer.selectItem(fParent);
                        }
                        openDropDown();
                        e.doit = false;
                    }
                    break;
            }
        }

        private void openDropDown() {
            Shell shell = fParent.getDropDownShell();
            if (shell == null) {
                fParent.openDropDownMenu();
                shell = fParent.getDropDownShell();
            }
            shell.setFocus();
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    });
    composite.addFocusListener(new  FocusListener() {

        @Override
        public void focusGained(FocusEvent e) {
            if (!fHasFocus) {
                fHasFocus = true;
                updateSelection();
            }
        }

        @Override
        public void focusLost(FocusEvent e) {
            if (fHasFocus) {
                fHasFocus = false;
                updateSelection();
            }
        }
    });
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.launchConfigurations.SelectLaunchersDialog.addViewerListeners(org.eclipse.jface.viewers.StructuredViewer;)V2
@Override
protected void addViewerListeners(StructuredViewer viewer) {
    viewer.addSelectionChangedListener(new  ISelectionChangedListener() {

        @Override
        public void selectionChanged(SelectionChangedEvent event) {
            IStructuredSelection ss = (IStructuredSelection) event.getSelection();
            if (ss != null && !ss.isEmpty()) {
                SelectLaunchersDialog.this.description.setText(((ILaunchDelegate) ss.getFirstElement()).getDescription());
            } else {
                SelectLaunchersDialog.this.description.setText(IInternalDebugCoreConstants.EMPTY_STRING);
            }
        }
    });
    super.addViewerListeners(viewer);
}
method: org.eclipse.debug.internal.ui.AbstractDebugListSelectionDialog.addViewerListeners(org.eclipse.jface.viewers.StructuredViewer;)V2
@Override
protected void addViewerListeners(StructuredViewer viewer) {
    viewer.addSelectionChangedListener(new  ISelectionChangedListener() {

        @Override
        public void selectionChanged(SelectionChangedEvent event) {
            getButton(IDialogConstants.OK_ID).setEnabled(isValid());
        }
    });
    viewer.addDoubleClickListener(new  IDoubleClickListener() {

        @Override
        public void doubleClick(DoubleClickEvent event) {
            if (isValid()) {
                okPressed();
            }
        }
    });
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.SourceType.getSuperclassTypeSignature()java.lang.String;1
public String getSuperclassTypeSignature() throws JavaModelException {
    SourceTypeElementInfo info = (SourceTypeElementInfo) getElementInfo();
    char[] superclassName = info.getSuperclassName();
    if (superclassName == null) {
        return null;
    }
    return new  String(Signature.createTypeSignature(superclassName, false));
}
---------------Client-------------------
method: org.eclipse.compare.internal.patch.HunkTypedElement.getHunkOverlayImage(org.eclipse.swt.graphics.Image;org.eclipse.jface.resource.LocalResourceManager;java.lang.String;Z)org.eclipse.swt.graphics.Image;4
private static Image getHunkOverlayImage(Image baseImage, LocalResourceManager imageCache, String path, boolean onLeft) {
    ImageDescriptor desc = new  DiffImageDescriptor(baseImage, CompareUIPlugin.getImageDescriptor(path), ICompareUIConstants.COMPARE_IMAGE_WIDTH, onLeft);
    Image image = imageCache.createImage(desc);
    return image;
}
method: org.eclipse.jface.resource.ResourceManager.createImage(org.eclipse.jface.resource.ImageDescriptor;)org.eclipse.swt.graphics.Image;2
public final Image createImage(ImageDescriptor descriptor) {
    Assert.isNotNull(descriptor);
    return (Image) create(descriptor);
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.memory.ViewPaneRenderingMgr.removeMemoryBlockRendering(org.eclipse.debug.ui.memory.IMemoryRendering;)V2
public void removeMemoryBlockRendering(IMemoryRendering rendering) {
    if (rendering == null) {
        return;
    }
    if (!fRenderings.contains(rendering)) {
        return;
    }
    fRenderings.remove(rendering);
    if (fRenderings.size() == 0) {
        DebugPlugin.getDefault().removeDebugEventListener(this);
    }
    storeRenderings();
}
---------------Client-------------------
method: org.eclipse.pde.launching.AbstractPDELaunchConfiguration.manageLaunch(org.eclipse.debug.core.ILaunch;)V2
protected void manageLaunch(ILaunch launch) {
    PDELaunchingPlugin.getDefault().getLaunchListener().manage(launch);
}
method: org.eclipse.pde.internal.launching.launcher.LaunchListener.manage(org.eclipse.debug.core.ILaunch;)V2
public void manage(ILaunch launch) {
    if (managedLaunches.size() == 0)
        hookListener(true);
    if (!managedLaunches.contains(launch))
        managedLaunches.add(launch);
}

---------------Library-------------------
method: org.eclipse.ui.activities.ActivityCategoryPreferencePage.performDefaults()V1
@Override
protected void performDefaults() {
    super.performDefaults();
    activityPromptButton.setSelection(getPreferenceStore().getDefaultBoolean(IPreferenceConstants.SHOULD_PROMPT_FOR_ENABLEMENT));
    Set defaultEnabled = new  HashSet();
    Set activityIds = workingCopy.getDefinedActivityIds();
    for (Iterator i = activityIds.iterator(); i.hasNext(); ) {
        String activityId = (String) i.next();
        IActivity activity = workingCopy.getActivity(activityId);
        try {
            if (activity.isDefaultEnabled()) {
                defaultEnabled.add(activityId);
            }
        } catch (NotDefinedException e) {
        }
    }
    workingCopy.setEnabledActivityIds(defaultEnabled);
}
---------------Client-------------------
method: org.eclipse.ui.activities.ActivitiesPreferencePage.performDefaults()V1
@Override
protected void performDefaults() {
    enabler.restoreDefaults();
    activityPromptButton.setSelection(getPreferenceStore().getDefaultBoolean(IPreferenceConstants.SHOULD_PROMPT_FOR_ENABLEMENT));
    super.performDefaults();
}
method: org.eclipse.ui.internal.activities.ws.ActivityEnabler.restoreDefaults()V1
public void restoreDefaults() {
    Set defaultEnabled = new  HashSet();
    Set activityIds = activitySupport.getDefinedActivityIds();
    for (Iterator i = activityIds.iterator(); i.hasNext(); ) {
        String activityId = (String) i.next();
        IActivity activity = activitySupport.getActivity(activityId);
        try {
            if (activity.isDefaultEnabled()) {
                defaultEnabled.add(activityId);
            }
        } catch (NotDefinedException e) {
        }
    }
    setEnabledStates(defaultEnabled);
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.AbstractTreeViewerAdvisor.getFirstElement(org.eclipse.jface.viewers.IStructuredSelection;)java.lang.Object;2
private Object getFirstElement(IStructuredSelection selection) {
    Object element = getFirstElementOrPath(selection);
    if (element instanceof TreePath) {
        TreePath path = (TreePath) element;
        element = path.getLastSegment();
    }
    return element;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.wizards.ListUtil$TableLabelProvider.getColumnImage(java.lang.Object;I)org.eclipse.swt.graphics.Image;3
public Image getColumnImage(Object o, int index) {
    return getImage(o);
}
method: org.eclipse.pde.internal.ui.elements.ElementLabelProvider.getImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
public Image getImage(Object element) {
    if (element instanceof IPDEElement) {
        return ((IPDEElement) element).getImage();
    }
    return super.getImage(element);
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.resources.RemoteFile.getRepositoryRelativePath()java.lang.String;1
public String getRepositoryRelativePath() {
    String parentPath = parent.getRepositoryRelativePath();
    return parentPath + Session.SERVER_SEPARATOR + getName();
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.resources.RemoteFile.toString()java.lang.String;1
public String toString() {
    return super.toString() + " " + getRevision();
}
method: org.eclipse.team.internal.ccvs.core.resources.RemoteFile.getRevision()java.lang.String;1
public String getRevision() {
    try {
        return ResourceSyncInfo.getRevision(syncBytes);
    } catch (CVSException e) {
        CVSProviderPlugin.log(e);
        return ResourceSyncInfo.ADDED_REVISION;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.viewsupport.JavaUILabelProvider.fireLabelProviderChanged(org.eclipse.jface.viewers.LabelProviderChangedEvent;)V2
protected void fireLabelProviderChanged(final LabelProviderChangedEvent event) {
    Object[] listeners = fListeners.getListeners();
    for (int i = 0; i < listeners.length; ++i) {
        final ILabelProviderListener l = (ILabelProviderListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            public void run() {
                l.labelProviderChanged(event);
            }
        });
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiPageSelectionProvider.firePostSelectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void firePostSelectionChanged(final SelectionChangedEvent event) {
    Object[] listeners = postListeners.getListeners();
    fireEventChange(event, listeners);
}
method: org.eclipse.ui.part.MultiPageSelectionProvider.fireEventChange(org.eclipse.jface.viewers.SelectionChangedEvent;Ajava.lang.Object;)V3
private void fireEventChange(final SelectionChangedEvent event, Object[] listeners) {
    for (int i = 0; i < listeners.length; ++i) {
        final ISelectionChangedListener l = (ISelectionChangedListener) listeners[i];
        SafeRunner.run(new  SafeRunnable() {

            @Override
            public void run() {
                l.selectionChanged(event);
            }
        });
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.junit.wizards.NewTestCaseCreationWizard$ClasspathFixSelectionDialog.updateEnableStates()V1
private void updateEnableStates() {
    if (fPerformFix != null) {
        fFixSelectionTable.getTable().setEnabled(fPerformFix.getSelection());
    }
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.swt.helpers.CSSSWTFontHelper.storeDefaultFont(org.eclipse.swt.custom.CTabItem;)V1
public static void storeDefaultFont(CTabItem item) {
    storeDefaultFont(item, item.getFont());
}
method: org.eclipse.swt.custom.CTabItem.getFont()org.eclipse.swt.graphics.Font;1
public Font getFont() {
    checkWidget();
    if (font != null)
        return font;
    return parent.getFont();
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.processSequential(org.eclipse.jdt.core.dom.ASTNode;org.eclipse.jdt.core.dom.ASTNode;)org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo;3
protected GenericSequentialFlowInfo processSequential(ASTNode parent, ASTNode node1) {
    GenericSequentialFlowInfo result = createSequential(parent);
    if (node1 != null)
        result.merge(getFlowInfo(node1), fFlowContext);
    return result;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.navigator.JavaNavigatorLabelProvider.getText(java.lang.Object;)java.lang.String;2
public String getText(Object element) {
    return delegeteLabelProvider.getText(element);
}
method: org.eclipse.jdt.internal.ui.packageview.PackageExplorerLabelProvider.getText(java.lang.Object;)java.lang.String;2
@Override
public String getText(Object element) {
    String text = getSpecificText(element);
    if (text != null) {
        return decorateText(text, element);
    }
    return super.getText(element);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.markers.JavadocTagOperation.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;I)V3
protected void updateMonitor(final IProgressMonitor monitor, int ticks) throws OperationCanceledException {
    if (monitor != null) {
        monitor.worked(ticks);
        if (monitor.isCanceled()) {
            throw new  OperationCanceledException();
        }
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;)V1
public static void updateMonitor(IProgressMonitor monitor) throws OperationCanceledException {
    updateMonitor(monitor, 0);
}
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;I)V2
public static void updateMonitor(IProgressMonitor monitor, int work) throws OperationCanceledException {
    if (monitor == null) {
        return;
    }
    if (monitor.isCanceled()) {
        throw new  OperationCanceledException();
    }
    monitor.worked(work);
}

---------------Library-------------------
method: org.eclipse.swt.widgets.Text.addSegmentListener(org.eclipse.swt.events.SegmentListener;)V2
public void addSegmentListener(SegmentListener listener) {
    checkWidget();
    if (listener == null)
        error(SWT.ERROR_NULL_ARGUMENT);
    addListener(SWT.Segments, new  TypedListener(listener));
    clearSegments(true);
    applySegments();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.refactoring.ExtractConstantWizard$ExtractConstantInputPage.saveBooleanSetting(java.lang.String;org.eclipse.swt.widgets.Button;)V3
private void saveBooleanSetting(String key, Button checkBox) {
    if (checkBox != null)
        getRefactoringSettings().put(key, checkBox.getSelection());
}
method: org.eclipse.ltk.ui.refactoring.RefactoringWizardPage.getRefactoringSettings()org.eclipse.jface.dialogs.IDialogSettings;1
protected IDialogSettings getRefactoringSettings() {
    IDialogSettings settings = getDialogSettings();
    if (settings == null)
        return null;
    IDialogSettings result = settings.getSection(REFACTORING_SETTINGS);
    if (result == null) {
        result = new  DialogSettings(REFACTORING_SETTINGS);
        settings.addSection(result);
    }
    return result;
}

---------------Library-------------------
method: org.eclipse.ui.internal.activities.ws.ActivityEnabler.setButtonLayoutData(org.eclipse.swt.widgets.Button;org.eclipse.swt.graphics.FontMetrics;)org.eclipse.swt.layout.GridData;3
private GridData setButtonLayoutData(Button button, FontMetrics fontMetrics) {
    GridData data = new  GridData(GridData.HORIZONTAL_ALIGN_FILL);
    int widthHint = Dialog.convertHorizontalDLUsToPixels(fontMetrics, IDialogConstants.BUTTON_WIDTH);
    Point minSize = button.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
    data.widthHint = Math.max(widthHint, minSize.x);
    button.setLayoutData(data);
    return data;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.preferences.AntRuntimePreferencePage.setButtonLayoutData(org.eclipse.swt.widgets.Button;)org.eclipse.swt.layout.GridData;2
@Override
protected GridData setButtonLayoutData(Button button) {
    return super.setButtonLayoutData(button);
}
method: org.eclipse.jface.dialogs.DialogPage.setButtonLayoutData(org.eclipse.swt.widgets.Button;)org.eclipse.swt.layout.GridData;2
protected GridData setButtonLayoutData(Button button) {
    GridData data = new  GridData(GridData.HORIZONTAL_ALIGN_FILL);
    int widthHint = convertHorizontalDLUsToPixels(IDialogConstants.BUTTON_WIDTH);
    Point minSize = button.computeSize(SWT.DEFAULT, SWT.DEFAULT, true);
    data.widthHint = Math.max(widthHint, minSize.x);
    button.setLayoutData(data);
    return data;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository.getActualLocation(java.net.URI;java.lang.String;)java.net.URI;2
private static URI getActualLocation(URI base, String extension) {
    return URIUtil.append(base, CONTENT_FILENAME + extension);
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.WidgetDelegatingValueProperty.observeDelayed(ILorg.eclipse.swt.widgets.Widget;)org.eclipse.jface.databinding.swt.ISWTObservableValue;3
public ISWTObservableValue observeDelayed(int delay, Widget widget) {
    return SWTObservables.observeDelayedValue(delay, observe(widget));
}
method: org.eclipse.jface.databinding.swt.SWTObservables.observeDelayedValue(ILorg.eclipse.jface.databinding.swt.ISWTObservableValue;)org.eclipse.jface.databinding.swt.ISWTObservableValue;2
public static ISWTObservableValue observeDelayedValue(int delay, ISWTObservableValue observable) {
    return new  SWTDelayedObservableValueDecorator(Observables.observeDelayedValue(delay, observable), observable.getWidget());
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.breakpoints.BreakpointsView$1.getText(java.lang.Object;)java.lang.String;2
@Override
public String getText(Object element) {
    IDebugModelPresentation lp = getConfiguredPresentation(element);
    if (lp != null) {
        return lp.getText(element);
    }
    return getDefaultText(element);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.search.PostfixLabelProvider.getImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
@Override
public Image getImage(Object element) {
    Image image = super.getImage(element);
    if (image != null)
        return image;
    return getParticipantImage(element);
}
method: org.eclipse.jdt.internal.ui.search.SearchLabelProvider.getParticipantImage(java.lang.Object;)org.eclipse.swt.graphics.Image;2
protected Image getParticipantImage(Object element) {
    ILabelProvider lp = getLabelProvider(element);
    if (lp == null)
        return null;
    return lp.getImage(element);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.dialogs.PackageSelectionDialog.getDialogSettings()org.eclipse.jface.dialogs.IDialogSettings;1
private IDialogSettings getDialogSettings() {
    IDialogSettings settings = JavaPlugin.getDefault().getDialogSettings();
    String sectionName = getClass().getName();
    IDialogSettings subSettings = settings.getSection(sectionName);
    if (subSettings == null)
        subSettings = settings.addNewSection(sectionName);
    return subSettings;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.ui.CompareResultDialog.getDialogBoundsSettings()org.eclipse.jface.dialogs.IDialogSettings;1
@Override
protected IDialogSettings getDialogBoundsSettings() {
    return JUnitPlugin.getDefault().getDialogSettingsSection(getClass().getName());
}
method: org.eclipse.jdt.internal.junit.ui.JUnitPlugin.getDialogSettingsSection(java.lang.String;)org.eclipse.jface.dialogs.IDialogSettings;2
public IDialogSettings getDialogSettingsSection(String name) {
    IDialogSettings dialogSettings = getDialogSettings();
    IDialogSettings section = dialogSettings.getSection(name);
    if (section == null) {
        section = dialogSettings.addNewSection(name);
    }
    return section;
}

---------------Library-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.createViewer(org.eclipse.swt.widgets.Composite;)org.eclipse.jface.viewers.TreeViewer;2
protected TreeViewer createViewer(Composite parent) {
    TreeViewer viewer = new  TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
    viewer.setUseHashlookup(true);
    initContentProvider(viewer);
    initLabelProvider(viewer);
    initFilters(viewer);
    initListeners(viewer);
    return viewer;
}
---------------Client-------------------
method: org.eclipse.equinox.p2.publisher.AbstractPublisherAction.createParentIU(java.util.Collection;java.lang.String;org.eclipse.equinox.p2.metadata.Version;)org.eclipse.equinox.p2.metadata.MetadataFactory$InstallableUnitDescription;4
protected InstallableUnitDescription createParentIU(Collection<? extends IVersionedId> children, String id, Version version) {
    InstallableUnitDescription root = createIUShell(id, version);
    root.addRequirements(createIURequirements(children));
    addSelfCapability(root);
    return root;
}
method: org.eclipse.equinox.p2.publisher.AbstractPublisherAction.createIUShell(java.lang.String;org.eclipse.equinox.p2.metadata.Version;)org.eclipse.equinox.p2.metadata.MetadataFactory$InstallableUnitDescription;3
protected InstallableUnitDescription createIUShell(String id, Version version) {
    InstallableUnitDescription root = new  MetadataFactory.InstallableUnitDescription();
    root.setId(id);
    root.setVersion(version);
    return root;
}

---------------Library-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.util.KnownRepositories.getRepository(java.lang.String;)org.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;2
public synchronized ICVSRepositoryLocation getRepository(String location) throws CVSException {
    ICVSRepositoryLocation repository = internalGetRepository(location);
    if (repository == null) {
        repository = CVSRepositoryLocation.fromString(location);
    }
    return repository;
}
method: org.eclipse.team.internal.ccvs.core.connection.CVSRepositoryLocation.fromString(java.lang.String;)org.eclipse.team.internal.ccvs.core.connection.CVSRepositoryLocation;1
public static CVSRepositoryLocation fromString(String location) throws CVSException {
    try {
        return fromString(location, false);
    } catch (CVSException e) {
        MultiStatus error = new  MultiStatus(CVSProviderPlugin.ID, IStatus.ERROR, NLS.bind(CVSMessages.CVSRepositoryLocation_invalidFormat, (new Object[] { location })), null);
        error.merge(new  CVSStatus(IStatus.ERROR, CVSMessages.CVSRepositoryLocation_locationForm));
        error.merge(e.getStatus());
        throw new  CVSException(error);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.core.refactoring.descriptors.MoveDescriptor.setMovePackageFragmentRoots(Aorg.eclipse.jdt.core.IPackageFragmentRoot;)V2
public void setMovePackageFragmentRoots(final IPackageFragmentRoot[] roots) {
    Assert.isNotNull(roots);
    Assert.isTrue(fMovePolicy == null, "Clients must only call one of the 'setMoveXXX' methods.");
    fRoots = roots;
    fMovePolicy = POLICY_MOVE_ROOTS;
}
---------------Client-------------------
method: org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.setProcessor(org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor;)V2
public void setProcessor(RefactoringProcessor processor) {
    processor.setRefactoring(this);
    fProcessor = processor;
}
method: org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor.setRefactoring(org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring;)V2
void setRefactoring(ProcessorBasedRefactoring refactoring) {
    Assert.isTrue(fRefactoring == null, "The refactoring can only be set once");
    Assert.isNotNull(refactoring);
    fRefactoring = refactoring;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.JarPackageFragment.getClassFiles()Aorg.eclipse.jdt.core.IClassFile;1
public IClassFile[] getClassFiles() throws JavaModelException {
    ArrayList list = getChildrenOfType(CLASS_FILE);
    IClassFile[] array = new IClassFile[list.size()];
    list.toArray(array);
    return array;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.StandardJavaElementContentProvider.getJavaProjects(org.eclipse.jdt.core.IJavaModel;)Ajava.lang.Object;2
protected Object[] getJavaProjects(IJavaModel jm) throws JavaModelException {
    return jm.getJavaProjects();
}
method: org.eclipse.jdt.internal.core.JavaModel.getJavaProjects()Aorg.eclipse.jdt.core.IJavaProject;1
public IJavaProject[] getJavaProjects() throws JavaModelException {
    ArrayList list = getChildrenOfType(JAVA_PROJECT);
    IJavaProject[] array = new IJavaProject[list.size()];
    list.toArray(array);
    return array;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.compare.JavaHistoryActionImpl.getShell()org.eclipse.swt.widgets.Shell;1
final Shell getShell() {
    if (fEditor != null)
        return fEditor.getEditorSite().getShell();
    return JavaPlugin.getActiveWorkbenchShell();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.getShell()org.eclipse.swt.widgets.Shell;1
private Shell getShell() {
    if (fSWTWidget != null) {
        return fSWTWidget.getShell();
    }
    return JavaPlugin.getActiveWorkbenchShell();
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.EnumDeclaration;)V2
@Override
public void endVisit(EnumDeclaration node) {
    if (skipNode(node))
        return;
    GenericSequentialFlowInfo info = processSequential(node, node.superInterfaceTypes());
    process(info, node.enumConstants());
    process(info, node.bodyDeclarations());
    info.setNoReturn();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.endVisit(org.eclipse.jdt.core.dom.LambdaExpression;)V2
@Override
public void endVisit(LambdaExpression node) {
    if (skipNode(node))
        return;
    GenericSequentialFlowInfo info = createSequential(node);
    process(info, node.parameters());
    process(info, node.getBody());
    info.setNoReturn();
}
method: org.eclipse.jdt.internal.corext.refactoring.code.flow.FlowAnalyzer.createSequential(org.eclipse.jdt.core.dom.ASTNode;)org.eclipse.jdt.internal.corext.refactoring.code.flow.GenericSequentialFlowInfo;2
protected GenericSequentialFlowInfo createSequential(ASTNode parent) {
    GenericSequentialFlowInfo result = createSequential();
    setFlowInfo(parent, result);
    return result;
}

---------------Library-------------------
method: org.eclipse.osgi.internal.permadmin.BundlePermissions.clearPermissionCache()V1
public void clearPermissionCache() {
    if (impliedPermissions != null)
        impliedPermissions.clearPermissionCache();
    if (restrictedPermissions != null)
        restrictedPermissions.clearPermissionCache();
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagRefreshButtonArea.getRunnableContext()org.eclipse.jface.operation.IRunnableContext;1
public IRunnableContext getRunnableContext() {
    if (context == null)
        return PlatformUI.getWorkbench().getProgressService();
    return context;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.actions.AbstractOpenWizardAction.getShell()org.eclipse.swt.widgets.Shell;1
protected Shell getShell() {
    if (fShell == null) {
        return JavaPlugin.getActiveWorkbenchShell();
    }
    return fShell;
}
method: org.eclipse.jdt.internal.ui.JavaPlugin.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.debug.ui.AbstractLaunchConfigurationTabGroup.initializeFrom(org.eclipse.debug.core.ILaunchConfiguration;)V2
@Override
public void initializeFrom(ILaunchConfiguration configuration) {
    ILaunchConfigurationTab[] tabs = getTabs();
    for (int i = 0; i < tabs.length; i++) {
        tabs[i].initializeFrom(configuration);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.FlatModelProvider.handleResourceAdditions(org.eclipse.team.core.synchronize.ISyncInfoTreeChangeEvent;)V2
protected void handleResourceAdditions(ISyncInfoTreeChangeEvent event) {
    addResources(event.getAddedResources());
}
method: org.eclipse.team.internal.ui.synchronize.SynchronizeModelProvider.addResources(Aorg.eclipse.team.core.synchronize.SyncInfo;)V2
protected void addResources(SyncInfo[] added) {
    for (int i = 0; i < added.length; i++) {
        SyncInfo info = added[i];
        addResource(info);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.KeyboardInteractiveDialog.close()Z1
public boolean close() {
    if (keyLockImage != null) {
        keyLockImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.misc.CheckboxTreeAndListGroup.ungrayCheckHierarchy(java.lang.Object;)V2
protected void ungrayCheckHierarchy(Object treeElement) {
    if (!determineShouldBeAtLeastGrayChecked(treeElement)) {
        checkedStateStore.remove(treeElement);
    }
    Object parent = treeContentProvider.getParent(treeElement);
    if (parent != null) {
        ungrayCheckHierarchy(parent);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryManager.addDateTag(org.eclipse.team.internal.ccvs.core.ICVSRepositoryLocation;org.eclipse.team.internal.ccvs.core.CVSTag;)V3
public void addDateTag(ICVSRepositoryLocation location, CVSTag tag) {
    if (tag == null)
        return;
    RepositoryRoot root = getRepositoryRootFor(location);
    root.addDateTag(tag);
    broadcastRepositoryChange(root);
}
method: org.eclipse.team.internal.ccvs.ui.repo.RepositoryRoot.addDateTag(org.eclipse.team.internal.ccvs.core.CVSTag;)V2
public void addDateTag(CVSTag tag) {
    if (!dateTags.contains(tag)) {
        dateTags.add(tag);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.java.LazyJavaTypeCompletionProposal.getSimpleTypeName()java.lang.String;1
protected final String getSimpleTypeName() {
    if (fSimpleName == null)
        fSimpleName = Signature.getSimpleName(getQualifiedTypeName());
    return fSimpleName;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.plugin.TemplateWizardHelper.getFlag(org.eclipse.pde.internal.ui.wizards.WizardElement;java.lang.String;)java.lang.Boolean;2
public static Boolean getFlag(WizardElement element, String name) {
    IConfigurationElement config = element.getConfigurationElement();
    String value = config.getAttribute(name);
    if (value == null)
        return null;
    return new  Boolean(value.equalsIgnoreCase("true"));
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.getFields(java.lang.String;)Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;2
public Variable[] getFields(String type) {
    Variable[] fields = getCompletion().findFieldVariables(type);
    arrange(fields);
    return fields;
}
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.arrange(Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;)V2
private void arrange(Variable[] variables) {
    Arrays.sort(variables, new  Comparator<Variable>() {

        public int compare(Variable o1, Variable o2) {
            return rank(o1) - rank(o2);
        }

        private int rank(Variable l) {
            return fUsedNames.contains(l.getName()) ? 1 : 0;
        }
    });
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.CompositeModelProvider.clearProviders()V1
private void clearProviders() {
    for (Iterator iter = providers.iterator(); iter.hasNext(); ) {
        ISynchronizeModelProvider provider = (ISynchronizeModelProvider) iter.next();
        provider.dispose();
    }
    providers.clear();
    resourceToElements.clear();
    elementToProvider.clear();
}
---------------Client-------------------
method: org.eclipse.ui.internal.menus.ContributionFactoryGenerator$1.run()V1
@Override
public void run() {
    root.release();
}
method: org.eclipse.ui.internal.menus.ContributionRoot.release()V1
public void release() {
    for (Iterator<IContributionItem> itemIter = itemsToExpressions.keySet().iterator(); itemIter.hasNext(); ) {
        IContributionItem item = itemIter.next();
        item.dispose();
    }
    itemsToExpressions.clear();
    topLevelItems.clear();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_screen_get_monitor_geometry(JILorg.eclipse.swt.internal.gtk.GdkRectangle;)V3
public static final void gdk_screen_get_monitor_geometry(long screen, int monitor_num, GdkRectangle dest) {
    lock.lock();
    try {
        _gdk_screen_get_monitor_geometry(screen, monitor_num, dest);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.emf.ecore.resource.impl.ResourceImpl$ContentsEList.loaded()V1
protected void loaded() {
    if (!ResourceImpl.this.isLoaded()) {
        Notification notification = ResourceImpl.this.setLoaded(true);
        if (notification != null) {
            ResourceImpl.this.eNotify(notification);
        }
    }
}
---------------Client-------------------
method: org.eclipse.ui.part.MultiEditor$1.handleEvent(org.eclipse.swt.widgets.Event;)V2
@Override
public void handleEvent(Event event) {
    if (event.type == SWT.Activate) {
        activateEditor(e);
    }
}
method: org.eclipse.ui.part.MultiEditor.activateEditor(org.eclipse.ui.IEditorPart;)V2
@Override
public void activateEditor(IEditorPart part) {
    IEditorPart oldEditor = getActiveEditor();
    super.activateEditor(part);
    updateGradient(oldEditor);
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.quickdiff.ReferenceProviderDescriptor.getLabel()java.lang.String;1
public String getLabel() {
    if (fLabel == null) {
        fLabel = fConfiguration.getAttribute(LABEL_ATTRIBUTE);
        Assert.isNotNull(fLabel);
    }
    return fLabel;
}
---------------Client-------------------
method: org.eclipse.ui.internal.Perspective.getPerspectiveExtensionActionSets()java.util.ArrayList;1
protected ArrayList getPerspectiveExtensionActionSets() {
    return page.getPerspectiveExtensionActionSets(descriptor.getOriginalId());
}
method: org.eclipse.ui.internal.registry.PerspectiveDescriptor.getOriginalId()java.lang.String;1
public String getOriginalId() {
    if (originalId == null) {
        originalId = getId();
    }
    return originalId;
}

---------------Library-------------------
method: org.eclipse.jface.text.DefaultUndoManager$TextCommand.set(II)V3
protected void set(int start, int end) {
    fStart = start;
    fEnd = end;
    fText = null;
    fPreservedText = null;
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;)V3
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey) {
    setMatchingCharacterPainterPreferenceKeys(enableKey, colorKey, null, null);
}
method: org.eclipse.ui.texteditor.SourceViewerDecorationSupport.setMatchingCharacterPainterPreferenceKeys(java.lang.String;java.lang.String;java.lang.String;java.lang.String;)V5
public void setMatchingCharacterPainterPreferenceKeys(String enableKey, String colorKey, String highlightCharacterAtCaretLocationKey, String enclosingPeerCharactersKey) {
    fMatchingCharacterPainterEnableKey = enableKey;
    fMatchingCharacterPainterColorKey = colorKey;
    fMatchingCharacterPainterEnclosingPeerCharactersKey = enclosingPeerCharactersKey;
    fMatchingCharacterPainterHighlightCharacterAtCaretLocationKey = highlightCharacterAtCaretLocationKey;
}

---------------Library-------------------
method: org.eclipse.ui.internal.activities.AbstractActivityManager.addActivityManagerListener(org.eclipse.ui.activities.IActivityManagerListener;)V2
@Override
public void addActivityManagerListener(IActivityManagerListener activityManagerListener) {
    if (activityManagerListener == null) {
        throw new  NullPointerException();
    }
    if (activityManagerListeners == null) {
        activityManagerListeners = new  ListenerList();
    }
    activityManagerListeners.add(activityManagerListener);
}
---------------Client-------------------
method: org.eclipse.core.commands.Command.addCommandListener(org.eclipse.core.commands.ICommandListener;)V2
public final void addCommandListener(final ICommandListener commandListener) {
    if (commandListener == null) {
        throw new  NullPointerException("Cannot add a null command listener");
    }
    addListenerObject(commandListener);
}
method: org.eclipse.core.commands.common.EventManager.addListenerObject(java.lang.Object;)V2
protected final synchronized void addListenerObject(final Object listener) {
    if (listenerList == null) {
        listenerList = new  ListenerList(ListenerList.IDENTITY);
    }
    listenerList.add(listener);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.classpath.RuntimeClasspathViewer.notifyChanged()V1
public void notifyChanged() {
    Object[] listeners = fListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((IEntriesChangedListener) listeners[i]).entriesChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.partPropertyChanged(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void partPropertyChanged(PropertyChangeEvent event) {
    firePartPropertyChange(event);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.firePartPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
protected void firePartPropertyChange(PropertyChangeEvent event) {
    Object[] l = partChangeListeners.getListeners();
    for (int i = 0; i < l.length; i++) {
        ((IPropertyChangeListener) l[i]).propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.equinox.internal.jsp.jasper.registry.Activator.start(org.osgi.framework.BundleContext;)V2
public void start(BundleContext context) throws Exception {
    this.context = context;
    packageAdminTracker = new  ServiceTracker(context, PackageAdmin.class.getName(), this);
    packageAdminTracker.open();
}
---------------Client-------------------
method: org.apache.felix.gogo.shell.Activator.start(org.osgi.framework.BundleContext;)V2
public void start(final BundleContext ctxt) throws Exception {
    context = ctxt;
    commandProcessorTracker = processorTracker();
}
method: org.apache.felix.gogo.shell.Activator.processorTracker()org.osgi.util.tracker.ServiceTracker;1
private ServiceTracker processorTracker() {
    ServiceTracker t = new  ServiceTracker(context, CommandProcessor.class.getName(), null) {

        @Override
        public Object addingService(ServiceReference reference) {
            CommandProcessor processor = (CommandProcessor) super.addingService(reference);
            startShell(context, processor);
            return processor;
        }

        @Override
        public void removedService(ServiceReference reference, Object service) {
            if (thread != null) {
                thread.interrupt();
            }
            super.removedService(reference, service);
        }
    };
    t.open();
    return t;
}

---------------Library-------------------
method: org.eclipse.ui.internal.dnd.DragUtil.getEventLoc(org.eclipse.swt.widgets.Event;)org.eclipse.swt.graphics.Point;1
public static Point getEventLoc(Event event) {
    Control ctrl = (Control) event.widget;
    return ctrl.toDisplay(new  Point(event.x, event.y));
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.swt.properties.converters.CSSValueSWTRGBConverterImpl.convert(java.lang.Object;org.eclipse.e4.ui.css.core.engine.CSSEngine;java.lang.Object;org.eclipse.e4.ui.css.core.dom.properties.converters.ICSSValueConverterConfig;)java.lang.String;5
@Override
public String convert(Object value, CSSEngine engine, Object context, ICSSValueConverterConfig config) throws Exception {
    RGB color = (RGB) value;
    RGBColor rgbColor = CSSSWTColorHelper.getRGBColor(color);
    return CSS2ColorHelper.getColorStringValue(rgbColor, config);
}
method: org.eclipse.e4.ui.css.swt.helpers.CSSSWTColorHelper.getRGBColor(org.eclipse.swt.graphics.RGB;)org.w3c.dom.css.RGBColor;1
public static RGBColor getRGBColor(RGB color) {
    int red = color.red;
    int green = color.green;
    int blue = color.blue;
    return new  CSS2RGBColorImpl(red, green, blue);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.ui.internal.preferences.ApiBaselinePreferencePage$1.keyReleased(org.eclipse.swt.events.KeyEvent;)V2
@Override
public void keyReleased(KeyEvent e) {
    if (e.stateMask == SWT.NONE && e.keyCode == SWT.DEL) {
        doRemove();
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea$7.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void keyPressed(KeyEvent event) {
    handleKeyPressed(event);
}
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea.handleKeyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        deleteDateTag();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.ClassFile.addSyntheticSwitchTable(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding;)V2
public void addSyntheticSwitchTable(SyntheticMethodBinding methodBinding) {
    generateMethodInfoHeader(methodBinding);
    int methodAttributeOffset = this.contentsOffset;
    int attributeNumber = generateMethodInfoAttributes(methodBinding);
    int codeAttributeOffset = this.contentsOffset;
    attributeNumber++;
    generateCodeAttributeHeader();
    this.codeStream.init(this);
    this.codeStream.generateSyntheticBodyForSwitchTable(methodBinding);
    completeCodeAttributeForSyntheticMethod(true, methodBinding, codeAttributeOffset, ((SourceTypeBinding) methodBinding.declaringClass).scope.referenceCompilationUnit().compilationResult.getLineSeparatorPositions());
    this.contents[methodAttributeOffset++] = (byte) (attributeNumber >> 8);
    this.contents[methodAttributeOffset] = (byte) attributeNumber;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.compiler.ClassFile.addSyntheticArrayClone(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding;)V2
public void addSyntheticArrayClone(SyntheticMethodBinding methodBinding) {
    generateMethodInfoHeader(methodBinding);
    int methodAttributeOffset = this.contentsOffset;
    int attributeNumber = generateMethodInfoAttributes(methodBinding);
    int codeAttributeOffset = this.contentsOffset;
    attributeNumber++;
    generateCodeAttributeHeader();
    this.codeStream.init(this);
    this.codeStream.generateSyntheticBodyForArrayClone(methodBinding);
    completeCodeAttributeForSyntheticMethod(methodBinding, codeAttributeOffset, ((SourceTypeBinding) methodBinding.declaringClass).scope.referenceCompilationUnit().compilationResult.getLineSeparatorPositions());
    this.contents[methodAttributeOffset++] = (byte) (attributeNumber >> 8);
    this.contents[methodAttributeOffset] = (byte) attributeNumber;
}
method: org.eclipse.jdt.internal.compiler.ClassFile.completeCodeAttributeForSyntheticMethod(org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding;IAI)V4
public void completeCodeAttributeForSyntheticMethod(SyntheticMethodBinding binding, int codeAttributeOffset, int[] startLineIndexes) {
    this.completeCodeAttributeForSyntheticMethod(false, binding, codeAttributeOffset, startLineIndexes);
}

---------------Library-------------------
method: org.eclipse.core.internal.localstore.FileSystemResourceManager.getFileURI(java.net.URI;)java.net.URI;2
private URI getFileURI(URI locationURI) {
    try {
        IFileStore testLocationStore = EFS.getStore(locationURI);
        java.io.File storeAsFile = testLocationStore.toLocalFile(EFS.NONE, null);
        if (storeAsFile != null)
            return URIUtil.toURI(storeAsFile.getAbsolutePath());
    } catch (CoreException e) {
    }
    return null;
}
---------------Client-------------------
method: org.eclipse.core.resources.ResourceAttributes.fromFile(java.io.File;)org.eclipse.core.resources.ResourceAttributes;1
public static ResourceAttributes fromFile(java.io.File file) {
    try {
        return FileUtil.fileInfoToAttributes(EFS.getStore(file.toURI()).fetchInfo());
    } catch (CoreException e) {
        return new  ResourceAttributes();
    }
}
method: org.eclipse.core.filesystem.provider.FileStore.fetchInfo()org.eclipse.core.filesystem.IFileInfo;1
public IFileInfo fetchInfo() {
    try {
        return fetchInfo(EFS.NONE, null);
    } catch (CoreException e) {
        FileInfo result = new  FileInfo(getName());
        result.setExists(false);
        return result;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.debug.ui.JavaDetailFormattersPreferencePage$5.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
@Override
public void keyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        removeTypes();
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea$7.keyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void keyPressed(KeyEvent event) {
    handleKeyPressed(event);
}
method: org.eclipse.team.internal.ccvs.ui.tags.TagSelectionArea.handleKeyPressed(org.eclipse.swt.events.KeyEvent;)V2
public void handleKeyPressed(KeyEvent event) {
    if (event.character == SWT.DEL && event.stateMask == 0) {
        deleteDateTag();
    }
}

---------------Library-------------------
method: org.eclipse.jface.text.source.AnnotationPainter$UnderlineStrategy.applyTextStyle(org.eclipse.swt.custom.StyleRange;org.eclipse.swt.graphics.Color;)V3
public void applyTextStyle(StyleRange styleRange, Color annotationColor) {
    styleRange.underline = true;
    styleRange.underlineStyle = fUnderlineStyle;
    styleRange.underlineColor = annotationColor;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.goForBlockStatementsOrCatchHeader()V1
public void goForBlockStatementsOrCatchHeader() {
    super.goForBlockStatementsOrCatchHeader();
    this.isFirst = true;
}
method: org.eclipse.jdt.internal.compiler.parser.Parser.goForBlockStatementsOrCatchHeader()V1
public void goForBlockStatementsOrCatchHeader() {
    this.firstToken = TokenNameMULTIPLY;
    this.scanner.recordLineSeparator = false;
}

---------------Library-------------------
method: org.eclipse.jface.internal.text.link.contentassist.ContentAssistant2$AutoAssistListener.contains(ACC)Z3
private boolean contains(char[] characters, char character) {
    if (characters != null) {
        for (int i = 0; i < characters.length; i++) {
            if (character == characters[i])
                return true;
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.equinox.p2.internal.repository.comparator.java.CharOperation.indexOf(CAC)I2
public static final int indexOf(char toBeFound, char[] array) {
    return indexOf(toBeFound, array, 0);
}
method: org.eclipse.equinox.p2.internal.repository.comparator.java.CharOperation.indexOf(CACI)I3
public static final int indexOf(char toBeFound, char[] array, int start) {
    for (int i = start; i < array.length; i++) if (toBeFound == array[i])
        return i;
    return -1;
}

---------------Library-------------------
method: org.eclipse.ui.internal.EditorMenuManager.getAllContributedActions()Aorg.eclipse.jface.action.IAction;1
protected IAction[] getAllContributedActions() {
    HashSet set = new  HashSet();
    getAllContributedActions(set);
    return (IAction[]) set.toArray(new IAction[set.size()]);
}
---------------Client-------------------
method: org.eclipse.equinox.p2.engine.ProvisioningContext.getArtifactKeys(org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.equinox.p2.query.IQueryable;2
public IQueryable<IArtifactKey> getArtifactKeys(IProgressMonitor monitor) {
    return QueryUtil.compoundQueryable(getLoadedArtifactRepositories(monitor));
}
method: org.eclipse.equinox.p2.query.QueryUtil.compoundQueryable(java.util.Collection;)org.eclipse.equinox.p2.query.IQueryable;1
public static <T> IQueryable<T> compoundQueryable(Collection<? extends IQueryable<T>> queryables) {
    return new  CompoundQueryable<T>(queryables.toArray(new IQueryable[queryables.size()]));
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.getViewerSorter()org.eclipse.jface.viewers.ViewerSorter;1
public ViewerSorter getViewerSorter() {
    if (viewerSorter == null) {
        viewerSorter = new  ChangeSetModelSorter(this, ChangeSetActionGroup.getSortCriteria(getConfiguration()));
    }
    return viewerSorter;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.ui.editor.sections.DSPropertiesSection.createPropertyElement()org.eclipse.pde.internal.ds.core.IDSProperty;1
private IDSProperty createPropertyElement() {
    IDSDocumentFactory factory = getDSModel().getFactory();
    IDSProperty property = factory.createProperty();
    return property;
}
method: org.eclipse.pde.internal.ds.core.text.DSModel.getFactory()org.eclipse.pde.internal.ds.core.IDSDocumentFactory;1
public IDSDocumentFactory getFactory() {
    if (fFactory == null) {
        fFactory = new  DSDocumentFactory(this);
    }
    return fFactory;
}

---------------Library-------------------
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;Z)java.util.Set;3
public static final Set safeCopy(final Set set, final Class c, final boolean allowNullElements) {
    if (set == null || c == null) {
        throw new  NullPointerException();
    }
    final Set copy = Collections.unmodifiableSet(new  HashSet(set));
    final Iterator iterator = copy.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return set;
}
---------------Client-------------------
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.Collection;java.lang.Class;)java.util.Collection;2
public static Collection safeCopy(Collection collection, Class c) {
    return safeCopy(collection, c, false);
}
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.Collection;java.lang.Class;Z)java.util.Collection;3
public static Collection safeCopy(Collection collection, Class c, boolean allowNullElements) {
    if (collection == null || c == null) {
        throw new  NullPointerException();
    }
    collection = Collections.unmodifiableCollection(new  ArrayList(collection));
    Iterator iterator = collection.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return collection;
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.ui.model.ArtifactRepositoryElement.getQueryable()org.eclipse.equinox.p2.query.IQueryable;1
public IQueryable<?> getQueryable() {
    if (queryable == null)
        queryable = getRepository(new  NullProgressMonitor());
    return queryable;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.tags.TagConfigurationDialog.getStandardButtonData(org.eclipse.swt.widgets.Button;)org.eclipse.swt.layout.GridData;2
private GridData getStandardButtonData(Button button) {
    GridData data = new  GridData();
    data.heightHint = convertVerticalDLUsToPixels(IDialogConstants.BUTTON_HEIGHT);
    return data;
}
method: org.eclipse.jface.dialogs.Dialog.convertVerticalDLUsToPixels(I)I2
protected int convertVerticalDLUsToPixels(int dlus) {
    if (fontMetrics == null) {
        return 0;
    }
    return convertVerticalDLUsToPixels(fontMetrics, dlus);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.flow.ConditionalFlowInfo.asNegatedCondition()org.eclipse.jdt.internal.compiler.flow.FlowInfo;1
public FlowInfo asNegatedCondition() {
    FlowInfo extra = this.initsWhenTrue;
    this.initsWhenTrue = this.initsWhenFalse;
    this.initsWhenFalse = extra;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.jdt.core.dom.ClassInstanceCreation.internalGetName()org.eclipse.jdt.core.dom.Name;1
Name internalGetName() {
    supportedOnlyIn2();
    if (this.typeName == null) {
        synchronized (this) {
            if (this.typeName == null) {
                preLazyInit();
                this.typeName = new  SimpleName(this.ast);
                postLazyInit(this.typeName, NAME_PROPERTY);
            }
        }
    }
    return this.typeName;
}
---------------Client-------------------
method: org.eclipse.jdt.core.dom.ArrayType.getComponentType()org.eclipse.jdt.core.dom.Type;1
public Type getComponentType() {
    supportedOnlyIn2_3_4();
    return internalGetType(COMPONENT_TYPE_PROPERTY);
}
method: org.eclipse.jdt.core.dom.ArrayType.internalGetType(org.eclipse.jdt.core.dom.ChildPropertyDescriptor;)org.eclipse.jdt.core.dom.Type;2
private Type internalGetType(ChildPropertyDescriptor property) {
    if (this.type == null) {
        synchronized (this) {
            if (this.type == null) {
                preLazyInit();
                this.type = new  SimpleType(this.ast);
                postLazyInit(this.type, property);
            }
        }
    }
    return this.type;
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.PropertySheetPage.refresh()V1
public void refresh() {
    if (viewer == null) {
        return;
    }
    viewer.setInput(viewer.getInput());
}
---------------Client-------------------
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.reset()V1
public void reset() {
    eventHandler.reset(getRoots());
}
method: org.eclipse.team.internal.core.subscribers.SubscriberSyncInfoCollector.getRoots()Aorg.eclipse.core.resources.IResource;1
public IResource[] getRoots() {
    if (roots == null) {
        return super.getRoots();
    } else {
        return roots;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgUtils.getResources(Aorg.eclipse.jdt.core.IJavaElement;)Aorg.eclipse.core.resources.IResource;1
public static IResource[] getResources(IJavaElement[] elements) {
    IResource[] result = new IResource[elements.length];
    for (int i = 0; i < elements.length; i++) {
        result[i] = ReorgUtils.getResource(elements[i]);
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ua.ui.editor.toc.details.TocDetails.createFields(org.eclipse.swt.widgets.Composite;)V2
public void createFields(Composite parent) {
    createNameWidget(parent);
    createSpace(parent);
    createAnchorWidget(parent);
    createSpace(parent);
    createPageWidget(parent);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.codeassist.complete.CompletionParser.consumeEnterAnonymousClassBody(Z)V2
protected void consumeEnterAnonymousClassBody(boolean qualified) {
    popElement(K_SELECTOR_QUALIFIER);
    popElement(K_SELECTOR_INVOCATION_TYPE);
    super.consumeEnterAnonymousClassBody(qualified);
}
method: org.eclipse.jdt.internal.codeassist.impl.AssistParser.consumeEnterAnonymousClassBody(Z)V2
protected void consumeEnterAnonymousClassBody(boolean qualified) {
    super.consumeEnterAnonymousClassBody(qualified);
    popElement(K_SELECTOR);
    pushOnElementStack(K_TYPE_DELIMITER);
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.ProjectApiDescription.clean()V1
public synchronized void clean() {
    fPackageMap.clear();
    fPackageTimeStamp = -1L;
    fInSynch = false;
    modified();
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.product.UpdatesSection.refresh()V1
@Override
public void refresh() {
    fRepositoryTable.refresh();
    updateButtons();
    super.refresh();
}
method: org.eclipse.ui.forms.AbstractFormPart.refresh()V1
public void refresh() {
    stale = false;
    dirty = false;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_scrolled_window_set_policy(JII)V3
public static final void gtk_scrolled_window_set_policy(long scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
    lock.lock();
    try {
        _gtk_scrolled_window_set_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.actions.OccurrencesSearchMenuAction$2.menuShown(org.eclipse.swt.events.MenuEvent;)V2
@Override
public void menuShown(MenuEvent e) {
    Menu m = (Menu) e.widget;
    MenuItem[] items = m.getItems();
    for (int i = 0; i < items.length; i++) {
        items[i].dispose();
    }
    fillMenu(m);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.sessionEnded(J)V2
public void sessionEnded(long elapsedTime) {
    fireSessionFinished();
    fSession.swapOut();
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireSessionFinished()V1
private void fireSessionFinished() {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).sessionFinished(fSession);
    }
}

---------------Library-------------------
method: org.eclipse.compare.internal.patch.PatchCompareEditorInput.initializeImageCache(org.eclipse.compare.patch.PatchConfiguration;)org.eclipse.jface.resource.LocalResourceManager;1
private static LocalResourceManager initializeImageCache(PatchConfiguration patchConfiguration) {
    LocalResourceManager imageCache = new  LocalResourceManager(JFaceResources.getResources());
    patchConfiguration.setProperty(IMAGE_CACHE_KEY, imageCache);
    return imageCache;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.ManifestEditor.openWorkspacePlugin(org.eclipse.core.resources.IFile;)org.eclipse.ui.IEditorPart;1
private static IEditorPart openWorkspacePlugin(IFile pluginFile) {
    return openEditor(new  FileEditorInput(pluginFile));
}
method: org.eclipse.pde.internal.ui.editor.plugin.ManifestEditor.openEditor(org.eclipse.ui.IEditorInput;)org.eclipse.ui.IEditorPart;1
public static IEditorPart openEditor(IEditorInput input) {
    if (input != null) {
        try {
            return PDEPlugin.getActivePage().openEditor(input, IPDEUIConstants.MANIFEST_EDITOR_ID);
        } catch (PartInitException e) {
            PDEPlugin.logException(e);
        }
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy.worked(I)V2
protected void worked(int work) {
    if (this.progressMonitor != null) {
        this.progressMonitor.worked(work);
        checkCanceled();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.map.DecoratingObservableMap.values()java.util.Collection;1
public Collection values() {
    getterCalled();
    if (values == null) {
        values = new  BackedCollection(decorated.values());
    }
    return values;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.InternalClassFileEditorInput.getToolTipText()java.lang.String;1
public String getToolTipText() {
    return fClassFile.getType().getFullyQualifiedName();
}
method: org.eclipse.jdt.internal.core.ClassFile.getType()org.eclipse.jdt.core.IType;1
public IType getType() {
    if (this.binaryType == null) {
        this.binaryType = new  BinaryType(this, getTypeName());
    }
    return this.binaryType;
}

---------------Library-------------------
method: org.eclipse.pde.api.tools.internal.ApiJavadocTag.setApplicableTo(IILjava.lang.String;)V4
@Override
public void setApplicableTo(int type, int member, String comment) {
    if (fTagItems == null) {
        fTagItems = new  HashMap<Integer, String>(6);
    }
    fTagItems.put(getTagKey(type, member), comment);
}
---------------Client-------------------
method: org.eclipse.e4.ui.css.core.impl.dom.DocumentCSSImpl.setCSSStyleDeclarationList(java.util.List;II)V4
protected void setCSSStyleDeclarationList(List list, int selectorType, int conditionType) {
    Integer key = getKey(selectorType, conditionType);
    getStyleDeclarationMap().put(key, list);
}
method: org.eclipse.e4.ui.css.core.impl.dom.DocumentCSSImpl.getStyleDeclarationMap()java.util.Map;1
protected Map getStyleDeclarationMap() {
    if (styleDeclarationMap == null) {
        styleDeclarationMap = new  HashMap();
    }
    return styleDeclarationMap;
}

---------------Library-------------------
method: org.eclipse.e4.ui.css.core.impl.dom.CSSStyleDeclarationImpl.getPropertyValue(java.lang.String;)java.lang.String;2
@Override
public String getPropertyValue(String propertyName) {
    CSSProperty property = findCSSProperty(propertyName);
    return (property == null) ? "" : property.getValue().toString();
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.wizards.PsfUrlStore.getSuggestedDefault()java.lang.String;1
public String getSuggestedDefault() {
    return getPrevious();
}
method: org.eclipse.team.internal.ui.wizards.PsfStore.getPrevious()java.lang.String;1
protected String getPrevious() {
    IDialogSettings section = getSettingsSection();
    String retval = section.get(getPreviousTag());
    if (retval == null) {
        retval = "";
    }
    return retval;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.PropertiesFileEditorPreferencePage.dispose()V1
@Override
public void dispose() {
    if (fOverlayStore != null) {
        fOverlayStore.stop();
        fOverlayStore = null;
    }
    fColorManager.dispose();
    super.dispose();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.JavaEditorColoringConfigurationBlock.dispose()V1
@Override
public void dispose() {
    uninstallSemanticHighlighting();
    fColorManager.dispose();
    super.dispose();
}
method: org.eclipse.jdt.internal.ui.preferences.JavaEditorColoringConfigurationBlock.uninstallSemanticHighlighting()V1
private void uninstallSemanticHighlighting() {
    if (fSemanticHighlightingManager != null) {
        fSemanticHighlightingManager.uninstall();
        fSemanticHighlightingManager = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.dialogs.ViewsPreferencePage.createCheckButton(org.eclipse.swt.widgets.Composite;java.lang.String;Z)org.eclipse.swt.widgets.Button;4
private Button createCheckButton(Composite composite, String text, boolean selection) {
    Button button = new  Button(composite, SWT.CHECK);
    GridData data = new  GridData(SWT.BEGINNING, SWT.CENTER, false, false, 2, 1);
    button.setLayoutData(data);
    button.setText(text);
    button.setSelection(selection);
    return button;
}
---------------Client-------------------
method: org.eclipse.team.core.mapping.provider.SynchronizationScopeManager.getUncoveredTraversals(Aorg.eclipse.core.resources.mapping.ResourceTraversal;Aorg.eclipse.core.resources.mapping.ResourceTraversal;)Aorg.eclipse.core.resources.mapping.ResourceTraversal;3
private ResourceTraversal[] getUncoveredTraversals(ResourceTraversal[] newTraversals, ResourceTraversal[] previousTraversals) {
    CompoundResourceTraversal t = new  CompoundResourceTraversal();
    t.addTraversals(newTraversals);
    return t.getUncoveredTraversals(previousTraversals);
}
method: org.eclipse.team.internal.core.mapping.CompoundResourceTraversal.getUncoveredTraversals(Aorg.eclipse.core.resources.mapping.ResourceTraversal;)Aorg.eclipse.core.resources.mapping.ResourceTraversal;2
public synchronized ResourceTraversal[] getUncoveredTraversals(ResourceTraversal[] traversals) {
    CompoundResourceTraversal other = new  CompoundResourceTraversal();
    other.addTraversals(traversals);
    return getUncoveredTraversals(other);
}

---------------Library-------------------
method: org.eclipse.team.ui.SaveablePartDialog.getInitialSize()org.eclipse.swt.graphics.Point;1
protected Point getInitialSize() {
    Point initialSize = super.getInitialSize();
    if (hasSettings) {
        return initialSize;
    }
    int width = 0;
    int height = 0;
    Shell shell = getParentShell();
    if (shell != null) {
        Point parentSize = shell.getSize();
        width = parentSize.x - 100;
        height = parentSize.y - 100;
    }
    if (width < 700)
        width = 700;
    if (height < 500)
        height = 500;
    return new  Point(width, height);
}
---------------Client-------------------
method: org.eclipse.compare.internal.CompareDialog.getInitialSize()org.eclipse.swt.graphics.Point;1
protected Point getInitialSize() {
    Point initialSize = super.getInitialSize();
    if (hasSettings) {
        return initialSize;
    }
    return getDefaultSize();
}
method: org.eclipse.compare.internal.CompareDialog.getDefaultSize()org.eclipse.swt.graphics.Point;1
protected Point getDefaultSize() {
    int width = 0;
    int height = 0;
    Shell shell = getParentShell();
    if (shell != null) {
        Point parentSize = shell.getSize();
        width = parentSize.x - 100;
        height = parentSize.y - 100;
    }
    if (width < 700)
        width = 700;
    if (height < 500)
        height = 500;
    return new  Point(width, height);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.Checks.isEnumCase(org.eclipse.jdt.core.dom.ASTNode;)Z1
public static boolean isEnumCase(ASTNode node) {
    if (node instanceof SwitchCase) {
        final SwitchCase caze = (SwitchCase) node;
        final Expression expression = caze.getExpression();
        if (expression instanceof Name) {
            final Name name = (Name) expression;
            final IBinding binding = name.resolveBinding();
            if (binding instanceof IVariableBinding) {
                IVariableBinding variableBinding = (IVariableBinding) binding;
                return variableBinding.isEnumConstant();
            }
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.pde.internal.core.ClasspathUtilCore.hasExtensibleAPI(org.eclipse.pde.core.plugin.IPluginModelBase;)Z1
public static boolean hasExtensibleAPI(IPluginModelBase model) {
    IPluginBase pluginBase = model.getPluginBase();
    if (pluginBase instanceof IPlugin)
        return hasExtensibleAPI((IPlugin) pluginBase);
    return false;
}
method: org.eclipse.pde.internal.core.ClasspathUtilCore.hasExtensibleAPI(org.eclipse.pde.core.plugin.IPlugin;)Z1
private static boolean hasExtensibleAPI(IPlugin plugin) {
    if (plugin instanceof Plugin)
        return ((Plugin) plugin).hasExtensibleAPI();
    if (plugin instanceof BundlePlugin)
        return ((BundlePlugin) plugin).hasExtensibleAPI();
    return false;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.editor.plugin.GeneralInfoSection.removeListeners()V1
protected void removeListeners() {
    IBaseModel model = getPage().getModel();
    if (model instanceof IModelChangeProvider)
        ((IModelChangeProvider) model).removeModelChangedListener(this);
}
---------------Client-------------------
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.OpenEvent;)V2
protected void handleOpen(OpenEvent event) {
    handleOpen(event.getSelection());
}
method: org.eclipse.ui.views.navigator.ResourceNavigator.handleOpen(org.eclipse.jface.viewers.ISelection;)V2
protected void handleOpen(ISelection selection) {
    if (selection instanceof IStructuredSelection) {
        getActionGroup().runDefaultAction((IStructuredSelection) selection);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.hasAmbiguousProposals(Aorg.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal$TypeArgumentProposal;)Z2
private boolean hasAmbiguousProposals(TypeArgumentProposal[] typeArgumentProposals) {
    boolean hasAmbiguousProposals = false;
    for (int i = 0; i < typeArgumentProposals.length; i++) {
        if (typeArgumentProposals[i].isAmbiguous()) {
            hasAmbiguousProposals = true;
            break;
        }
    }
    return hasAmbiguousProposals;
}
---------------Client-------------------
method: org.eclipse.jface.text.link.LinkedModeModel.hasInstalledModel(Aorg.eclipse.jface.text.IDocument;)Z1
public static boolean hasInstalledModel(IDocument[] documents) {
    return LinkedModeManager.hasManager(documents);
}
method: org.eclipse.jface.text.link.LinkedModeManager.hasManager(Aorg.eclipse.jface.text.IDocument;)Z1
public static boolean hasManager(IDocument[] documents) {
    for (int i = 0; i < documents.length; i++) {
        if (hasManager(documents[i]))
            return true;
    }
    return false;
}

---------------Library-------------------
method: org.eclipse.ui.views.markers.internal.MarkerList.getIMarkers()Aorg.eclipse.core.resources.IMarker;1
public IMarker[] getIMarkers() {
    IMarker[] iMarkers = new IMarker[markers.length];
    for (int i = 0; i < markers.length; i++) {
        iMarkers[i] = markers[i].getMarker();
    }
    return iMarkers;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.TagInRepositoryOperation.getTagSource()org.eclipse.team.internal.ccvs.ui.tags.TagSource;1
public TagSource getTagSource() {
    return TagSource.create(getCVSResources());
}
method: org.eclipse.team.internal.ccvs.ui.operations.RemoteOperation.getCVSResources()Aorg.eclipse.team.internal.ccvs.core.ICVSResource;1
public ICVSResource[] getCVSResources() {
    ICVSResource[] cvsResources = new ICVSResource[remoteResources.length];
    for (int i = 0; i < remoteResources.length; i++) {
        cvsResources[i] = remoteResources[i];
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_window_resize(JII)V3
public static final void gtk_window_resize(long handle, int x, int y) {
    lock.lock();
    try {
        _gtk_window_resize(handle, x, y);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.views.ViewItem.setSkipped()V1
void setSkipped() {
    isSkipped = true;
    checkDoneLabel.setImage(getSkipImage());
    if (initialized) {
        checkDoneLabel.getParent().layout();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.dialogs.TableTextCellEditor.performSelectAll()V1
@Override
public void performSelectAll() {
    text.selectAll();
    checkSelection();
    checkDeleteable();
}
method: org.eclipse.jdt.internal.ui.dialogs.TableTextCellEditor.checkDeleteable()V1
protected void checkDeleteable() {
    boolean oldIsDeleteable = isDeleteable;
    isDeleteable = isDeleteEnabled();
    if (oldIsDeleteable != isDeleteable) {
        fireEnablementChanged(DELETE);
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.exports.FeatureExportWizardPage.saveSettings(org.eclipse.jface.dialogs.IDialogSettings;)V2
protected void saveSettings(IDialogSettings settings) {
    super.saveSettings(settings);
    if (fJNLPTab != null)
        fJNLPTab.saveSettings(settings);
}
---------------Client-------------------
method: org.eclipse.core.internal.refresh.RefreshManager.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (refreshJob != null)
        refreshJob.refresh(resource);
}
method: org.eclipse.core.internal.refresh.RefreshJob.refresh(org.eclipse.core.resources.IResource;)V2
public void refresh(IResource resource) {
    if (resource == null)
        return;
    addRequest(resource);
    schedule(UPDATE_DELAY);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.filters.EmptyLibraryContainerFilter.select(org.eclipse.jface.viewers.Viewer;java.lang.Object;java.lang.Object;)Z4
@Override
public boolean select(Viewer viewer, Object parentElement, Object element) {
    if (element instanceof PackageFragmentRootContainer && viewer instanceof ProblemTreeViewer) {
        return ((ProblemTreeViewer) viewer).hasFilteredChildren(element);
    }
    return true;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.importexport.internal.wizard.AbstractPage$11.hasChildren(java.lang.Object;)Z2
@Override
public boolean hasChildren(Object element) {
    if (element instanceof InstalledIUElement)
        return false;
    return super.hasChildren(element);
}
method: org.eclipse.equinox.internal.p2.ui.viewers.ProvElementContentProvider.hasChildren(java.lang.Object;)Z2
public boolean hasChildren(Object element) {
    if (element instanceof ProvElement)
        return ((ProvElement) element).hasChildren(element);
    return false;
}

---------------Library-------------------
method: org.eclipse.jface.layout.GridDataFactory.indent(II)org.eclipse.jface.layout.GridDataFactory;3
public GridDataFactory indent(int hIndent, int vIndent) {
    data.horizontalIndent = hIndent;
    data.verticalIndent = vIndent;
    return this;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.CellData.indent(org.eclipse.swt.graphics.Point;)org.eclipse.ui.internal.layout.CellData;2
public CellData indent(Point indent) {
    return this.indent(indent.x, indent.y);
}
method: org.eclipse.ui.internal.layout.CellData.indent(II)org.eclipse.ui.internal.layout.CellData;3
public CellData indent(int horizontalIndent, int verticalIndent) {
    this.horizontalIndent = horizontalIndent;
    this.verticalIndent = verticalIndent;
    return this;
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractDocumentProvider.fireElementContentAboutToBeReplaced(java.lang.Object;)V2
protected void fireElementContentAboutToBeReplaced(Object element) {
    Iterator e = new  ArrayList(fElementStateListeners).iterator();
    while (e.hasNext()) {
        IElementStateListener l = (IElementStateListener) e.next();
        l.elementContentAboutToBeReplaced(element);
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.CommitCommentArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    super.firePropertyChangeChange(property, oldValue, newValue);
}
method: org.eclipse.team.internal.ui.dialogs.DialogArea.firePropertyChangeChange(java.lang.String;java.lang.Object;java.lang.Object;)V4
protected void firePropertyChangeChange(String property, Object oldValue, Object newValue) {
    PropertyChangeEvent event = new  PropertyChangeEvent(this, property, oldValue, newValue);
    for (Iterator iter = listeners.iterator(); iter.hasNext(); ) {
        IPropertyChangeListener listener = (IPropertyChangeListener) iter.next();
        listener.propertyChange(event);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.actions.SurroundWithTemplateMenuAction.getMenu(org.eclipse.swt.widgets.Menu;)org.eclipse.swt.widgets.Menu;2
public Menu getMenu(Menu parent) {
    setMenu(new  Menu(parent));
    fillMenu(fMenu);
    initMenu();
    return fMenu;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.GenerateHashCodeEqualsOperation.getReturnFalse()org.eclipse.jdt.core.dom.ReturnStatement;1
private ReturnStatement getReturnFalse() {
    ReturnStatement falseReturn = fAst.newReturnStatement();
    falseReturn.setExpression(fAst.newBooleanLiteral(false));
    return falseReturn;
}
method: org.eclipse.jdt.core.dom.AST.newBooleanLiteral(Z)org.eclipse.jdt.core.dom.BooleanLiteral;2
public BooleanLiteral newBooleanLiteral(boolean value) {
    BooleanLiteral result = new  BooleanLiteral(this);
    result.setBooleanValue(value);
    return result;
}

---------------Library-------------------
method: org.eclipse.ui.internal.WorkbenchWindowConfigurer.getData(java.lang.String;)java.lang.Object;2
@Override
public Object getData(String key) {
    if (key == null) {
        throw new  IllegalArgumentException();
    }
    return extraData.get(key);
}
---------------Client-------------------
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findClass(java.lang.String;)java.lang.Class;2
public Class<?> findClass(String name) throws ClassNotFoundException {
    Class<?> result = findLocalClass(name);
    if (result == null)
        throw new  ClassNotFoundException(name);
    return result;
}
method: org.eclipse.osgi.internal.loader.SystemBundleLoader.findLocalClass(java.lang.String;)java.lang.Class;2
public Class<?> findLocalClass(String name) {
    try {
        return classLoader.loadClass(name);
    } catch (ClassNotFoundException e) {
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.JavaOutlinePage.doPropertyChange(org.eclipse.jface.util.PropertyChangeEvent;)V2
private void doPropertyChange(PropertyChangeEvent event) {
    if (fOutlineViewer != null) {
        if (MembersOrderPreferenceCache.isMemberOrderProperty(event.getProperty())) {
            fOutlineViewer.refresh(false);
        }
    }
}
---------------Client-------------------
method: org.eclipse.jface.viewers.TreeViewer.handleTreeCollapse(org.eclipse.swt.events.TreeEvent;)V2
@Override
protected void handleTreeCollapse(TreeEvent event) {
    if (isCellEditorActive()) {
        applyEditorValue();
    }
    super.handleTreeCollapse(event);
}
method: org.eclipse.jface.viewers.ColumnViewer.applyEditorValue()V1
protected void applyEditorValue() {
    if (viewerEditor != null) {
        viewerEditor.applyEditorValue();
    }
}

---------------Library-------------------
method: org.eclipse.equinox.internal.util.xml.XmlSerializer.closeOpeningTag()V1
private void closeOpeningTag() throws IOException {
    if (!this.closed) {
        writeAttributes();
        closed = true;
        writer.write(">");
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.help.WorkbenchHelpSystem.search(java.lang.String;)V2
@Override
public void search(String expression) {
    AbstractHelpUI helpUI = getHelpUI();
    if (helpUI != null) {
        helpUI.search(expression);
    }
}
method: org.eclipse.ui.internal.help.WorkbenchHelpSystem.getHelpUI()org.eclipse.ui.help.AbstractHelpUI;1
private AbstractHelpUI getHelpUI() {
    if (!isInitialized) {
        isInitialized = initializePluggableHelpUI();
    }
    return pluggableHelpUI;
}

---------------Library-------------------
method: org.eclipse.ui.views.properties.PropertySheetEntry.fireChildEntriesChanged()V1
private void fireChildEntriesChanged() {
    Object[] array = getListeners();
    for (int i = 0; i < array.length; i++) {
        IPropertySheetEntryListener listener = (IPropertySheetEntryListener) array[i];
        listener.childEntriesChanged(this);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.testEnded(org.eclipse.jdt.internal.junit.model.TestCaseElement;)V2
public void testEnded(TestCaseElement testCaseElement) {
    fireTestCaseFinished(testCaseElement);
}
method: org.eclipse.jdt.internal.junit.model.TestRunListenerAdapter.fireTestCaseFinished(org.eclipse.jdt.junit.model.ITestCaseElement;)V2
private void fireTestCaseFinished(ITestCaseElement testCaseElement) {
    Object[] listeners = getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((TestRunListener) listeners[i]).testCaseFinished(testCaseElement);
    }
}

---------------Library-------------------
method: org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yyclose()V1
public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;
    zzEndRead = zzStartRead;
    if (zzReader != null)
        zzReader.close();
}
---------------Client-------------------
method: org.apache.batik.css.parser.Parser.setLocale(java.util.Locale;)V2
public void setLocale(Locale locale) throws CSSException {
    localizableSupport.setLocale(locale);
}
method: org.apache.batik.i18n.LocalizableSupport.setLocale(java.util.Locale;)V2
public void setLocale(Locale l) {
    if (locale != l) {
        locale = l;
        resourceBundles.clear();
        lastResourceClass = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.util.Util.compare(java.lang.Comparable;java.lang.Comparable;)I2
public static int compare(Comparable left, Comparable right) {
    if (left == null && right == null) {
        return 0;
    } else if (left == null) {
        return -1;
    } else if (right == null) {
        return 1;
    } else {
        return left.compareTo(right);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equals(org.eclipse.core.runtime.IPath;org.eclipse.core.runtime.IPath;)Z3
protected boolean equals(IPath path1, IPath path2) {
    return equalsOrNull(path1, path2);
}
method: org.eclipse.jdt.internal.debug.ui.jres.LibraryStandin.equalsOrNull(java.lang.Object;java.lang.Object;)Z3
private boolean equalsOrNull(Object o1, Object o2) {
    if (o1 == null) {
        return o2 == null;
    }
    if (o2 == null) {
        return false;
    }
    return o1.equals(o2);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.QueryResult.iteratorToSet(java.util.Iterator;)java.util.Set;2
private Set<T> iteratorToSet(Iterator<T> iter) {
    HashSet<T> set = new  HashSet<T>();
    while (iter.hasNext()) set.add(iter.next());
    return set;
}
---------------Client-------------------
method: org.eclipse.emf.common.util.ECollections.toEList(java.util.Iterator;)org.eclipse.emf.common.util.EList;1
public static <T> EList<T> toEList(Iterator<? extends T> iterator) {
    return ECollections.newBasicEList(iterator);
}
method: org.eclipse.emf.common.util.ECollections.newBasicEList(java.util.Iterator;)org.eclipse.emf.common.util.BasicEList;1
public static <T> BasicEList<T> newBasicEList(Iterator<? extends T> iterator) {
    BasicEList<T> result = new  BasicEList<T>();
    while (iterator.hasNext()) {
        result.add(iterator.next());
    }
    return result;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.ResolvedSourceMethod.unresolved()org.eclipse.jdt.internal.core.JavaElement;1
public JavaElement unresolved() {
    SourceRefElement handle = new  SourceMethod(this.parent, this.name, this.parameterTypes);
    handle.occurrenceCount = this.occurrenceCount;
    return handle;
}
---------------Client-------------------
method: org.eclipse.jface.layout.RowDataFactory.create()org.eclipse.swt.layout.RowData;1
public RowData create() {
    return copyData(data);
}
method: org.eclipse.jface.layout.RowDataFactory.copyData(org.eclipse.swt.layout.RowData;)org.eclipse.swt.layout.RowData;1
public static RowData copyData(RowData data) {
    RowData newData = new  RowData(data.width, data.height);
    newData.exclude = data.exclude;
    return newData;
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.FindElementDialog.createDialogArea(org.eclipse.swt.widgets.Composite;)org.eclipse.swt.widgets.Control;2
@Override
protected Control createDialogArea(Composite parent) {
    Control comp = super.createDialogArea(parent);
    PlatformUI.getWorkbench().getHelpSystem().setHelp(comp, IDebugHelpContextIds.FIND_ELEMENT_DIALOG);
    return comp;
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;)java.lang.String;3
protected String getTemplate(String name, ICompilationUnit parentCU) {
    return getTemplate(name, parentCU, 0);
}
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getTemplate(java.lang.String;org.eclipse.jdt.core.ICompilationUnit;I)java.lang.String;4
protected String getTemplate(String name, ICompilationUnit parentCU, int pos) {
    try {
        Template template = JavaPlugin.getDefault().getTemplateStore().findTemplate(name);
        if (template != null) {
            return JavaContext.evaluateTemplate(template, parentCU, pos);
        }
    } catch (CoreException e) {
        JavaPlugin.log(e);
    } catch (BadLocationException e) {
        JavaPlugin.log(e);
    } catch (TemplateException e) {
        JavaPlugin.log(e);
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.surround.ExceptionAnalyzer.handleExceptions(org.eclipse.jdt.core.dom.IMethodBinding;org.eclipse.jdt.core.dom.ASTNode;)Z3
private boolean handleExceptions(IMethodBinding binding, ASTNode node) {
    if (binding == null)
        return true;
    ITypeBinding[] exceptions = binding.getExceptionTypes();
    for (int i = 0; i < exceptions.length; i++) {
        addException(exceptions[i], node.getAST());
    }
    return true;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.ExceptionAnalyzer.handleExceptions(org.eclipse.jdt.core.dom.IMethodBinding;org.eclipse.jdt.core.dom.ASTNode;)Z3
private boolean handleExceptions(IMethodBinding binding, ASTNode node) {
    if (binding == null)
        return true;
    addExceptions(binding.getExceptionTypes(), node.getAST());
    return true;
}
method: org.eclipse.jdt.internal.corext.refactoring.util.AbstractExceptionAnalyzer.addExceptions(Aorg.eclipse.jdt.core.dom.ITypeBinding;org.eclipse.jdt.core.dom.AST;)V3
protected void addExceptions(ITypeBinding[] exceptions, AST ast) {
    if (exceptions == null)
        return;
    for (int i = 0; i < exceptions.length; i++) {
        addException(exceptions[i], ast);
    }
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.repository.Credentials.getRemembered()java.util.Map;0
private static synchronized Map<String, HostEntry> getRemembered() {
    if (remembered == null)
        remembered = Collections.synchronizedMap(new  HashMap<String, HostEntry>());
    return remembered;
}
---------------Client-------------------
method: org.eclipse.ui.internal.themes.WorkbenchThemeManager$ThemeRegistryModifiedHandler.getContext()org.eclipse.e4.core.contexts.IEclipseContext;1
private IEclipseContext getContext() {
    return WorkbenchThemeManager.getInstance().context;
}
method: org.eclipse.ui.internal.themes.WorkbenchThemeManager.getInstance()org.eclipse.ui.internal.themes.WorkbenchThemeManager;0
public static synchronized WorkbenchThemeManager getInstance() {
    if (instance == null) {
        instance = new  WorkbenchThemeManager();
    }
    return instance;
}

---------------Library-------------------
method: org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.contains(ACC)Z3
private boolean contains(char[] characters, char character) {
    if (characters != null) {
        for (int i = 0; i < characters.length; i++) {
            if (character == characters[i])
                return true;
        }
    }
    return false;
}
---------------Client-------------------
method: org.eclipse.equinox.p2.internal.repository.comparator.java.CharOperation.indexOf(CAC)I2
public static final int indexOf(char toBeFound, char[] array) {
    return indexOf(toBeFound, array, 0);
}
method: org.eclipse.equinox.p2.internal.repository.comparator.java.CharOperation.indexOf(CACI)I3
public static final int indexOf(char toBeFound, char[] array, int start) {
    for (int i = start; i < array.length; i++) if (toBeFound == array[i])
        return i;
    return -1;
}

---------------Library-------------------
method: org.eclipse.jface.viewers.StructuredViewer$ColorAndFontCollector.clear()V1
public void clear() {
    foreground = null;
    background = null;
    font = null;
    usedDecorators = false;
}
---------------Client-------------------
method: org.eclipse.ui.internal.layout.SizeCache.flush()V1
public void flush() {
    flush(true);
}
method: org.eclipse.ui.internal.layout.SizeCache.flush(Z)V2
public void flush(boolean recursive) {
    preferredSize = null;
    cachedWidth = null;
    cachedHeight = null;
    this.flushChildren = recursive;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.correction.ChooseManifestClassResolution.createChange(org.eclipse.pde.internal.core.text.bundle.BundleModel;)V2
protected void createChange(BundleModel model) {
    IManifestHeader header = model.getBundle().getManifestHeader(fHeader);
    String type = PDEJavaHelperUI.selectType(fResource, IJavaElementSearchConstants.CONSIDER_CLASSES);
    if (type != null)
        header.setValue(type);
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider$1.defaultSetChanged(org.eclipse.team.internal.core.subscribers.ChangeSet;org.eclipse.team.internal.core.subscribers.ChangeSet;)V3
public void defaultSetChanged(final ChangeSet previousDefault, final ChangeSet set) {
    refreshLabel(previousDefault);
    refreshLabel(set);
}
method: org.eclipse.team.internal.ui.synchronize.ChangeSetModelProvider.refreshLabel(org.eclipse.team.internal.core.subscribers.ChangeSet;)V2
public void refreshLabel(ChangeSet set) {
    ISynchronizeModelElement node = getModelElement(set);
    if (node != null) {
        getViewer().refresh(node);
    }
}

---------------Library-------------------
method: org.eclipse.jface.viewers.AbstractTreeViewer.remove(java.lang.Object;Ajava.lang.Object;)V3
public void remove(final Object parent, final Object[] elements) {
    assertElementsNotNull(elements);
    if (elements.length == 0) {
        return;
    }
    if (checkBusy())
        return;
    preservingSelection(new  Runnable() {

        @Override
        public void run() {
            internalRemove(parent, elements);
        }
    });
}
---------------Client-------------------
method: org.eclipse.ui.navigator.CommonViewer.removeWithoutRefresh(Ajava.lang.Object;)V2
protected void removeWithoutRefresh(Object[] elements) {
    super.remove(elements);
}
method: org.eclipse.jface.viewers.AbstractTreeViewer.remove(Ajava.lang.Object;)V2
public void remove(final Object[] elementsOrTreePaths) {
    assertElementsNotNull(elementsOrTreePaths);
    if (elementsOrTreePaths.length == 0) {
        return;
    }
    if (checkBusy())
        return;
    preservingSelection(new  Runnable() {

        @Override
        public void run() {
            internalRemove(elementsOrTreePaths);
        }
    });
}

---------------Library-------------------
method: org.eclipse.jdt.junit.wizards.NewTestCaseWizardPageTwo.createSpacer(org.eclipse.swt.widgets.Composite;)V2
private void createSpacer(Composite container) {
    Label spacer = new  Label(container, SWT.NONE);
    GridData data = new  GridData();
    data.horizontalSpan = 2;
    data.horizontalAlignment = GridData.FILL;
    data.verticalAlignment = GridData.BEGINNING;
    data.heightHint = 4;
    spacer.setLayoutData(data);
}
---------------Client-------------------
method: org.eclipse.ui.internal.dialogs.EditorsPreferencePage.createSpace(org.eclipse.swt.widgets.Composite;)V2
protected void createSpace(Composite parent) {
    WorkbenchPreferencePage.createSpace(parent);
}
method: org.eclipse.ui.internal.dialogs.WorkbenchPreferencePage.createSpace(org.eclipse.swt.widgets.Composite;)V1
protected static void createSpace(Composite parent) {
    Label vfiller = new  Label(parent, SWT.LEFT);
    GridData gridData = new  GridData();
    gridData = new  GridData();
    gridData.horizontalAlignment = GridData.BEGINNING;
    gridData.grabExcessHorizontalSpace = false;
    gridData.verticalAlignment = GridData.CENTER;
    gridData.grabExcessVerticalSpace = false;
    vfiller.setLayoutData(gridData);
}

---------------Library-------------------
method: org.eclipse.ui.texteditor.AbstractTextEditor.updatePropertyDependentActions()V1
protected void updatePropertyDependentActions() {
    if (fPropertyActions != null) {
        Iterator e = fPropertyActions.iterator();
        while (e.hasNext()) updateAction((String) e.next());
    }
}
---------------Client-------------------
method: org.apache.lucene.index.IndexReader.readerFinished()V1
protected void readerFinished() {
    notifyReaderFinishedListeners();
}
method: org.apache.lucene.index.IndexReader.notifyReaderFinishedListeners()V1
protected void notifyReaderFinishedListeners() {
    if (readerFinishedListeners != null) {
        for (ReaderFinishedListener listener : readerFinishedListeners) {
            listener.finished(this);
        }
    }
}

---------------Library-------------------
method: org.eclipse.swt.browser.DownloadFactory.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.hamcrest.core.AnyOf.anyOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.core.AnyOf;6
@Factory
public static <T> AnyOf<T> anyOf(Matcher<T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth, Matcher<? super T> sixth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>();
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    matchers.add(sixth);
    return anyOf(matchers);
}
---------------Client-------------------
method: org.hamcrest.CoreMatchers.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;6
public static <T> org.hamcrest.Matcher<T> allOf(org.hamcrest.Matcher<? super T> first, org.hamcrest.Matcher<? super T> second, org.hamcrest.Matcher<? super T> third, org.hamcrest.Matcher<? super T> fourth, org.hamcrest.Matcher<? super T> fifth, org.hamcrest.Matcher<? super T> sixth) {
    return org.hamcrest.core.AllOf.<T>allOf(first, second, third, fourth, fifth, sixth);
}
method: org.hamcrest.core.AllOf.allOf(org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;org.hamcrest.Matcher;)org.hamcrest.Matcher;6
@Factory
public static <T> Matcher<T> allOf(Matcher<? super T> first, Matcher<? super T> second, Matcher<? super T> third, Matcher<? super T> fourth, Matcher<? super T> fifth, Matcher<? super T> sixth) {
    List<Matcher<? super T>> matchers = new  ArrayList<Matcher<? super T>>(6);
    matchers.add(first);
    matchers.add(second);
    matchers.add(third);
    matchers.add(fourth);
    matchers.add(fifth);
    matchers.add(sixth);
    return allOf(matchers);
}

---------------Library-------------------
method: org.eclipse.equinox.internal.ds.Resolver.removeFromSatisfiedList(org.eclipse.equinox.internal.ds.model.ServiceComponentProp;)V2
public void removeFromSatisfiedList(ServiceComponentProp scp) {
    Vector tmp = new  Vector();
    tmp.addElement(scp);
    mgr.enqueueWork(this, Resolver.DISPOSE, tmp, false);
}
---------------Client-------------------
method: org.eclipse.equinox.internal.frameworkadmin.equinox.EquinoxBundlesState.composeNewState(org.eclipse.equinox.internal.provisional.frameworkadmin.LauncherData;org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;Aorg.eclipse.equinox.frameworkadmin.BundleInfo;)V4
private void composeNewState(LauncherData launcherData, ConfigData configData, BundleInfo[] bInfos) {
    this.composeNewState(launcherData, configData, configData.getProperties(), bInfos);
}
method: org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData.getProperties()java.util.Properties;1
public Properties getProperties() {
    Properties ret = new  Properties();
    ret.putAll(properties);
    return ret;
}

---------------Library-------------------
method: org.eclipse.ui.internal.actions.AbstractWorkingSetPulldownDelegate.dispose()V1
@Override
public void dispose() {
    if (menubarMenu != null) {
        menubarMenu.dispose();
        menubarMenu = null;
    }
    if (toolbarMenu != null) {
        toolbarMenu.dispose();
        toolbarMenu = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.preferences.MockupPreferenceStore.firePropertyChangeEvent(java.lang.Object;java.lang.String;java.lang.Object;java.lang.Object;)V5
public void firePropertyChangeEvent(Object source, String name, Object oldValue, Object newValue) {
    PropertyChangeEvent event = new  PropertyChangeEvent(source, name, oldValue, newValue);
    Object[] listeners = fListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) ((IPropertyChangeListener) listeners[i]).propertyChange(event);
}
---------------Client-------------------
method: org.eclipse.ui.texteditor.ChainedPreferenceStore.firePropertyChangeEvent(java.lang.String;java.lang.Object;java.lang.Object;)V4
public void firePropertyChangeEvent(String name, Object oldValue, Object newValue) {
    firePropertyChangeEvent(new  PropertyChangeEvent(this, name, oldValue, newValue));
}
method: org.eclipse.ui.texteditor.ChainedPreferenceStore.firePropertyChangeEvent(org.eclipse.jface.util.PropertyChangeEvent;)V2
private void firePropertyChangeEvent(PropertyChangeEvent event) {
    Object[] listeners = fClientListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) ((IPropertyChangeListener) listeners[i]).propertyChange(event);
}

---------------Library-------------------
method: org.eclipse.ui.internal.navigator.filters.CustomizationTab.createInstructionsLabel(java.lang.String;)V2
protected void createInstructionsLabel(String labelText) {
    Label extensionsInstructionLabel = new  Label(this, SWT.BOLD | SWT.WRAP);
    GridData gridData = new  GridData(GridData.FILL_HORIZONTAL | GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
    extensionsInstructionLabel.setLayoutData(gridData);
    extensionsInstructionLabel.setFont(getFont());
    extensionsInstructionLabel.setText(labelText);
}
---------------Client-------------------
method: org.apache.lucene.search.FieldCache$CacheEntry.estimateSize()V1
public void estimateSize() {
    estimateSize(new  RamUsageEstimator(false));
}
method: org.apache.lucene.search.FieldCache$CacheEntry.estimateSize(org.apache.lucene.util.RamUsageEstimator;)V2
public void estimateSize(RamUsageEstimator ramCalc) {
    long size = ramCalc.estimateRamUsage(getValue());
    setEstimatedSize(RamUsageEstimator.humanReadableUnits(size, new  DecimalFormat("0.#")));
}

---------------Library-------------------
method: org.eclipse.jdt.ui.wizards.NewTypeWizardPage.getSuperInterfaces()java.util.List;1
public List<String> getSuperInterfaces() {
    List<InterfaceWrapper> interfaces = fSuperInterfacesDialogField.getElements();
    ArrayList<String> result = new  ArrayList<String>(interfaces.size());
    for (Iterator<InterfaceWrapper> iter = interfaces.iterator(); iter.hasNext(); ) {
        InterfaceWrapper wrapper = iter.next();
        result.add(wrapper.interfaceName);
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.core.commands.CommandManager.getDefinedCommandIds()java.util.Set;1
public final Set getDefinedCommandIds() {
    return getDefinedHandleObjectIds();
}
method: org.eclipse.core.commands.common.HandleObjectManager.getDefinedHandleObjectIds()java.util.Set;1
protected final Set getDefinedHandleObjectIds() {
    final HashSet definedHandleObjectIds = new  HashSet(definedHandleObjects.size());
    final Iterator handleObjectItr = definedHandleObjects.iterator();
    while (handleObjectItr.hasNext()) {
        final HandleObject handleObject = (HandleObject) handleObjectItr.next();
        final String id = handleObject.getId();
        definedHandleObjectIds.add(id);
    }
    return definedHandleObjectIds;
}

---------------Library-------------------
method: org.eclipse.pde.ui.templates.AbstractChoiceOption.getChoice()java.lang.String;1
public String getChoice() {
    return getValue() != null ? getValue().toString() : null;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.CVSSyncInfo.getLocalContentIdentifier()java.lang.String;1
public String getLocalContentIdentifier() {
    ResourceSyncInfo info = getSyncInfoForLocal(getCVSFile());
    return info != null ? info.getRevision() : null;
}
method: org.eclipse.team.internal.ccvs.core.CVSSyncInfo.getSyncInfoForLocal(org.eclipse.team.internal.ccvs.core.ICVSFile;)org.eclipse.team.internal.ccvs.core.syncinfo.ResourceSyncInfo;1
private static ResourceSyncInfo getSyncInfoForLocal(ICVSFile cvsFile) {
    if (cvsFile == null)
        return null;
    try {
        return cvsFile.getSyncInfo();
    } catch (CVSException e) {
        CVSProviderPlugin.log(e);
        return null;
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_drag_status(JII)V3
public static final void gdk_drag_status(long context, int action, int time) {
    lock.lock();
    try {
        _gdk_drag_status(context, action, time);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.viewers.model.TreeModelContentProvider.notifyUpdate(ILorg.eclipse.debug.internal.ui.viewers.model.provisional.IViewerUpdate;)V3
private void notifyUpdate(final int type, final IViewerUpdate update) {
    if (!fUpdateListeners.isEmpty()) {
        Object[] listeners = fUpdateListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            final IViewerUpdateListener listener = (IViewerUpdateListener) listeners[i];
            SafeRunner.run(new  ISafeRunnable() {

                @Override
                public void run() throws Exception {
                    switch(type) {
                        case UPDATE_SEQUENCE_BEGINS:
                            listener.viewerUpdatesBegin();
                            break;
                        case UPDATE_SEQUENCE_COMPLETE:
                            listener.viewerUpdatesComplete();
                            break;
                        case UPDATE_BEGINS:
                            listener.updateStarted(update);
                            break;
                        case UPDATE_COMPLETE:
                            listener.updateComplete(update);
                            break;
                        default:
                            break;
                    }
                }

                @Override
                public void handleException(Throwable exception) {
                    DebugUIPlugin.log(exception);
                }
            });
        }
    }
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.history.CompareFileRevisionEditorInput$MyDiffNode.fireChange()V1
public void fireChange() {
    super.fireChange();
}
method: org.eclipse.team.internal.ui.mapping.AbstractCompareInput.fireChange()V1
protected void fireChange() {
    if (!listeners.isEmpty()) {
        Object[] allListeners = listeners.getListeners();
        for (int i = 0; i < allListeners.length; i++) {
            final ICompareInputChangeListener listener = (ICompareInputChangeListener) allListeners[i];
            SafeRunner.run(new  ISafeRunnable() {

                public void run() throws Exception {
                    listener.compareInputChanged(AbstractCompareInput.this);
                }

                public void handleException(Throwable exception) {
                }
            });
        }
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.memory.RenderingViewPane.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
@Override
public void widgetSelected(SelectionEvent e) {
    if (getTopMemoryTab() == null) {
        return;
    }
    IMemoryRendering rendering = getTopMemoryTab().getRendering();
    if (rendering != null) {
        fSelectionProvider.setSelection(new  StructuredSelection(rendering));
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.infoviews.JavadocView.addLinkListener(org.eclipse.swt.browser.Browser;)V2
private void addLinkListener(Browser browser) {
    browser.addLocationListener(JavaElementLinks.createLocationListener(new  JavaElementLinks.ILinkHandler() {

        public void handleDeclarationLink(IJavaElement target) {
            try {
                JavadocHover.openDeclaration(target);
            } catch (PartInitException e) {
                JavaPlugin.log(e);
            } catch (JavaModelException e) {
                JavaPlugin.log(e);
            }
        }

        public boolean handleExternalLink(final URL url, Display display) {
            if (fCurrent == null || !(fCurrent.getInputElement() instanceof URL && url.toExternalForm().equals(((URL) fCurrent.getInputElement()).toExternalForm()))) {
                fCurrent = new  URLBrowserInput(fCurrent, url);
                if (fBackAction != null) {
                    fBackAction.update();
                    fForthAction.update();
                }
                if (fInputSelectionProvider != null)
                    fInputSelectionProvider.setSelection(new  StructuredSelection(url));
            }
            return false;
        }

        public void handleInlineJavadocLink(IJavaElement target) {
            JavaElementBrowserInput newInput = new  JavaElementBrowserInput(fCurrent, target);
            JavadocView.this.setInput(newInput);
        }

        public void handleJavadocViewLink(IJavaElement target) {
            handleInlineJavadocLink(target);
        }

        public void handleTextSet() {
            IJavaElement input = getOrignalInput();
            if (input == null)
                return;
            if (fCurrent == null || !fCurrent.getInputElement().equals(input)) {
                fCurrent = new  JavaElementBrowserInput(null, input);
                if (fBackAction != null) {
                    fBackAction.update();
                    fForthAction.update();
                }
            }
        }
    }));
}
method: org.eclipse.swt.browser.Browser.addLocationListener(org.eclipse.swt.browser.LocationListener;)V2
public void addLocationListener(LocationListener listener) {
    checkWidget();
    if (listener == null)
        SWT.error(SWT.ERROR_NULL_ARGUMENT);
    webBrowser.addLocationListener(listener);
}

---------------Library-------------------
method: org.eclipse.ui.dialogs.FilteredItemsSelectionDialog$8.getName(org.eclipse.swt.accessibility.AccessibleEvent;)V2
@Override
public void getName(AccessibleEvent e) {
    if (e.childID == ACC.CHILDID_SELF) {
        e.result = LegacyActionTools.removeMnemonics(listLabel.getText());
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.help.WorkbenchHelpSystem.displayHelp()V1
@Override
public void displayHelp() {
    AbstractHelpUI helpUI = getHelpUI();
    if (helpUI != null) {
        helpUI.displayHelp();
    }
}
method: org.eclipse.ui.internal.help.WorkbenchHelpSystem.getHelpUI()org.eclipse.ui.help.AbstractHelpUI;1
private AbstractHelpUI getHelpUI() {
    if (!isInitialized) {
        isInitialized = initializePluggableHelpUI();
    }
    return pluggableHelpUI;
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_gc_set_clip_origin(JII)V3
public static final void gdk_gc_set_clip_origin(long gc, int x, int y) {
    lock.lock();
    try {
        _gdk_gc_set_clip_origin(gc, x, y);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.extension.PointSelectionPage$6.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent e) {
    if (fCurrentPoint != null)
        new  ShowDescriptionAction(fCurrentPoint, true).run();
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.extensions.NavigatorContentExtension$3.run()V1
public void run() throws Exception {
    if (contentProvider != null) {
        contentProvider.dispose();
    }
}
method: org.eclipse.ui.internal.navigator.extensions.SafeDelegateTreeContentProvider.dispose()V1
public void dispose() {
    SafeRunner.run(new  NavigatorSafeRunnable() {

        public void run() throws Exception {
            contentProvider.dispose();
        }
    });
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.map.DecoratingObservableMap.entrySet()java.util.Set;1
public Set entrySet() {
    getterCalled();
    if (entrySet == null) {
        entrySet = new  BackedSet(decorated.entrySet());
    }
    return entrySet;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javaeditor.InternalClassFileEditorInput.getToolTipText()java.lang.String;1
public String getToolTipText() {
    return fClassFile.getType().getFullyQualifiedName();
}
method: org.eclipse.jdt.internal.core.ClassFile.getType()org.eclipse.jdt.core.IType;1
public IType getType() {
    if (this.binaryType == null) {
        this.binaryType = new  BinaryType(this, getTypeName());
    }
    return this.binaryType;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.WatchEditPreferencePage.initialize()V1
protected void initialize() {
    super.initialize();
    promptEditor.setEnabled(isEditEnabled(), getFieldEditorParent());
    updateEditor.setEnabled(isEditEnabled(), getFieldEditorParent());
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.editor.product.AboutSection.handleModelEventWorldChanged(org.eclipse.pde.core.IModelChangedEvent;)V2
private void handleModelEventWorldChanged(IModelChangedEvent event) {
    refresh();
}
method: org.eclipse.pde.internal.ui.editor.product.AboutSection.refresh()V1
public void refresh() {
    fImageEntry.setValue(getAboutInfo().getImagePath(), true);
    fTextEntry.setValue(getAboutInfo().getText(), true);
    super.refresh();
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.jdom.DOMMethod.offset(I)V2
protected void offset(int offset) {
    super.offset(offset);
    offsetRange(this.fBodyRange, offset);
    offsetRange(this.fExceptionRange, offset);
    offsetRange(this.fParameterRange, offset);
    offsetRange(this.fReturnTypeRange, offset);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.core.jdom.DOMField.offset(I)V2
protected void offset(int offset) {
    super.offset(offset);
    offsetRange(this.fInitializerRange, offset);
    offsetRange(this.fTypeRange, offset);
}
method: org.eclipse.jdt.internal.core.jdom.DOMMember.offset(I)V2
protected void offset(int offset) {
    super.offset(offset);
    offsetRange(this.fCommentRange, offset);
    offsetRange(this.fModifierRange, offset);
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.handlers.ShowInSystemExplorerHandler.getResource(org.eclipse.core.commands.ExecutionEvent;)org.eclipse.core.resources.IResource;2
private IResource getResource(ExecutionEvent event) {
    IResource resource = getSelectionResource(event);
    if (resource == null) {
        resource = getEditorInputResource(event);
    }
    return resource;
}
---------------Client-------------------
method: org.eclipse.ui.handlers.HandlerUtil.getShowInInputChecked(org.eclipse.core.commands.ExecutionEvent;)java.lang.Object;1
public static Object getShowInInputChecked(ExecutionEvent event) throws ExecutionException {
    Object var = getVariableChecked(event, ISources.SHOW_IN_INPUT);
    return var;
}
method: org.eclipse.ui.handlers.HandlerUtil.getVariableChecked(org.eclipse.core.commands.ExecutionEvent;java.lang.String;)java.lang.Object;2
public static Object getVariableChecked(ExecutionEvent event, String name) throws ExecutionException {
    Object o = getVariable(event, name);
    if (o == null) {
        noVariableFound(event, name);
    }
    return o;
}

---------------Library-------------------
method: org.eclipse.ui.internal.ide.dialogs.CleanDialog$5.checkStateChanged(org.eclipse.jface.viewers.CheckStateChangedEvent;)V2
public void checkStateChanged(CheckStateChangedEvent event) {
    selection = projectNames.getCheckedElements();
    updateEnablement();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doUpdateUI()V1
protected void doUpdateUI() {
    fBuildPathDialogField.refresh();
    fClassPathList.refresh();
    doStatusLineUpdate();
}
method: org.eclipse.jdt.internal.ui.wizards.buildpaths.BuildPathsBlock.doStatusLineUpdate()V1
private void doStatusLineUpdate() {
    if (Display.getCurrent() != null) {
        IStatus res = findMostSevereStatus();
        fContext.statusChanged(res);
    }
}

---------------Library-------------------
method: org.eclipse.jface.viewers.StructuredViewer.addDropSupport(IAorg.eclipse.swt.dnd.Transfer;org.eclipse.swt.dnd.DropTargetListener;)V4
public void addDropSupport(int operations, Transfer[] transferTypes, final DropTargetListener listener) {
    Control control = getControl();
    DropTarget dropTarget = new  DropTarget(control, operations);
    dropTarget.setTransfer(transferTypes);
    dropTarget.addDropListener(listener);
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.set.ComputedSet.addChangeListener(org.eclipse.core.databinding.observable.IChangeListener;)V2
public synchronized void addChangeListener(IChangeListener listener) {
    super.addChangeListener(listener);
    computeSetForListeners();
}
method: org.eclipse.core.databinding.observable.set.ComputedSet.computeSetForListeners()V1
private void computeSetForListeners() {
    getRealm().exec(new  Runnable() {

        public void run() {
            if (dependencies == null) {
                getSet();
            }
        }
    });
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.preferences.AntCodeFormatterPreferencePage.createGroup(ILorg.eclipse.swt.widgets.Composite;java.lang.String;)org.eclipse.swt.widgets.Group;4
private Group createGroup(int numColumns, Composite parent, String text) {
    final Group group = new  Group(parent, SWT.NONE);
    GridData gd = new  GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = numColumns;
    gd.widthHint = 0;
    group.setLayoutData(gd);
    group.setFont(parent.getFont());
    final GridLayout layout = new  GridLayout(numColumns, false);
    group.setLayout(layout);
    group.setText(text);
    return group;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage.createLabel(ILorg.eclipse.swt.widgets.Composite;java.lang.String;I)org.eclipse.swt.widgets.Label;4
protected static Label createLabel(int numColumns, Composite parent, String text, int gridDataStyle) {
    final Label label = new  Label(parent, SWT.WRAP);
    label.setFont(parent.getFont());
    label.setText(text);
    PixelConverter pixelConverter = new  PixelConverter(parent);
    label.setLayoutData(createGridData(numColumns, gridDataStyle, pixelConverter.convertHorizontalDLUsToPixels(150)));
    return label;
}
method: org.eclipse.jdt.internal.ui.preferences.formatter.ModifyDialogTabPage.createGridData(III)org.eclipse.swt.layout.GridData;3
protected static GridData createGridData(int numColumns, int style, int widthHint) {
    final GridData gd = new  GridData(style);
    gd.horizontalSpan = numColumns;
    gd.widthHint = widthHint;
    return gd;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.codemanipulation.ImportReferencesCollector.visit(org.eclipse.jdt.core.dom.SingleMemberAnnotation;)Z2
@Override
public boolean visit(SingleMemberAnnotation node) {
    typeRefFound(node.getTypeName());
    doVisitNode(node.getValue());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.core.databinding.observable.list.ComputedList$1.getDifferences()Aorg.eclipse.core.databinding.observable.list.ListDiffEntry;1
public ListDiffEntry[] getDifferences() {
    if (differences == null)
        differences = Diffs.computeListDiff(oldList, getList()).getDifferences();
    return differences;
}
---------------Client-------------------
method: org.eclipse.core.databinding.observable.set.ComputedSet$1.getAdditions()java.util.Set;1
public Set getAdditions() {
    return getDelegate().getAdditions();
}
method: org.eclipse.core.databinding.observable.set.ComputedSet$1.getDelegate()org.eclipse.core.databinding.observable.set.SetDiff;1
private SetDiff getDelegate() {
    if (delegate == null)
        delegate = Diffs.computeSetDiff(oldSet, getSet());
    return delegate;
}

---------------Library-------------------
method: org.eclipse.jdt.core.refactoring.descriptors.MoveDescriptor.setMovePackages(Aorg.eclipse.jdt.core.IPackageFragment;)V2
public void setMovePackages(final IPackageFragment[] fragments) {
    Assert.isNotNull(fragments);
    Assert.isTrue(fMovePolicy == null, "Clients must only call one of the 'setMoveXXX' methods.");
    fFragments = fragments;
    fMovePolicy = POLICY_MOVE_PACKAGES;
}
---------------Client-------------------
method: org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.setProcessor(org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor;)V2
public void setProcessor(RefactoringProcessor processor) {
    processor.setRefactoring(this);
    fProcessor = processor;
}
method: org.eclipse.ltk.core.refactoring.participants.RefactoringProcessor.setRefactoring(org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring;)V2
void setRefactoring(ProcessorBasedRefactoring refactoring) {
    Assert.isTrue(fRefactoring == null, "The refactoring can only be set once");
    Assert.isNotNull(refactoring);
    fRefactoring = refactoring;
}

---------------Library-------------------
method: org.eclipse.jdt.internal.compiler.tool.Archive.allPackages()java.util.Set;1
public Set<String> allPackages() {
    if (this.packagesCache == null) {
        this.initialize();
    }
    return this.packagesCache.keySet();
}
---------------Client-------------------
method: org.eclipse.ui.wizards.datatransfer.WizardExternalProjectImportPage.getProjectName()java.lang.String;1
public String getProjectName() {
    return getProjectNameFieldValue();
}
method: org.eclipse.ui.wizards.datatransfer.WizardExternalProjectImportPage.getProjectNameFieldValue()java.lang.String;1
private String getProjectNameFieldValue() {
    if (projectNameField == null) {
        return "";
    }
    return projectNameField.getText().trim();
}

---------------Library-------------------
method: org.eclipse.pde.internal.ds.ui.editor.dialogs.DSEditProvideDialog.doOpenSelectionDialog(ILorg.eclipse.pde.internal.ds.ui.parts.FormEntry;)V3
private void doOpenSelectionDialog(int scopeType, FormEntry entry) {
    try {
        String filter = entry.getValue();
        filter = filter.substring(filter.lastIndexOf(".") + 1);
        SelectionDialog dialog = JavaUI.createTypeDialog(Activator.getActiveWorkbenchShell(), PlatformUI.getWorkbench().getProgressService(), SearchEngine.createWorkspaceScope(), scopeType, false, filter);
        dialog.setTitle(Messages.DSProvideDetails_selectType);
        if (dialog.open() == Window.OK) {
            IType type = (IType) dialog.getResult()[0];
            entry.setValue(type.getFullyQualifiedName('$'));
            entry.commit();
        }
    } catch (CoreException e) {
    }
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.ui.wizards.DSFileWizardPage$4.doOpenSelectionDialog(ILorg.eclipse.swt.widgets.Text;)V3
private void doOpenSelectionDialog(int scopeType, Text entry) {
    try {
        String filter = entry.getText();
        filter = filter.substring(filter.lastIndexOf(".") + 1);
        SelectionDialog dialog = JavaUI.createTypeDialog(Activator.getActiveWorkbenchShell(), PlatformUI.getWorkbench().getProgressService(), SearchEngine.createWorkspaceScope(), scopeType, false, filter);
        dialog.setTitle(Messages.DSFileWizardPage_selectType);
        if (dialog.open() == Window.OK) {
            IType type = (IType) dialog.getResult()[0];
            entry.setText(type.getFullyQualifiedName('$'));
        }
    } catch (CoreException e) {
        Activator.logException(e);
    }
}
method: org.eclipse.pde.internal.ds.ui.Activator.getActiveWorkbenchShell()org.eclipse.swt.widgets.Shell;0
public static Shell getActiveWorkbenchShell() {
    IWorkbenchWindow window = getActiveWorkbenchWindow();
    if (window != null) {
        return window.getShell();
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jetty.io.nio.RandomAccessFileBuffer.clear()V1
@Override
public void clear() {
    try {
        synchronized (_file) {
            super.clear();
            _file.setLength(0);
        }
    } catch (Exception e) {
        throw new  RuntimeException(e);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.io.UncheckedPrintWriter.print(C)V2
@Override
public void print(char c) {
    this.write(c);
}
method: org.eclipse.jetty.io.UncheckedPrintWriter.write(I)V2
@Override
public void write(int c) {
    try {
        synchronized (lock) {
            isOpen();
            out.write(c);
        }
    } catch (InterruptedIOException x) {
        Thread.currentThread().interrupt();
    } catch (IOException ex) {
        setError(ex);
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gdk_region_offset(JII)V3
public static final void gdk_region_offset(long region, int dx, int dy) {
    lock.lock();
    try {
        _gdk_region_offset(region, dx, dy);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yyclose()V1
public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;
    zzEndRead = zzStartRead;
    if (zzReader != null)
        zzReader.close();
}
---------------Client-------------------
method: org.apache.batik.css.parser.Parser.setLocale(java.util.Locale;)V2
public void setLocale(Locale locale) throws CSSException {
    localizableSupport.setLocale(locale);
}
method: org.apache.batik.i18n.LocalizableSupport.setLocale(java.util.Locale;)V2
public void setLocale(Locale l) {
    if (locale != l) {
        locale = l;
        resourceBundles.clear();
        lastResourceClass = null;
    }
}

---------------Library-------------------
method: org.eclipse.search.ui.text.AbstractTextSearchResult.fireChange(org.eclipse.search.ui.SearchResultEvent;)V2
protected void fireChange(SearchResultEvent e) {
    HashSet copiedListeners = new  HashSet();
    synchronized (fListeners) {
        copiedListeners.addAll(fListeners);
    }
    Iterator listeners = copiedListeners.iterator();
    while (listeners.hasNext()) {
        ((ISearchResultListener) listeners.next()).searchResultChanged(e);
    }
}
---------------Client-------------------
method: org.eclipse.search2.internal.ui.QueryManager.queryFinished(org.eclipse.search.ui.ISearchQuery;)V2
public void queryFinished(ISearchQuery query) {
    fireFinished(query);
}
method: org.eclipse.search2.internal.ui.QueryManager.fireFinished(org.eclipse.search.ui.ISearchQuery;)V2
public void fireFinished(ISearchQuery query) {
    Set copiedListeners = new  HashSet();
    synchronized (fListeners) {
        copiedListeners.addAll(fListeners);
    }
    Iterator listeners = copiedListeners.iterator();
    while (listeners.hasNext()) {
        IQueryListener l = (IQueryListener) listeners.next();
        l.queryFinished(query);
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ComboDialogField.setText(java.lang.String;)V2
public void setText(String text) {
    fText = text;
    if (isOkToUse(fComboControl)) {
        fComboControl.setText(text);
    } else {
        dialogFieldChanged();
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.keys.NewKeysPreferencePage$CategoryFilterTree.filterCategories(Z)V2
public void filterCategories(boolean b) {
    filter.filterCategories(b);
    textChanged();
}
method: org.eclipse.ui.internal.keys.CategoryPatternFilter.filterCategories(Z)V2
public void filterCategories(boolean b) {
    filterCategories = b;
    if (filterCategories) {
        setPattern("org.eclipse.ui.keys.optimization.false");
    } else {
        setPattern("org.eclipse.ui.keys.optimization.true");
    }
}

---------------Library-------------------
method: org.eclipse.jface.text.TextViewer.createTextWidget(org.eclipse.swt.widgets.Composite;I)org.eclipse.swt.custom.StyledText;3
protected StyledText createTextWidget(Composite parent, int styles) {
    StyledText styledText = new  StyledText(parent, styles);
    styledText.setLeftMargin(Math.max(styledText.getLeftMargin(), 2));
    return styledText;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.getFields(java.lang.String;)Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;2
public Variable[] getFields(String type) {
    Variable[] fields = getCompletion().findFieldVariables(type);
    arrange(fields);
    return fields;
}
method: org.eclipse.jdt.internal.corext.template.java.JavaContext.arrange(Aorg.eclipse.jdt.internal.corext.template.java.CompilationUnitCompletion$Variable;)V2
private void arrange(Variable[] variables) {
    Arrays.sort(variables, new  Comparator<Variable>() {

        public int compare(Variable o1, Variable o2) {
            return rank(o1) - rank(o2);
        }

        private int rank(Variable l) {
            return fUsedNames.contains(l.getName()) ? 1 : 0;
        }
    });
}

---------------Library-------------------
method: org.eclipse.jdt.internal.junit.wizards.MethodStubsSelectionButtonGroup.updateEnableState()V1
protected void updateEnableState() {
    if (fLabel != null) {
        fLabel.setEnabled(fEnabled);
    }
    if (fButtons != null) {
        boolean enabled = isEnabled();
        for (int i = 0; i < fButtons.length; i++) {
            Button button = fButtons[i];
            if (isOkToUse(button)) {
                button.setEnabled(enabled && fButtonsEnabled[i]);
            }
        }
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.SelectionButtonDialogFieldGroup.updateEnableState()V1
@Override
protected void updateEnableState() {
    super.updateEnableState();
    if (fButtons != null) {
        boolean enabled = isEnabled();
        for (int i = 0; i < fButtons.length; i++) {
            Button button = fButtons[i];
            if (isOkToUse(button)) {
                button.setEnabled(enabled && fButtonsEnabled[i]);
            }
        }
    }
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.updateEnableState()V1
protected void updateEnableState() {
    if (fLabel != null) {
        fLabel.setEnabled(fEnabled);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ui.mapping.ResourceMarkAsMergedHandler.getOperation()org.eclipse.team.ui.mapping.SynchronizationOperation;1
protected synchronized SynchronizationOperation getOperation() {
    if (operation == null) {
        operation = new  ResourceModelProviderOperation(getConfiguration(), getStructuredSelection()) {

            public void execute(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                try {
                    final IMergeContext context = (IMergeContext) getContext();
                    final IDiff[] deltas = getTargetDiffs();
                    ISchedulingRule rule = getMergeRule(context, deltas);
                    context.run(new  IWorkspaceRunnable() {

                        public void run(IProgressMonitor monitor) throws CoreException {
                            markAsMerged(deltas, context, monitor);
                        }
                    }, rule, IResource.NONE, monitor);
                } catch (CoreException e) {
                    throw new  InvocationTargetException(e);
                }
            }

            private ISchedulingRule getMergeRule(IMergeContext context, IDiff[] deltas) {
                ISchedulingRule result = null;
                for (int i = 0; i < deltas.length; i++) {
                    IDiff node = deltas[i];
                    ISchedulingRule rule = context.getMergeRule(node);
                    if (result == null) {
                        result = rule;
                    } else {
                        result = MultiRule.combine(result, rule);
                    }
                }
                return result;
            }

            private void markAsMerged(IDiff[] deltas, final IMergeContext context, IProgressMonitor monitor) throws CoreException {
                context.markAsMerged(deltas, false, monitor);
            }

            protected FastDiffFilter getDiffFilter() {
                return new  FastDiffFilter() {

                    public boolean select(IDiff node) {
                        if (node instanceof IThreeWayDiff) {
                            IThreeWayDiff twd = (IThreeWayDiff) node;
                            if (twd.getDirection() == IThreeWayDiff.CONFLICTING || twd.getDirection() == IThreeWayDiff.INCOMING) {
                                return true;
                            }
                        }
                        return false;
                    }
                };
            }

            protected String getJobName() {
                IDiff[] diffs = getTargetDiffs();
                if (diffs.length == 1)
                    return TeamUIMessages.ResourceMarkAsMergedHandler_0;
                return NLS.bind(TeamUIMessages.ResourceMarkAsMergedHandler_1, new  Integer(diffs.length).toString());
            }
        };
    }
    return operation;
}
---------------Client-------------------
method: org.eclipse.pde.internal.ds.ui.editor.sections.DSPropertiesSection.createPropertyElement()org.eclipse.pde.internal.ds.core.IDSProperty;1
private IDSProperty createPropertyElement() {
    IDSDocumentFactory factory = getDSModel().getFactory();
    IDSProperty property = factory.createProperty();
    return property;
}
method: org.eclipse.pde.internal.ds.core.text.DSModel.getFactory()org.eclipse.pde.internal.ds.core.IDSDocumentFactory;1
public IDSDocumentFactory getFactory() {
    if (fFactory == null) {
        fFactory = new  DSDocumentFactory(this);
    }
    return fFactory;
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.Container.findMember(org.eclipse.core.runtime.IPath;Z)org.eclipse.core.resources.IResource;3
public IResource findMember(IPath childPath, boolean phantom) {
    childPath = getFullPath().append(childPath);
    ResourceInfo info = workspace.getResourceInfo(childPath, phantom, false);
    return (info == null) ? null : workspace.newResource(childPath, info.getType());
}
---------------Client-------------------
method: org.eclipse.core.internal.resources.Container.findMember(java.lang.String;)org.eclipse.core.resources.IResource;2
public IResource findMember(String memberPath) {
    return findMember(memberPath, false);
}
method: org.eclipse.core.internal.resources.Container.findMember(java.lang.String;Z)org.eclipse.core.resources.IResource;3
public IResource findMember(String memberPath, boolean phantom) {
    IPath childPath = getFullPath().append(memberPath);
    ResourceInfo info = workspace.getResourceInfo(childPath, phantom, false);
    return info == null ? null : workspace.newResource(childPath, info.getType());
}

---------------Library-------------------
method: org.eclipse.pde.internal.core.text.bundle.ExportPackageHeader.getPackages()Aorg.eclipse.pde.internal.core.text.bundle.ExportPackageObject;1
public ExportPackageObject[] getPackages() {
    PDEManifestElement[] elements = getElements();
    ExportPackageObject[] result = new ExportPackageObject[elements.length];
    System.arraycopy(elements, 0, result, 0, elements.length);
    return result;
}
---------------Client-------------------
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.pipe(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)org.eclipse.equinox.p2.metadata.expression.IExpression;2
public IExpression pipe(IExpression... operands) {
    return Pipe.createPipe(convertArray(operands));
}
method: org.eclipse.equinox.internal.p2.metadata.expression.ExpressionFactory.convertArray(Aorg.eclipse.equinox.p2.metadata.expression.IExpression;)Aorg.eclipse.equinox.internal.p2.metadata.expression.Expression;1
protected static Expression[] convertArray(IExpression[] operands) {
    Expression[] ops = new Expression[operands.length];
    System.arraycopy(operands, 0, ops, 0, operands.length);
    return ops;
}

---------------Library-------------------
method: org.eclipse.swt.browser.FilePickerFactory.disposeCOMInterfaces()V1
void disposeCOMInterfaces() {
    if (supports != null) {
        supports.dispose();
        supports = null;
    }
    if (factory != null) {
        factory.dispose();
        factory = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.eclipse.ui.editors.text.FileBufferOperationAction.doRun(Aorg.eclipse.core.resources.IFile;org.eclipse.core.runtime.IPath;org.eclipse.core.filebuffers.manipulation.IFileBufferOperation;)V4
protected final void doRun(final IFile[] files, final IPath location, final IFileBufferOperation fileBufferOperation) {
    Job job = new  Job(fileBufferOperation.getOperationName()) {

        protected IStatus run(IProgressMonitor monitor) {
            IStatus status;
            try {
                int ticks = 100;
                monitor.beginTask(fFileBufferOperation.getOperationName(), ticks);
                try {
                    IPath[] locations;
                    if (files != null) {
                        ticks -= 30;
                        locations = generateLocations(files, new  SubProgressMonitor(monitor, 30));
                    } else
                        locations = new IPath[] { location };
                    if (locations != null && locations.length > 0) {
                        FileBufferOperationRunner runner = new  FileBufferOperationRunner(FileBuffers.getTextFileBufferManager(), getShell());
                        runner.execute(locations, fileBufferOperation, new  SubProgressMonitor(monitor, ticks));
                    }
                    status = Status.OK_STATUS;
                } finally {
                    monitor.done();
                }
            } catch (OperationCanceledException e) {
                status = new  Status(IStatus.CANCEL, EditorsUI.PLUGIN_ID, IStatus.OK, "", null);
            } catch (CoreException e) {
                status = new  Status(IStatus.ERROR, EditorsUI.PLUGIN_ID, IStatus.OK, "", e);
            }
            return status;
        }
    };
    job.setUser(true);
    job.schedule();
}
---------------Client-------------------
method: org.eclipse.ui.internal.wizards.datatransfer.WizardFileSystemResourceImportPage1.updateSelections(java.util.Map;)V2
protected void updateSelections(Map map) {
    super.updateSelections(map);
}
method: org.eclipse.ui.dialogs.WizardResourceImportPage.updateSelections(java.util.Map;)V2
protected void updateSelections(final Map map) {
    Runnable runnable = new  Runnable() {

        public void run() {
            selectionGroup.updateSelections(map);
        }
    };
    BusyIndicator.showWhile(getShell().getDisplay(), runnable);
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.search.dependencies.AddNewDependenciesAction.run()V1
public void run() {
    Job job = new  WorkspaceJob(PDEUIMessages.DependencyManagementSection_jobName) {

        public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
            try {
                AddNewDependenciesOperation op = getOperation();
                op.run(monitor);
                if (!op.foundNewDependencies())
                    Display.getDefault().asyncExec(new  Runnable() {

                        public void run() {
                            MessageDialog.openInformation(PDEPlugin.getActiveWorkbenchShell(), PDEUIMessages.AddNewDependenciesAction_title, PDEUIMessages.AddNewDependenciesAction_notFound);
                        }
                    });
            } catch (InvocationTargetException e) {
            } catch (InterruptedException e) {
            } finally {
                monitor.done();
            }
            return new  Status(IStatus.OK, PDEPlugin.getPluginId(), IStatus.OK, "", null);
        }
    };
    job.setUser(true);
    job.setProperty(IProgressConstants.ICON_PROPERTY, PDEPluginImages.DESC_PSEARCH_OBJ.createImage());
    job.schedule();
}
---------------Client-------------------
method: org.eclipse.pde.internal.ui.search.dependencies.CalculateUsesAction.run()V1
public void run() {
    Job job = createJob();
    job.setUser(true);
    job.setProperty(IProgressConstants.ICON_PROPERTY, PDEPluginImages.DESC_PSEARCH_OBJ.createImage());
    job.schedule();
}
method: org.eclipse.pde.internal.ui.search.dependencies.CalculateUsesAction.createJob()org.eclipse.core.runtime.jobs.Job;1
protected Job createJob() {
    return new  WorkspaceJob(PDEUIMessages.CalculateUsesAction_jobName) {

        public IStatus runInWorkspace(IProgressMonitor monitor) throws CoreException {
            CalculateUsesOperation op = getOperation();
            try {
                op.run(monitor);
            } catch (InvocationTargetException e) {
            } catch (InterruptedException e) {
            } finally {
                monitor.done();
            }
            return new  Status(IStatus.OK, PDEPlugin.getPluginId(), IStatus.OK, "", null);
        }
    };
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.reorg.ReorgUtils.getCompilationUnits(Aorg.eclipse.jdt.core.IJavaElement;)Aorg.eclipse.jdt.core.ICompilationUnit;1
public static ICompilationUnit[] getCompilationUnits(IJavaElement[] javaElements) {
    ICompilationUnit[] result = new ICompilationUnit[javaElements.length];
    for (int i = 0; i < javaElements.length; i++) {
        result[i] = getCompilationUnit(javaElements[i]);
    }
    return result;
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.ui.operations.SingleCommandOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected final ICVSResource[] getCVSArguments(IResource[] resources) {
    return super.getCVSArguments(resources);
}
method: org.eclipse.team.internal.ccvs.ui.operations.RepositoryProviderOperation.getCVSArguments(Aorg.eclipse.core.resources.IResource;)Aorg.eclipse.team.internal.ccvs.core.ICVSResource;2
protected ICVSResource[] getCVSArguments(IResource[] resources) {
    ICVSResource[] cvsResources = new ICVSResource[resources.length];
    for (int i = 0; i < cvsResources.length; i++) {
        cvsResources[i] = CVSWorkspaceRoot.getCVSResourceFor(resources[i]);
    }
    return cvsResources;
}

---------------Library-------------------
method: org.eclipse.jface.action.StatusLine.handleDispose()V1
protected void handleDispose() {
    if (fStopButtonCursor != null) {
        fStopButtonCursor.dispose();
        fStopButtonCursor = null;
    }
    if (fProgressBar != null) {
        fProgressBar.dispose();
        fProgressBar = null;
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.javadocexport.ContributedJavadocWizardPage.dispose()V1
@Override
public void dispose() {
    if (fPage != null) {
        fPage.dispose();
        fPage = null;
    }
    super.dispose();
}
method: org.eclipse.jface.dialogs.DialogPage.dispose()V1
@Override
public void dispose() {
    if (image != null) {
        image.dispose();
        image = null;
    }
}

---------------Library-------------------
method: org.apache.lucene.util.NumericUtils.longToPrefixCoded(JI)java.lang.String;2
public static String longToPrefixCoded(final long val, final int shift) {
    final char[] buffer = new char[BUF_SIZE_LONG];
    final int len = longToPrefixCoded(val, shift, buffer);
    return new  String(buffer, 0, len);
}
---------------Client-------------------
method: org.apache.lucene.util.NumericUtils.intToPrefixCoded(I)java.lang.String;1
public static String intToPrefixCoded(final int val) {
    return intToPrefixCoded(val, 0);
}
method: org.apache.lucene.util.NumericUtils.intToPrefixCoded(II)java.lang.String;2
public static String intToPrefixCoded(final int val, final int shift) {
    final char[] buffer = new char[BUF_SIZE_INT];
    final int len = intToPrefixCoded(val, shift, buffer);
    return new  String(buffer, 0, len);
}

---------------Library-------------------
method: org.eclipse.core.internal.resources.Project.deleteResource(ZLorg.eclipse.core.runtime.MultiStatus;)V3
public void deleteResource(boolean convertToPhantom, MultiStatus status) throws CoreException {
    super.deleteResource(convertToPhantom, status);
    clearHistory(null);
    workspace.getMetaArea().delete(this);
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.refactoring.generics.InferTypeArgumentsConstraintCreator.endVisit(org.eclipse.jdt.core.dom.StringLiteral;)V2
@Override
public void endVisit(StringLiteral node) {
    ITypeBinding typeBinding = node.resolveTypeBinding();
    ImmutableTypeVariable2 cv = fTCModel.makeImmutableTypeVariable(typeBinding, null);
    setConstraintVariable(node, cv);
}
method: org.eclipse.jdt.internal.corext.refactoring.generics.InferTypeArgumentsTCModel.makeImmutableTypeVariable(org.eclipse.jdt.core.dom.ITypeBinding;org.eclipse.jdt.core.dom.Expression;)org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ImmutableTypeVariable2;3
public ImmutableTypeVariable2 makeImmutableTypeVariable(ITypeBinding typeBinding, Expression expression) {
    TType type = getBoxedType(typeBinding, expression);
    if (type == null)
        return null;
    return makeImmutableTypeVariable(type);
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.refactoring.code.SourceAnalyzer$UpdateCollector.visit(org.eclipse.jdt.core.dom.FieldAccess;)Z2
@Override
public boolean visit(FieldAccess node) {
    node.getExpression().accept(this);
    addReferencesToName(node.getName());
    return false;
}
---------------Client-------------------
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.jface.text.ITextViewer;)I1
public static int getPartialBottomIndex(ITextViewer viewer) {
    StyledText textWidget = viewer.getTextWidget();
    int widgetBottom = getPartialBottomIndex(textWidget);
    return widgetLine2ModelLine(viewer, widgetBottom);
}
method: org.eclipse.jface.text.JFaceTextUtil.getPartialBottomIndex(org.eclipse.swt.custom.StyledText;)I1
public static int getPartialBottomIndex(StyledText widget) {
    int lastPixel = computeLastVisiblePixel(widget);
    int bottom = widget.getLineIndex(lastPixel);
    return bottom;
}

---------------Library-------------------
method: org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring$ProcessorChange.internalProcessOnCancel(org.eclipse.ltk.core.refactoring.Change;)Z2
protected boolean internalProcessOnCancel(Change change) {
    RefactoringParticipant participant = (RefactoringParticipant) fParticipantMap.get(change);
    if (participant == null)
        return false;
    return participant.getDescriptor().processOnCancel();
}
---------------Client-------------------
method: org.eclipse.equinox.internal.frameworkadmin.equinox.EquinoxBundlesState.isResolved(org.eclipse.equinox.frameworkadmin.BundleInfo;)Z2
public boolean isResolved(BundleInfo bInfo) {
    URI realLocation = bInfo.getLocation();
    BundleDescription description = getBundleByLocation(realLocation);
    if (description == null)
        return false;
    return description.isResolved();
}
method: org.eclipse.equinox.internal.frameworkadmin.equinox.EquinoxBundlesState.getBundleByLocation(java.net.URI;)org.eclipse.osgi.service.resolver.BundleDescription;2
private BundleDescription getBundleByLocation(URI location) {
    if (location == null)
        return null;
    return locationStateIndex.get(location);
}

---------------Library-------------------
method: org.eclipse.swt.internal.accessibility.gtk.ATK.atk_object_notify_state_change(JIZ)V3
public static final void atk_object_notify_state_change(long accessible, int state, boolean value) {
    lock.lock();
    try {
        _atk_object_notify_state_change(accessible, state, value);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.jdt.ui.actions.JavaSearchActionGroup.setContext(org.eclipse.ui.actions.ActionContext;)V2
@Override
public void setContext(ActionContext context) {
    fReferencesGroup.setContext(context);
    fDeclarationsGroup.setContext(context);
    fImplementorsGroup.setContext(context);
    fReadAccessGroup.setContext(context);
    fWriteAccessGroup.setContext(context);
    fOccurrencesGroup.setContext(context);
}
---------------Client-------------------
method: org.eclipse.ui.views.markers.internal.DialogTaskFilter.updateEnabledState(Z)V2
protected void updateEnabledState(boolean enabled) {
    super.updateEnabledState(enabled);
    descriptionGroup.updateEnablement(enabled);
    priorityGroup.updateEnablement(enabled);
    statusGroup.updateEnablement(enabled);
}
method: org.eclipse.ui.views.markers.internal.DialogTaskFilter$DescriptionGroup.updateEnablement(Z)V2
public void updateEnablement(boolean enabled) {
    descriptionLabel.setEnabled(enabled);
    combo.setEnabled(enabled);
    description.setEnabled(enabled);
}

---------------Library-------------------
method: org.eclipse.ecf.core.ContainerFactory.containsDescription0(org.eclipse.ecf.core.ContainerTypeDescription;)Z2
protected boolean containsDescription0(ContainerTypeDescription containerTypeDescription) {
    if (containerTypeDescription == null)
        return false;
    synchronized (containerdescriptions) {
        return containerdescriptions.containsKey(containerTypeDescription.getName());
    }
}
---------------Client-------------------
method: org.osgi.service.application.ApplicationDescriptor.isPersistentlyLocked()Z1
private boolean isPersistentlyLocked() {
    return AppPersistence.isLocked(this);
}
method: org.eclipse.equinox.internal.app.AppPersistence.isLocked(org.osgi.service.application.ApplicationDescriptor;)Z1
public static boolean isLocked(ApplicationDescriptor desc) {
    synchronized (locks) {
        return locks.contains(desc.getApplicationId());
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.navigator.extensions.RegistryReader.logMissingElement(org.eclipse.core.runtime.IConfigurationElement;java.lang.String;)V2
protected static void logMissingElement(IConfigurationElement element, String elementName) {
    logError(element, "Required sub element '" + elementName + "' not defined");
}
---------------Client-------------------
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setLocalImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;)V2
public static void setLocalImageDescriptors(IAction action, String iconName) {
    setImageDescriptors(action, "lcl16/", iconName);
}
method: org.eclipse.ui.internal.navigator.resources.plugin.NavigatorUIPluginImages.setImageDescriptors(org.eclipse.jface.action.IAction;java.lang.String;java.lang.String;)V3
public static void setImageDescriptors(IAction action, String type, String relPath) {
    action.setImageDescriptor(create("e" + type, relPath));
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.parts.WizardCheckboxTablePart.createStructuredViewer(org.eclipse.swt.widgets.Composite;ILorg.eclipse.ui.forms.widgets.FormToolkit;)org.eclipse.jface.viewers.StructuredViewer;4
protected StructuredViewer createStructuredViewer(Composite parent, int style, FormToolkit toolkit) {
    StructuredViewer viewer = super.createStructuredViewer(parent, style, toolkit);
    viewer.setComparator(ListUtil.NAME_COMPARATOR);
    return viewer;
}
---------------Client-------------------
method: org.apache.felix.gogo.shell.Builtin.format(org.apache.felix.service.command.CommandSession;java.lang.Object;)java.lang.CharSequence;3
public CharSequence format(CommandSession session, Object arg) {
    CharSequence result = session.format(arg, Converter.INSPECT);
    System.out.println(result);
    return result;
}
method: org.apache.felix.gogo.runtime.CommandSessionImpl.format(java.lang.Object;I)java.lang.CharSequence;3
public CharSequence format(Object result, int inspect) {
    try {
        return format(result, inspect, this);
    } catch (Exception e) {
        return "<can not format " + result + ":" + e;
    }
}

---------------Library-------------------
method: org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository.getActualLocation(java.net.URI;java.lang.String;)java.net.URI;2
private static URI getActualLocation(URI base, String extension) {
    return URIUtil.append(base, CONTENT_FILENAME + extension);
}
---------------Client-------------------
method: org.eclipse.jface.internal.databinding.swt.WidgetDelegatingValueProperty.observeDelayed(ILorg.eclipse.swt.widgets.Widget;)org.eclipse.jface.databinding.swt.ISWTObservableValue;3
public ISWTObservableValue observeDelayed(int delay, Widget widget) {
    return SWTObservables.observeDelayedValue(delay, observe(widget));
}
method: org.eclipse.jface.databinding.swt.SWTObservables.observeDelayedValue(ILorg.eclipse.jface.databinding.swt.ISWTObservableValue;)org.eclipse.jface.databinding.swt.ISWTObservableValue;2
public static ISWTObservableValue observeDelayedValue(int delay, ISWTObservableValue observable) {
    return new  SWTDelayedObservableValueDecorator(Observables.observeDelayedValue(delay, observable), observable.getWidget());
}

---------------Library-------------------
method: org.eclipse.search.internal.ui.text.FileSearchPage.setElementLimit(java.lang.Integer;)V2
public void setElementLimit(Integer elementLimit) {
    super.setElementLimit(elementLimit);
    int limit = elementLimit.intValue();
    getSettings().put(KEY_LIMIT, limit);
}
---------------Client-------------------
method: org.eclipse.jface.viewers.AbstractTreeViewer.collapseAll()V1
public void collapseAll() {
    Object root = getRoot();
    if (root != null) {
        collapseToLevel(root, ALL_LEVELS);
    }
}
method: org.eclipse.jface.viewers.AbstractTreeViewer.collapseToLevel(java.lang.Object;I)V3
public void collapseToLevel(Object elementOrTreePath, int level) {
    Assert.isNotNull(elementOrTreePath);
    Widget w = internalGetWidgetToSelect(elementOrTreePath);
    if (w != null) {
        internalCollapseToLevel(w, level);
    }
}

---------------Library-------------------
method: org.eclipse.core.internal.localstore.HistoryStore2.log(org.eclipse.core.runtime.CoreException;)V2
private void log(CoreException e) {
    IStatus status = e.getStatus();
    if (status.getException() == null)
        status = new  Status(IStatus.ERROR, ResourcesPlugin.PI_RESOURCES, IResourceStatus.FAILED_WRITE_METADATA, "Internal error in history store", e);
    Policy.log(status);
}
---------------Client-------------------
method: org.eclipse.core.internal.resources.mapping.ResourceChangeDescriptionFactory.fail(org.eclipse.core.runtime.CoreException;)V2
private void fail(CoreException e) {
    Policy.log(e.getStatus().getSeverity(), "An internal error occurred while accumulating a change description.", e);
}
method: org.eclipse.core.internal.utils.Policy.log(ILjava.lang.String;java.lang.Throwable;)V3
public static void log(int severity, String message, Throwable t) {
    if (message == null)
        message = "";
    log(new  Status(severity, ResourcesPlugin.PI_RESOURCES, 1, message, t));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.corext.dom.ASTFlattener.visit(org.eclipse.jdt.core.dom.ForStatement;)Z2
@Override
public boolean visit(ForStatement node) {
    this.fBuffer.append("for (");
    for (Iterator<Expression> it = node.initializers().iterator(); it.hasNext(); ) {
        Expression e = it.next();
        e.accept(this);
    }
    this.fBuffer.append("; ");
    if (node.getExpression() != null) {
        node.getExpression().accept(this);
    }
    this.fBuffer.append("; ");
    for (Iterator<Expression> it = node.updaters().iterator(); it.hasNext(); ) {
        Expression e = it.next();
        e.accept(this);
    }
    this.fBuffer.append(") ");
    node.getBody().accept(this);
    return false;
}
---------------Client-------------------
method: org.eclipse.jdt.internal.corext.dom.ASTFlattener.visit(org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;)Z2
@Override
public boolean visit(AnnotationTypeDeclaration node) {
    if (node.getJavadoc() != null) {
        node.getJavadoc().accept(this);
    }
    printModifiers(node.modifiers());
    this.fBuffer.append("@interface ");
    node.getName().accept(this);
    this.fBuffer.append(" {");
    for (Iterator<BodyDeclaration> it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
        BodyDeclaration d = it.next();
        d.accept(this);
    }
    this.fBuffer.append("}");
    return false;
}
method: org.eclipse.jdt.internal.corext.dom.ASTFlattener.printModifiers(java.util.List;)V2
private void printModifiers(List<IExtendedModifier> ext) {
    for (Iterator<IExtendedModifier> it = ext.iterator(); it.hasNext(); ) {
        ASTNode p = (ASTNode) it.next();
        p.accept(this);
        this.fBuffer.append(" ");
    }
}

---------------Library-------------------
method: org.eclipse.jdt.internal.core.util.LRUCache.get(java.lang.Object;)java.lang.Object;2
public Object get(Object key) {
    LRUCacheEntry entry = (LRUCacheEntry) this.entryTable.get(key);
    if (entry == null) {
        return null;
    }
    updateTimestamp(entry);
    return entry.value;
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.views.memory.MemoryViewSynchronizationService.getSynchronizedProperty(org.eclipse.debug.core.model.IMemoryBlock;java.lang.String;)java.lang.Object;3
public Object getSynchronizedProperty(IMemoryBlock memoryBlock, String propertyId) {
    SynchronizeInfo info = fSynchronizeInfo.get(memoryBlock);
    if (info != null) {
        Object value = info.getProperty(propertyId);
        return value;
    }
    return null;
}
method: org.eclipse.debug.internal.ui.views.memory.SynchronizeInfo.getProperty(java.lang.String;)java.lang.Object;2
public Object getProperty(String propertyId) {
    if (propertyId == null)
        return null;
    Object value = fProperties.get(propertyId);
    return value;
}

---------------Library-------------------
method: org.eclipse.compare.internal.MergeSourceViewer.selectionChanged(org.eclipse.jface.viewers.SelectionChangedEvent;)V2
public void selectionChanged(SelectionChangedEvent event) {
    Iterator e = fActions.values().iterator();
    while (e.hasNext()) {
        Object next = e.next();
        if (next instanceof MergeViewerAction) {
            MergeViewerAction action = (MergeViewerAction) next;
            if (action.isSelectionDependent())
                action.update();
        }
    }
}
---------------Client-------------------
method: org.eclipse.compare.internal.MergeSourceViewer.textChanged(org.eclipse.jface.text.TextEvent;)V2
public void textChanged(TextEvent event) {
    updateContentDependantActions();
}
method: org.eclipse.compare.internal.MergeSourceViewer.updateContentDependantActions()V1
void updateContentDependantActions() {
    Iterator e = fActions.values().iterator();
    while (e.hasNext()) {
        Object next = e.next();
        if (next instanceof MergeViewerAction) {
            MergeViewerAction action = (MergeViewerAction) next;
            if (action.isContentDependent())
                action.update();
        }
    }
}

---------------Library-------------------
method: org.eclipse.jdt.launching.JavaRuntime.computeDefaultContainerEntries(org.eclipse.jdt.launching.IRuntimeClasspathEntry;org.eclipse.debug.core.ILaunchConfiguration;)Aorg.eclipse.jdt.launching.IRuntimeClasspathEntry;2
private static IRuntimeClasspathEntry[] computeDefaultContainerEntries(IRuntimeClasspathEntry entry, ILaunchConfiguration config) throws CoreException {
    IJavaProject project = entry.getJavaProject();
    if (project == null) {
        project = getJavaProject(config);
    }
    return computeDefaultContainerEntries(entry, project);
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.wizards.PsfUrlStore.getSuggestedDefault()java.lang.String;1
public String getSuggestedDefault() {
    return getPrevious();
}
method: org.eclipse.team.internal.ui.wizards.PsfStore.getPrevious()java.lang.String;1
protected String getPrevious() {
    IDialogSettings section = getSettingsSection();
    String retval = section.get(getPreviousTag());
    if (retval == null) {
        retval = "";
    }
    return retval;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.launcher.LauncherUtilsStatusHandler.initializeProcessor(org.eclipse.pde.internal.ui.wizards.tools.OrganizeManifestsProcessor;)V1
private static void initializeProcessor(OrganizeManifestsProcessor processor) {
    processor.setAddMissing(false);
    processor.setRemoveUnresolved(false);
    processor.setModifyDep(false);
    processor.setRemoveLazy(false);
    processor.setRemoveUselessFiles(false);
    processor.setAddDependencies(true);
    processor.setCalculateUses(false);
    processor.setMarkInternal(false);
    processor.setPrefixIconNL(false);
    processor.setUnusedDependencies(false);
    processor.setUnusedKeys(false);
}
---------------Client-------------------
method: org.eclipse.team.internal.ui.synchronize.TeamSynchronizingPerspective.createInitialLayout(org.eclipse.ui.IPageLayout;)V2
public void createInitialLayout(IPageLayout layout) {
    defineActions(layout);
    defineLayout(layout);
}
method: org.eclipse.team.internal.ui.synchronize.TeamSynchronizingPerspective.defineActions(org.eclipse.ui.IPageLayout;)V2
public void defineActions(IPageLayout layout) {
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.project");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.folder");
    layout.addNewWizardShortcut("org.eclipse.ui.wizards.new.file");
    layout.addShowViewShortcut(ISynchronizeView.VIEW_ID);
    layout.addShowViewShortcut(IPageLayout.ID_PROJECT_EXPLORER);
    layout.addShowViewShortcut(IPageLayout.ID_OUTLINE);
    layout.addShowViewShortcut(IPageLayout.ID_TASK_LIST);
    layout.addShowViewShortcut(IPageLayout.ID_PROBLEM_VIEW);
    layout.addActionSet("org.eclipse.team.ui.actionSet");
    layout.addPerspectiveShortcut("org.eclipse.ui.resourcePerspective");
}

---------------Library-------------------
method: org.eclipse.ui.statushandlers.StatusAdapter.addAdapter(java.lang.Class;java.lang.Object;)V3
public void addAdapter(Class adapter, Object object) {
    if (adapters == null) {
        adapters = new  HashMap();
    }
    adapters.put(adapter, object);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.IgnoreResourcesDialog.close()Z1
public boolean close() {
    if (dlgTitleImage != null) {
        dlgTitleImage.dispose();
    }
    return super.close();
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.JavaProjectWizard.performCancel()Z1
@Override
public boolean performCancel() {
    fSecondPage.performCancel();
    return super.performCancel();
}
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageTwo.performCancel()V1
public void performCancel() {
    if (fCurrProject != null) {
        removeProvisonalProject();
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.ui.CVSDecoration.initialize(org.eclipse.core.runtime.Preferences;java.lang.String;java.lang.String;java.lang.String;)V5
private void initialize(Preferences preferences, String fileFormater, String folderFormatter, String projectFormatter) {
    this.preferences = preferences;
    this.fileFormatter = updateOldDirtyFlag(fileFormater);
    this.folderFormatter = updateOldDirtyFlag(folderFormatter);
    this.projectFormatter = updateOldDirtyFlag(projectFormatter);
}
---------------Client-------------------
method: org.eclipse.ltk.core.refactoring.resource.ResourceChange$ValidationState.initializeResource(org.eclipse.core.resources.IResource;)V2
private void initializeResource(IResource resource) {
    fKind = RESOURCE;
    fDirty = false;
    fReadOnly = Resources.isReadOnly(resource);
    fModificationStamp = resource.getModificationStamp();
}
method: org.eclipse.ltk.internal.core.refactoring.Resources.isReadOnly(org.eclipse.core.resources.IResource;)Z1
public static boolean isReadOnly(IResource resource) {
    ResourceAttributes resourceAttributes = resource.getResourceAttributes();
    if (resourceAttributes == null)
        return false;
    return resourceAttributes.isReadOnly();
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_context_get_border_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_style_context_get_border_color(long context, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_style_context_get_border_color(context, state, color);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.views.tasklist.MarkerType.getAllSupertypes()Aorg.eclipse.ui.views.tasklist.MarkerType;1
public MarkerType[] getAllSupertypes() {
    ArrayList result = new  ArrayList();
    getAllSupertypes(result);
    return (MarkerType[]) result.toArray(new MarkerType[result.size()]);
}
---------------Client-------------------
method: org.eclipse.equinox.p2.engine.ProvisioningContext.getArtifactKeys(org.eclipse.core.runtime.IProgressMonitor;)org.eclipse.equinox.p2.query.IQueryable;2
public IQueryable<IArtifactKey> getArtifactKeys(IProgressMonitor monitor) {
    return QueryUtil.compoundQueryable(getLoadedArtifactRepositories(monitor));
}
method: org.eclipse.equinox.p2.query.QueryUtil.compoundQueryable(java.util.Collection;)org.eclipse.equinox.p2.query.IQueryable;1
public static <T> IQueryable<T> compoundQueryable(Collection<? extends IQueryable<T>> queryables) {
    return new  CompoundQueryable<T>(queryables.toArray(new IQueryable[queryables.size()]));
}

---------------Library-------------------
method: org.eclipse.ui.internal.expressions.LegacyViewerContributionExpression.collectExpressionInfo(org.eclipse.core.expressions.ExpressionInfo;)V2
@Override
public final void collectExpressionInfo(final ExpressionInfo info) {
    super.collectExpressionInfo(info);
    info.addVariableNameAccess(ISources.ACTIVE_MENU_NAME);
    if (expression != null) {
        expression.collectExpressionInfo(info);
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.preferences.FilterTextControl.createControls(org.eclipse.swt.widgets.Composite;)V2
private void createControls(Composite parent) {
    createTextControl(parent);
    createClearButton(parent);
    updateClearButtonVisibility(false);
}
method: org.eclipse.jdt.internal.ui.preferences.FilterTextControl.updateClearButtonVisibility(Z)V2
private void updateClearButtonVisibility(boolean visible) {
    if (fClearButton != null) {
        fClearButton.setVisible(visible);
    }
}

---------------Library-------------------
method: org.eclipse.core.commands.operations.TriggeredOperations.addContext(org.eclipse.core.commands.operations.IUndoContext;)V2
public void addContext(IUndoContext context) {
    if (triggeringOperation != null) {
        triggeringOperation.addContext(context);
        recomputeContexts();
    }
}
---------------Client-------------------
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.ListDialogField.dialogFieldChanged()V1
@Override
public void dialogFieldChanged() {
    super.dialogFieldChanged();
    updateButtonState();
}
method: org.eclipse.jdt.internal.ui.wizards.dialogfields.DialogField.dialogFieldChanged()V1
public void dialogFieldChanged() {
    if (fDialogFieldListener != null) {
        fDialogFieldListener.dialogFieldChanged(this);
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_accel_label_set_accel(JII)V3
public static final void gtk_accel_label_set_accel(long accel_label, int accel_key, int accel_mods) {
    lock.lock();
    try {
        _gtk_accel_label_set_accel(accel_label, accel_key, accel_mods);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.widgets.Control.setBackgroundColor(JJLorg.eclipse.swt.internal.gtk.GdkRGBA;)V4
void setBackgroundColor(long context, long handle, GdkRGBA rgba) {
    OS.gtk_widget_override_background_color(handle, OS.GTK_STATE_FLAG_NORMAL, rgba);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_override_background_color(JILorg.eclipse.swt.internal.gtk.GdkRGBA;)V3
public static final void gtk_widget_override_background_color(long widget, int state, GdkRGBA color) {
    lock.lock();
    try {
        _gtk_widget_override_background_color(widget, state, color);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.equinox.p2.ui.RepositoryManipulationPage.getViewerProvisioningListener()org.eclipse.equinox.internal.p2.ui.viewers.StructuredViewerProvisioningListener;1
private StructuredViewerProvisioningListener getViewerProvisioningListener() {
    return new  StructuredViewerProvisioningListener(RepositoryManipulationPage.this.getClass().getName(), repositoryViewer, ProvUIProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, ui.getOperationRunner()) {

        protected void repositoryDiscovered(RepositoryEvent e) {
            RepositoryManipulationPage.this.safeRefresh(null);
        }

        protected void repositoryChanged(RepositoryEvent e) {
            RepositoryManipulationPage.this.safeRefresh(null);
        }
    };
}
---------------Client-------------------
method: org.eclipse.core.internal.databinding.observable.masterdetail.MapDetailValueObservableMap$EntrySet.iterator()java.util.Iterator;1
public Iterator iterator() {
    final Iterator keyIterator = keySet().iterator();
    return new  Iterator() {

        public boolean hasNext() {
            return keyIterator.hasNext();
        }

        public Object next() {
            Object key = keyIterator.next();
            return new  MapEntry(key);
        }

        public void remove() {
            keyIterator.remove();
        }
    };
}
method: org.eclipse.core.internal.databinding.observable.masterdetail.MapDetailValueObservableMap.keySet()java.util.Set;1
public Set keySet() {
    getterCalled();
    return masterMap.keySet();
}

---------------Library-------------------
method: org.eclipse.jdt.internal.launching.RuntimeClasspathEntry.getResolvedClasspathEntry()org.eclipse.jdt.core.IClasspathEntry;1
protected IClasspathEntry getResolvedClasspathEntry() {
    if (fResolvedEntry == null) {
        fResolvedEntry = JavaCore.getResolvedClasspathEntry(getClasspathEntry());
    }
    return fResolvedEntry;
}
---------------Client-------------------
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.toString()java.lang.String;1
@Override
public String toString() {
    return getLabel();
}
method: org.eclipse.ant.internal.ui.model.AntProjectNodeProxy.getLabel()java.lang.String;1
@Override
public String getLabel() {
    if (fProject == null) {
        parseBuildFile();
    }
    fName = super.getLabel();
    return fName;
}

---------------Library-------------------
method: org.eclipse.jetty.util.log.StdErrLog.warn(java.lang.String;Ajava.lang.Object;)V3
public void warn(String msg, Object... args) {
    if (_level <= LEVEL_WARN) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":WARN:", msg, args);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}
---------------Client-------------------
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.Throwable;)V2
public void debug(Throwable thrown) {
    debug("", thrown);
}
method: org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String;java.lang.Throwable;)V3
public void debug(String msg, Throwable thrown) {
    if (_level <= LEVEL_DEBUG) {
        StringBuilder buffer = new  StringBuilder(64);
        format(buffer, ":DBUG:", msg, thrown);
        (_stderr == null ? System.err : _stderr).println(buffer);
    }
}

---------------Library-------------------
method: org.eclipse.ui.console.IOConsole.streamClosed(org.eclipse.ui.console.IOConsoleInputStream;)V2
void streamClosed(IOConsoleInputStream stream) {
    synchronized (openStreams) {
        openStreams.remove(stream);
        checkFinished();
    }
}
---------------Client-------------------
method: org.eclipse.search2.internal.ui.InternalSearchUI.addQueryListener(org.eclipse.search.ui.IQueryListener;)V2
public void addQueryListener(IQueryListener l) {
    getSearchManager().addQueryListener(l);
}
method: org.eclipse.search2.internal.ui.QueryManager.addQueryListener(org.eclipse.search.ui.IQueryListener;)V2
public void addQueryListener(IQueryListener l) {
    synchronized (fListeners) {
        fListeners.add(l);
    }
}

---------------Library-------------------
method: org.eclipse.swt.internal.gtk.OS.gtk_style_get_bg_gc(JIAJ)V3
public static final void gtk_style_get_bg_gc(long style, int index, long[] gc) {
    lock.lock();
    try {
        _gtk_style_get_bg_gc(style, index, gc);
    } finally {
        lock.unlock();
    }
}
---------------Client-------------------
method: org.eclipse.swt.browser.MozillaDelegate.setSize(JII)V4
void setSize(long embedHandle, int width, int height) {
    OS.gtk_widget_set_size_request(embedHandle, width, height);
}
method: org.eclipse.swt.internal.gtk.OS.gtk_widget_set_size_request(JII)V3
public static final void gtk_widget_set_size_request(long widget, int width, int height) {
    lock.lock();
    try {
        _gtk_widget_set_size_request(widget, width, height);
    } finally {
        lock.unlock();
    }
}

---------------Library-------------------
method: org.eclipse.ui.internal.cheatsheets.CheatSheetHistory.fireChange()V1
private void fireChange() {
    Object[] array = listeners.getListeners();
    for (int i = 0; i < array.length; i++) {
        IPropertyListener element = (IPropertyListener) array[i];
        element.propertyChanged(this, 0);
    }
}
---------------Client-------------------
method: org.eclipse.ui.internal.WorkbenchPartReference.fireVisibilityChange()V1
void fireVisibilityChange() {
    fireInternalPropertyChange(INTERNAL_PROPERTY_VISIBLE);
}
method: org.eclipse.ui.internal.WorkbenchPartReference.fireInternalPropertyChange(I)V2
protected void fireInternalPropertyChange(int id) {
    Object listeners[] = internalPropChangeListeners.getListeners();
    for (int i = 0; i < listeners.length; i++) {
        ((IPropertyListener) listeners[i]).propertyChanged(this, id);
    }
}

---------------Library-------------------
method: org.eclipse.team.internal.ccvs.core.filesystem.CVSURI.encode(CCLjava.lang.String;)java.lang.String;4
private String encode(char charToEncode, char encoding, String string) {
    String result = string.replaceAll(new  String(new char[] { encoding }), new  String(new char[] { encoding, encoding }));
    return result.replace(charToEncode, encoding);
}
---------------Client-------------------
method: org.eclipse.team.internal.ccvs.core.filesystem.CVSURI.decodeAuthority(java.lang.String;)java.lang.String;1
private static String decodeAuthority(String authority) {
    authority = decode('/', '!', authority);
    authority = decode('@', '~', authority);
    authority = decode(':', '_', authority);
    return authority;
}
method: org.eclipse.team.internal.ccvs.core.filesystem.CVSURI.decode(CCLjava.lang.String;)java.lang.String;3
private static String decode(char encodedChar, char encoding, String string) {
    String reuslt = string.replace(encoding, encodedChar);
    return reuslt.replaceAll(new  String(new char[] { encodedChar, encodedChar }), new  String(new char[] { encoding }));
}

---------------Library-------------------
method: org.eclipse.jdt.internal.ui.fix.ConvertLoopCleanUp.getRequirements()org.eclipse.jdt.ui.cleanup.CleanUpRequirements;1
@Override
public CleanUpRequirements getRequirements() {
    return new  CleanUpRequirements(isEnabled(CleanUpConstants.CONTROL_STATMENTS_CONVERT_FOR_LOOP_TO_ENHANCED), false, false, null);
}
---------------Client-------------------
method: org.eclipse.ui.internal.BundleGroupProperties.getFeatureImageUrl(org.eclipse.core.runtime.IBundleGroup;)java.net.URL;1
public static URL getFeatureImageUrl(IBundleGroup bundleGroup) {
    return getUrl(bundleGroup.getProperty(FEATURE_IMAGE), null);
}
method: org.eclipse.ui.internal.BrandingProperties.getUrl(java.lang.String;org.osgi.framework.Bundle;)java.net.URL;2
public static URL getUrl(String value, Bundle definingBundle) {
    try {
        if (value != null) {
            return new  URL(value);
        }
    } catch (MalformedURLException e) {
        if (definingBundle != null) {
            return Platform.find(definingBundle, new  Path(value));
        }
    }
    return null;
}

---------------Library-------------------
method: org.eclipse.jetty.io.BufferCache$CachedBuffer.setAssociate(java.lang.Object;org.eclipse.jetty.io.BufferCache$CachedBuffer;)V3
public void setAssociate(Object key, CachedBuffer associate) {
    if (_associateMap == null)
        _associateMap = new  HashMap();
    _associateMap.put(key, associate);
}
---------------Client-------------------
method: org.eclipse.jface.resource.ImageRegistry.putEntry(java.lang.String;org.eclipse.jface.resource.ImageRegistry$Entry;)V3
private void putEntry(String key, Entry entry) {
    getTable().put(key, entry);
}
method: org.eclipse.jface.resource.ImageRegistry.getTable()java.util.Map;1
private Map<String, Entry> getTable() {
    if (table == null) {
        table = new  HashMap<String, Entry>(10);
    }
    return table;
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.compare.ManifestStructureCreator.worked(org.eclipse.core.runtime.IProgressMonitor;)V2
private void worked(IProgressMonitor monitor) {
    if (monitor.isCanceled())
        throw new  OperationCanceledException();
    monitor.worked(1);
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;)V1
public static void updateMonitor(IProgressMonitor monitor) throws OperationCanceledException {
    updateMonitor(monitor, 0);
}
method: org.eclipse.pde.api.tools.internal.util.Util.updateMonitor(org.eclipse.core.runtime.IProgressMonitor;I)V2
public static void updateMonitor(IProgressMonitor monitor, int work) throws OperationCanceledException {
    if (monitor == null) {
        return;
    }
    if (monitor.isCanceled()) {
        throw new  OperationCanceledException();
    }
    monitor.worked(work);
}

---------------Library-------------------
method: org.eclipse.ant.internal.ui.preferences.ClasspathModel.removeAll()V1
public void removeAll() {
    if (fAntHomeEntry != null) {
        fAntHomeEntry.removeAll();
    }
    if (fUserGlobalEntry != null) {
        fUserGlobalEntry.removeAll();
    }
}
---------------Client-------------------
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushCaches()V1
public void flushCaches() {
    if (fRootCache != null) {
        fRootCache.flush();
    }
    flushMemberCache();
}
method: org.eclipse.pde.api.tools.internal.model.ApiModelCache.flushMemberCache()V1
private void flushMemberCache() {
    if (this.fMemberTypeCache != null) {
        this.fMemberTypeCache.flush();
    }
}

---------------Library-------------------
method: org.eclipse.pde.internal.ui.wizards.target.TargetDefinitionWizardPage$1.widgetSelected(org.eclipse.swt.events.SelectionEvent;)V2
public void widgetSelected(SelectionEvent e) {
    boolean enabled = fExistingTargetButton.getSelection();
    fTargets.setEnabled(enabled);
}
---------------Client-------------------
method: org.eclipse.jdt.ui.wizards.NewJavaProjectWizardPageOne$NameGroup.postSetFocus()V1
public void postSetFocus() {
    fNameField.postSetFocusOnDialogField(getShell().getDisplay());
}
method: org.eclipse.jface.wizard.WizardPage.getShell()org.eclipse.swt.widgets.Shell;1
@Override
public Shell getShell() {
    IWizardContainer container = getContainer();
    if (container == null) {
        return null;
    }
    return container.getShell();
}

---------------Library-------------------
method: org.eclipse.ui.internal.progress.ProgressMonitorFocusJobDialog$4.done(org.eclipse.core.runtime.jobs.IJobChangeEvent;)V2
@Override
public void done(IJobChangeEvent event) {
    synchronized (jobIsDone) {
        jobIsDone.notify();
    }
}
---------------Client-------------------
method: org.eclipse.equinox.internal.security.storage.PasswordProviderSelector.added(Aorg.eclipse.core.runtime.IExtension;)V2
public void added(IExtension[] extensions) {
    clearCaches();
}
method: org.eclipse.equinox.internal.security.storage.PasswordProviderSelector.clearCaches()V1
public void clearCaches() {
    synchronized (modules) {
        modules.clear();
        SecurePreferencesMapper.clearPasswordCache();
    }
}

---------------Library-------------------
method: org.eclipse.debug.internal.ui.views.launch.LaunchView$TreeViewerContextProvider.getViewerTreePath(org.eclipse.debug.internal.ui.viewers.model.provisional.IModelDelta;)org.eclipse.jface.viewers.TreePath;2
private TreePath getViewerTreePath(IModelDelta node) {
    ArrayList<Object> list = new  ArrayList<Object>();
    IModelDelta parentDelta = node.getParentDelta();
    while (parentDelta != null) {
        list.add(0, node.getElement());
        node = parentDelta;
        parentDelta = node.getParentDelta();
    }
    return new  TreePath(list.toArray());
}
---------------Client-------------------
method: org.eclipse.debug.internal.ui.viewers.LabelResult.getTreePath()org.eclipse.jface.viewers.TreePath;1
@Override
public TreePath getTreePath() {
    return getNode().getTreePath();
}
method: org.eclipse.debug.internal.ui.viewers.ModelNode.getTreePath()org.eclipse.jface.viewers.TreePath;1
public synchronized TreePath getTreePath() {
    List<Object> path = new  ArrayList<Object>();
    ModelNode node = this;
    while (node != null) {
        path.add(0, node.getElement());
        node = node.getParentNode();
    }
    return new  TreePath(path.toArray());
}

---------------Library-------------------
method: org.eclipse.ui.internal.util.Util.safeCopy(java.util.SortedSet;java.lang.Class;Z)java.util.SortedSet;3
public static SortedSet safeCopy(SortedSet sortedSet, Class c, boolean allowNullElements) {
    if (sortedSet == null || c == null) {
        throw new  NullPointerException();
    }
    sortedSet = Collections.unmodifiableSortedSet(new  TreeSet(sortedSet));
    Iterator iterator = sortedSet.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return sortedSet;
}
---------------Client-------------------
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;)java.util.Set;2
public static final Set safeCopy(final Set set, final Class c) {
    return safeCopy(set, c, false);
}
method: org.eclipse.core.internal.commands.util.Util.safeCopy(java.util.Set;java.lang.Class;Z)java.util.Set;3
public static final Set safeCopy(final Set set, final Class c, final boolean allowNullElements) {
    if (set == null || c == null) {
        throw new  NullPointerException();
    }
    final Set copy = Collections.unmodifiableSet(new  HashSet(set));
    final Iterator iterator = copy.iterator();
    while (iterator.hasNext()) {
        assertInstance(iterator.next(), c, allowNullElements);
    }
    return set;
}

